# coding: utf-8

"""
    iEngage 2.0 API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import os
import sys
import unittest

import iengage_client
from iengage_client.rest import ApiException
from iengage_client.apis.user_authentication_api import UserAuthenticationApi


class TestUserAuthenticationApi(unittest.TestCase):
    """ UserAuthenticationApi unit test stubs """

    def setUp(self):
        iengage_client.configuration.access_token = None
        self.api = iengage_client.apis.user_authentication_api.UserAuthenticationApi()

    def tearDown(self):
        pass

    def test_add_notification_registered_id(self):
        """
        Test case for add_notification_registered_id

        Add device token
        """
        """clientToken = None;
        requesterId = None;
        print(self.api.add_notification_registered_id(registeredId,"windows",clientToken,))
        registeredId = "new device";
        """
        pass

    def test_add_user(self):
        """
        Test case for add_user

        Add/Register new user
        """
        screenName = "tttt";
        emailId = "tttt@gmail.com";
        password = "neverdie";
        clientToken = None;
        print(self.api.add_user(screenName,emailId,password,clientToken))
        pass

    def test_authenticate(self):
        """
        Test case for authenticate

        Authenticate User
        """
        username = None;
        password = None;
        client_token = None;
        print(self.api.authenticate(username,password,client_token))
        pass

    def test_change_password(self):
        """
        Test case for change_password

        Change password
        """

        username = None;
        password = None;
        client_token = None;

        requester_id = None
        current_pwd = "satya123#"
        new_pwd = None
        print(self.api.change_password(current_pwd,new_pwd,requester_id,client_token))
        pass

    def test_create_association(self):
        """
        Test case for create_association

        Create association
        """
        client_token = None;

        requester_id = None
        name = "Mumbai"
        print(self.api.create_association(name,requester_id,client_token))
        pass

    def test_delete_user(self):
        """
        Test case for delete_user

        Delete user
        """
        userid = 649432
        client_token = None;
        print(self.api.delete_user(userid,client_token))

        pass

    def test_get_associations(self):
        """
        Test case for get_associations

        Get list of associations
        """
        requester_id = None
        client_token = None
        print(self.api.get_associations(requester_id,client_token));
        pass

    def test_logout(self):
        """
        Test case for logout

        Logout
        """
        requester_id = None
        client_token = None
        print(self.api.logout(requester_id,client_token))
        pass


if __name__ == '__main__':
    unittest.main()
