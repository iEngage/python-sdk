# coding: utf-8

"""
    iEngage 2.0 API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import os
import sys
import unittest

import iengage_client
from iengage_client.rest import ApiException
from iengage_client.apis.notification_api import NotificationApi
from iengage_client.models.notification import Notification

class TestNotificationApi(unittest.TestCase):
    """ NotificationApi unit test stubs """

    def setUp(self):
        iengage_client.configuration.access_token = None
        self.api = iengage_client.apis.notification_api.NotificationApi()

    def tearDown(self):
        pass

    def test_add_notification(self):
        """
        Test case for add_notification

        Create custom notification
        """
        requester_id = None
        client_token = None
        n = Notification()
        n.title = "New notification"
        n.body = "Body notification"
        n.extra_data = "Extra data notification"
        n.role_name = None

        print(self.api.add_notification(requester_id,client_token,body=n))
        pass

    def test_get_notifications(self):
        """
        Test case for get_notifications

        Get list of notifications
        """
        requester_id = None
        client_token = None
        type = "ALL"
        start  =0
        end = 10
        print(self.api.get_notifications(type,start,end,requester_id,client_token))
        pass

    def test_mark_all_notification_as_read(self):
        """
        Test case for mark_all_notification_as_read

        Mark all notification as read
        """
        requester_id = None
        client_token = None
        print(self.api.mark_all_notification_as_read(requester_id,client_token))
        pass

    def test_mark_notification_as_read(self):
        """
        Test case for mark_notification_as_read

        Mark notification as read
        """
        requester_id = None
        client_token = None
        nid  = 638938
        print(self.api.mark_notification_as_read(nid,requester_id,client_token))
        pass

    def test_notification_count(self):
        """
        Test case for notification_count

        Get notifications count
        """
        requester_id = None
        client_token = None
        type = "ALL"
        print(self.api.notification_count(type,requester_id,client_token))
        pass


if __name__ == '__main__':
    unittest.main()
