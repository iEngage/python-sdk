# coding: utf-8

"""
    iEngage 2.0 API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import os
import sys
import unittest

import iengage_client
from iengage_client.rest import ApiException
from iengage_client.apis.project_management_api import ProjectManagementApi
from iengage_client.models.milestone import Milestone
from iengage_client.models.task import Task
from iengage_client.models.comment import Comment
from iengage_client.models.user import User

class TestProjectManagementApi(unittest.TestCase):
    """ ProjectManagementApi unit test stubs """

    def setUp(self):
        iengage_client.configuration.access_token = None
        self.api = iengage_client.apis.project_management_api.ProjectManagementApi()

    def tearDown(self):
        pass

    def test_add_milestone_comment(self):
        """
        Test case for add_milestone_comment

        Comment on milestone
        """
        requesterId = None
        clientToken = None
        mid = 651621
        c = Comment()
        c.comment_text = "Milestone comment"
        print(self.api.add_milestone_comment(mid,requesterId,clientToken,body=c))
        pass

    def test_add_task_comment(self):
        """
        Test case for add_task_comment

        Comment on task
        """
        requesterId = None
        clientToken = None
        tid = 651624
        c = Comment()
        c.comment_text = "Task Comment"
        print(self.api.add_task_comment(tid,requesterId,clientToken,body=c))
        pass

    def test_create_milestone(self):
        """
        Test case for create_milestone

        Create milestone
        """
        requesterId = None
        clientToken = None
        m = Milestone()
        m.milestone_title = "Java 10"
        m.milestone_description = "New java updated"
        m.due_date = "2019-07-19T19:00:00.000+05:30"

        print(self.api.create_milestone(requesterId,clientToken,body=m))
        pass

    def test_create_task(self):
        """
        Test case for create_task

        Create task
        """
        requesterId = None
        clientToken = None
        mid = 651621
        t = Task()
        t.task_title = "New task 100"
        t.task_description = "New task description"
        t.priority = 1
        t.due_date ="2019-07-19T19:00:00.000+05:30"
        t.assignee_user_id = None
        t.never_due = False
        u = User()
        u.user_id = None
        t.user = u
        print(self.api.create_task(mid,requesterId,clientToken,body=t))
        pass

    def test_delete_milestone(self):
        """
        Test case for delete_milestone

        Delete milestone
        """
        requesterId = None
        clientToken = None
        mid = 651621
        print(self.api.delete_milestone(mid,requesterId,clientToken))
        pass

    def test_delete_task(self):
        """
        Test case for delete_task

        Delete task
        """
        requesterId = None
        clientToken = None
        tid = 651624
        print(self.api.delete_task(tid,requesterId,clientToken))
        pass

    def test_get_milestones(self):
        """
        Test case for get_milestones

        Get list of milestones
        """
        requesterId = None
        clientToken = None
        print(self.api.get_milestones(requesterId,clientToken))
        pass

    def test_get_milestones_comments(self):
        """
        Test case for get_milestones_comments

        Get list of comments written on Milestones
        """
        requesterId = None
        clientToken = None
        mid = 651621
        print(self.api.get_milestones_comments(mid,requesterId,clientToken))

        pass

    def test_get_task_comments(self):
        """
        Test case for get_task_comments

        Get list of Comments written on task
        """
        requesterId = None
        clientToken = None
        tid = 651624
        print(self.api.get_task_comments(tid,requesterId,clientToken))
        pass

    def test_get_user_tasks(self):
        """
        Test case for get_user_tasks

        Get list of task assigned to user
        """
        requesterId = None
        clientToken = None
        start = 0
        end = 10
        uid = None
        status = 0
        print(self.api.get_user_tasks(uid,status,requesterId,clientToken))
        pass

    def test_update_milestone(self):
        """
        Test case for update_milestone

        Update milestone
        """
        requesterId = None
        clientToken = None
        mid = 651621
        title ="Updated Milestone"
        desc ="Updated Milestone version1"
        due_date = "2019-07-19T13:21:00.000+05:30"
        print(self.api.update_milestone(mid,title,desc,due_date,requesterId,clientToken))
        pass

    def test_update_task(self):
        """
        Test case for update_task

        Update task
        """
        requesterId = None
        clientToken = None
        tid = 651624
        title = "nothing"
        desc = "Nothing"
        dueDate = "12-22-2019T12:01:39"
        status = 1
        rid = None

        print(self.api.update_task(tid,title,desc,dueDate,status,rid,requesterId,clientToken))
        pass

    def test_update_task_status(self):
        """
        Test case for update_task_status

        Update task status
        """
        requesterId = None
        clientToken = None
        tid = 651624
        status = 1
        print(self.api.update_task_status(tid,status,requesterId,clientToken));
        pass


if __name__ == '__main__':
    unittest.main()
