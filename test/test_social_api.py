# coding: utf-8

"""
    iEngage 2.0 API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import os
import sys
import unittest

import iengage_client
from iengage_client.rest import ApiException
from iengage_client.apis.social_api import SocialApi


class TestSocialApi(unittest.TestCase):
    """ SocialApi unit test stubs """

    def setUp(self):
        iengage_client.configuration.access_token = None
        self.api = iengage_client.apis.social_api.SocialApi()

    def tearDown(self):
        pass

    def test_add_friend(self):
        """
        Test case for add_friend

        Add Friend
        """
        requesterId = None
        clientToken = None
        id1 = None
        id2 = None
        print(self.api.add_friend(id1,id2,requesterId,clientToken))
        pass

    def test_confirm_friend_request(self):
        """
        Test case for confirm_friend_request

        confirm/ignore friend request
        """
        requesterId = None
        clientToken = None
        uid = None
        status = 1
        print(self.api.confirm_friend_request(uid,status,requesterId,clientToken))
        pass

    def test_follow(self):
        """
        Test case for follow

        Follow user
        """
        requesterId = None
        clientToken = None
        follower = None
        followee = None
        print(self.api.follow(follower,followee,requesterId,clientToken))
        pass

    def test_get_user(self):
        """
        Test case for get_user

        Get user by id 
        """
        requesterId = None
        clientToken = None
        uid = None
        print(self.api.get_user(uid,requesterId,clientToken))
        pass

    def test_get_user_detail(self):
        """
        Test case for get_user_detail

        Get user details 
        """
        requesterId = None
        clientToken = None
        uid = None
        print(self.api.get_user_detail(uid,requesterId,clientToken))
        pass

    def test_get_user_followers(self):
        """
        Test case for get_user_followers

        Get list of followers
        """
        requesterId = None
        clientToken = None
        uid = 532893
        print(self.api.get_user_followers(uid,requesterId,clientToken))
        pass


    def test_get_user_following(self):
        """
        Test case for get_user_following

        Get list of users that are being followed
        """
        requesterId = None
        clientToken = None
        uid = None
        print(self.api.get_user_following(uid,requesterId,clientToken))
        pass

    def test_get_user_friends(self):
        """
        Test case for get_user_friends

        Get list of friends
        """
        uid = 532893

        requesterId = None
        clientToken = None
        print(self.api.get_user_friends(uid, requesterId, clientToken))
        pass

    def test_remove_friend(self):
        """
        Test case for remove_friend

        Remove friend 
        """
        requesterId = None
        clientToken = None
        id1 = None
        id2 = None
        print(self.api.remove_friend(id1,id2,requesterId,clientToken))
        pass

    def test_request_friend(self):
        """
        Test case for request_friend

        Send friend request
        """
        requesterId = None
        clientToken = None
        uid = None
        print(self.api.request_friend(uid,requesterId,clientToken))
        pass

    def test_requests_for_me(self):
        """
        Test case for requests_for_me

        Get list of friend requests
        """
        requesterId = None
        clientToken = None
        print(self.api.requests_for_me(requesterId,clientToken))
        pass

    def test_unfollow(self):
        """
        Test case for unfollow

        Unfollow user
        """
        requesterId = None
        clientToken = None
        unfollowee = None
        unfollower = None
        print(self.api.unfollow(unfollower,unfollowee,requesterId,clientToken))

        pass


if __name__ == '__main__':
    unittest.main()
