# coding: utf-8

"""
    iEngage 2.0 API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import os
import sys
import unittest

import iengage_client
from iengage_client.rest import ApiException
from iengage_client.apis.interaction_api import InteractionApi
from iengage_client.models.interaction_input_model import InteractionInputModel
from iengage_client.models.interaction_response import InteractionResponse
from iengage_client.models.interaction_category import InteractionCategory

class TestInteractionApi(unittest.TestCase):
    """ InteractionApi unit test stubs """

    def setUp(self):
        iengage_client.configuration.access_token = None
        self.api = iengage_client.apis.interaction_api.InteractionApi()

    def tearDown(self):
        pass

    def test_add_interaction(self):
        """
        Test case for add_interaction

        Share interaction without attachment
        """
        uid = 532893
        start = 0
        end = 10
        requesterId = None
        clientToken = None
        i = InteractionInputModel()
        i.interaction_title = "abc122"
        i.interaction_description = "I am really excited to see it"
        i.interaction_type = "Opinion"

        print(self.api.add_interaction(requesterId,clientToken,body=i))
        pass

    def test_add_interaction_0(self):
        """
        Test case for add_interaction_0

        Share interaction with attachment
        """
        requesterId = None
        clientToken = None
        pass

    def test_add_response(self):
        """
        Test case for add_response

        Response the specified interaction
        """
        requesterId = None
        clientToken = None
        iid = 651559
        res = InteractionResponse()
        res.response_description = "Hello"
        print(self.api.add_response(iid,requesterId,clientToken,body=res))
        #rid =651571
        pass

    def test_add_response_0(self):
        """
        Test case for add_response_0

        Response the specified interaction
        """
        requesterId = None
        clientToken = None
        pass

    def test_change_interaction_category(self):
        """
        Test case for change_interaction_category

        Change interaction category
        """
        requesterId = None
        clientToken = None
        iid = 651559
        cid = 533877
        print(self.api.change_interaction_category(iid,cid,requesterId,clientToken))
        pass


    def test_change_interaction_type(self):
        """
        Test case for change_interaction_type

        Change interaction type
        """
        requesterId = None
        clientToken = None
        iid = 651559
        itype = "World"
        print(self.api.change_interaction_type(iid,itype,requesterId,clientToken))
        pass

    def test_create_interaction_category(self):
        """
        Test case for create_interaction_category

        Create interaction category
        """
        requesterId = None
        clientToken = None
        ic = InteractionCategory()

        ic.association_id = 1000
        ic.category_name = "General"
        ic.interaction_type = "Comment"

        print(self.api.create_interaction_category(requesterId,clientToken,body=ic))
        pass

    def test_delete_interaction(self):
        """
        Test case for delete_interaction

        Delete interaction
        """
        requesterId = None
        clientToken = None
        iid = 651559
        print(self.api.delete_interaction(iid,requesterId,clientToken))
        pass

    def test_delete_interaction_category(self):
        """
        Test case for delete_interaction_category

        Delete interaction category
        """
        requesterId = None
        clientToken = None
        cid = 638694
        print(self.api.delete_interaction_category(cid,requesterId,clientToken))
        pass

    def test_delete_response(self):
        """
        Test case for delete_response

        Delete response
        """
        requesterId = None
        clientToken = None
        iid = 651559
        rid = 651571
        print(self.api.delete_response(rid,requesterId,clientToken))
        pass

    def test_dislike_response(self):
        """
        Test case for dislike_response

        Dislike response
        """
        requesterId = None
        clientToken = None
        pass

    def test_get_friends_interactions(self):
        """
        Test case for get_friends_interactions

        Get list of interactions shared by friends
        """
        requesterId = None
        clientToken = None
        interactionStatus = "ALL"
        start = 0
        end = 10
        iid = 651559
        print(self.api.get_friends_interactions(interactionStatus,start,end,requesterId,clientToken))

        pass


    def test_get_interaction(self):
        """
        Test case for get_interaction

        Get interaction by id
        """
        requesterId = None
        clientToken = None
        interactionStatus = "ALL"
        start =0
        end =10
        iid = 651559
        print(self.api.get_interaction(iid,requesterId,clientToken))
        pass

    def test_get_interaction_categories(self):
        """
        Test case for get_interaction_categories

        Get the list of interaction categories
        """
        requesterId = None
        clientToken = None
        start = 0
        end = 10

        print(self.api.get_interaction_categories(start,end,requesterId,clientToken))
        pass

    def test_get_interactions_for_user(self):
        """
        Test case for get_interactions_for_user

        Get list of all interactions visible to the user
        """
        requesterId = None
        clientToken = None
        interactionStatus = "ALL"
        start = 0
        end = 10
        print(self.api.get_interactions_for_user(interactionStatus,start,end,requesterId,clientToken))
        pass

    def test_get_recommend_interactions(self):
        """
        Test case for get_recommend_interactions

        Get list of recommended interactions
        """
        requesterId = None
        clientToken = None
        start = 0
        end = 10
        print(self.api.get_recommend_interactions(start,end,requesterId,clientToken))
        pass

    def test_get_recommended_interactins_from_db(self):
        """
        Test case for get_recommended_interactins_from_db

        Get list of recommended interactions from DB
        """
        requesterId = None
        clientToken = None
        uid = 532893
        start = 0
        end = 10
        print(self.api.get_recommended_interactins_from_db(uid,start,end,requesterId,clientToken))
        pass

    def test_get_recommended_users_from_db(self):
        """
        Test case for get_recommended_users_from_db

        Get list of recommended Users from DB
        """
        requesterId = None
        clientToken = None
        iid = 651559
        start = 0
        end = 10
        print(self.api.get_recommended_users_from_db(iid,start,end,requesterId,clientToken))
        pass

    def test_get_responses(self):
        """
        Test case for get_responses

        Get list of responses by interactionId
        """
        requesterId = None
        clientToken = None
        iid = 651559
        start = 0
        end =10
        print(self.api.get_responses(iid,start,end,requesterId,clientToken))
        pass

    def test_get_user_interactions(self):
        """
        Test case for get_user_interactions

        Get list of interactions shared by user
        """
        requesterId = None
        clientToken = None
        userId = 532893
        iss = 'ALL'
        start = 0
        end =10
        print(self.api.get_user_interactions(userId,iss,start,end,requesterId,clientToken))
        pass

    def test_get_user_subscribed_interaction_categories(self):
        """
        Test case for get_user_subscribed_interaction_categories

        Get list of interaction categories subscribed by the user
        """
        requesterId = None
        clientToken = None
        userId = 532893
        iss = 'ALL'
        start = 0
        end = 10
        print(self.api.get_user_subscribed_interaction_categories(userId,start,end,requesterId,clientToken))
        pass

    def test_get_user_subscribed_interactions(self):
        """
        Test case for get_user_subscribed_interactions

        Get list of interactions subscribed by user
        """
        requesterId = None
        clientToken = None
        userId = 532893
        iss = 'ALL'
        start = 0
        end = 10
        print(self.api.get_user_subscribed_interactions(userId,iss,start,end,requesterId,clientToken))
        pass

    def test_like_response(self):
        """
        Test case for like_response

        Like response
        """
        requesterId = None
        clientToken = None
        iid = 651559
        rid = 651571
        print(self.api.like_response(iid,rid,requesterId,clientToken))

        pass

    def test_mark_as_an_response(self):
        """
        Test case for mark_as_an_response

        Mark response as a response
        """
        requesterId = None
        clientToken = None
        iid = 651559
        rid = 651571
        print(self.api.mark_as_an_response(iid,rid,requesterId,clientToken));
        pass

    def test_search_interactions(self):
        """
        Test case for search_interactions

        Get list of matching interactions
        """
        requesterId = None
        clientToken = None
        st = "Pune"
        iis = "ALL"
        start  = 0
        end = 10
        print(self.api.search_interactions(st,iis,start,end,requesterId,clientToken))
        pass

    def test_subscribe_interactin_category(self):
        """
        Test case for subscribe_interactin_category

        Subscribe interaction category
        """
        requesterId = None
        clientToken = None
        cid = 533910
        print(self.api.subscribe_interactin_category(cid,requesterId,clientToken))
        pass

    def test_subscribe_interaction(self):
        """
        Test case for subscribe_interaction

        Subscribe interaction
        """
        requesterId = None
        clientToken = None
        iid = 651559
        print(self.api.subscribe_interaction(iid,requesterId,clientToken))
        pass

    def test_unmark_as_an_response(self):
        """
        Test case for unmark_as_an_response

        Unmark response as a response
        """
        requesterId = None
        clientToken = None
        iid = 651559
        rid = 651571

        print(self.api.unmark_as_an_response(iid,rid,requesterId,clientToken))
        pass

    def test_unsubscribe_interactin_category(self):
        """
        Test case for unsubscribe_interactin_category

        Unsubscribe interaction category
        """
        requesterId = None
        clientToken = None
        cid = 533910
        print(self.api.unsubscribe_interactin_category(cid,requesterId,clientToken))
        pass

    def test_unsubscribe_interaction(self):
        """
        Test case for unsubscribe_interaction

        Unsubscribe interaction
        """
        requesterId = None
        clientToken = None
        iid = 651559
        print(self.api.unsubscribe_interaction(iid,requesterId,clientToken))

        pass

    def test_update_interaction(self):
        """
        Test case for update_interaction

        Update interaction
        """
        requesterId = None
        clientToken = None
        iid = 651559
        iit = "abc122"
        print(self.api.update_interaction(iid,iit,requesterId,clientToken))
        pass

    def test_update_interaction_category(self):
        """
        Test case for update_interaction_category

        Update interaction category
        """
        requesterId = None
        clientToken = None
        cid = 638793
        cname = "General"
        print(self.api.update_interaction_category(cid,cname,requesterId,clientToken))
        pass

    def test_update_response(self):
        """
        Test case for update_response

        Update response
        """
        requesterId = None
        clientToken = None
        iid = 651559
        rid = 651571
        resp = "Hello WOrld"
        print(self.api.update_response(rid,resp,requesterId,clientToken))
        pass


if __name__ == '__main__':
    unittest.main()
