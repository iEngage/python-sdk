# coding: utf-8

"""
    Stakeholder engagement API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Task(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, task_id=None, task_title=None, task_description=None, status=None, priority=None, due_date=None, milestone_name=None, group_type=None, group_name=None):
        """
        Task - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'task_id': 'int',
            'task_title': 'str',
            'task_description': 'str',
            'status': 'int',
            'priority': 'int',
            'due_date': 'datetime',
            'milestone_name': 'str',
            'group_type': 'str',
            'group_name': 'str'
        }

        self.attribute_map = {
            'task_id': 'taskId',
            'task_title': 'taskTitle',
            'task_description': 'taskDescription',
            'status': 'status',
            'priority': 'priority',
            'due_date': 'dueDate',
            'milestone_name': 'milestoneName',
            'group_type': 'groupType',
            'group_name': 'groupName'
        }

        self._task_id = task_id
        self._task_title = task_title
        self._task_description = task_description
        self._status = status
        self._priority = priority
        self._due_date = due_date
        self._milestone_name = milestone_name
        self._group_type = group_type
        self._group_name = group_name

    @property
    def task_id(self):
        """
        Gets the task_id of this Task.

        :return: The task_id of this Task.
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """
        Sets the task_id of this Task.

        :param task_id: The task_id of this Task.
        :type: int
        """

        self._task_id = task_id

    @property
    def task_title(self):
        """
        Gets the task_title of this Task.

        :return: The task_title of this Task.
        :rtype: str
        """
        return self._task_title

    @task_title.setter
    def task_title(self, task_title):
        """
        Sets the task_title of this Task.

        :param task_title: The task_title of this Task.
        :type: str
        """

        self._task_title = task_title

    @property
    def task_description(self):
        """
        Gets the task_description of this Task.

        :return: The task_description of this Task.
        :rtype: str
        """
        return self._task_description

    @task_description.setter
    def task_description(self, task_description):
        """
        Sets the task_description of this Task.

        :param task_description: The task_description of this Task.
        :type: str
        """

        self._task_description = task_description

    @property
    def status(self):
        """
        Gets the status of this Task.

        :return: The status of this Task.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Task.

        :param status: The status of this Task.
        :type: int
        """

        self._status = status

    @property
    def priority(self):
        """
        Gets the priority of this Task.

        :return: The priority of this Task.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this Task.

        :param priority: The priority of this Task.
        :type: int
        """

        self._priority = priority

    @property
    def due_date(self):
        """
        Gets the due_date of this Task.

        :return: The due_date of this Task.
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """
        Sets the due_date of this Task.

        :param due_date: The due_date of this Task.
        :type: datetime
        """

        self._due_date = due_date

    @property
    def milestone_name(self):
        """
        Gets the milestone_name of this Task.

        :return: The milestone_name of this Task.
        :rtype: str
        """
        return self._milestone_name

    @milestone_name.setter
    def milestone_name(self, milestone_name):
        """
        Sets the milestone_name of this Task.

        :param milestone_name: The milestone_name of this Task.
        :type: str
        """

        self._milestone_name = milestone_name

    @property
    def group_type(self):
        """
        Gets the group_type of this Task.

        :return: The group_type of this Task.
        :rtype: str
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type):
        """
        Sets the group_type of this Task.

        :param group_type: The group_type of this Task.
        :type: str
        """

        self._group_type = group_type

    @property
    def group_name(self):
        """
        Gets the group_name of this Task.

        :return: The group_name of this Task.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """
        Sets the group_name of this Task.

        :param group_name: The group_name of this Task.
        :type: str
        """

        self._group_name = group_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
