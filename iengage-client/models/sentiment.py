# coding: utf-8

"""
    Stakeholder engagement API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Sentiment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, very_negative=None, negative=None, neutral=None, positive=None, very_positive=None):
        """
        Sentiment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'very_negative': 'float',
            'negative': 'float',
            'neutral': 'float',
            'positive': 'float',
            'very_positive': 'float'
        }

        self.attribute_map = {
            'very_negative': 'veryNegative',
            'negative': 'negative',
            'neutral': 'neutral',
            'positive': 'positive',
            'very_positive': 'veryPositive'
        }

        self._very_negative = very_negative
        self._negative = negative
        self._neutral = neutral
        self._positive = positive
        self._very_positive = very_positive

    @property
    def very_negative(self):
        """
        Gets the very_negative of this Sentiment.

        :return: The very_negative of this Sentiment.
        :rtype: float
        """
        return self._very_negative

    @very_negative.setter
    def very_negative(self, very_negative):
        """
        Sets the very_negative of this Sentiment.

        :param very_negative: The very_negative of this Sentiment.
        :type: float
        """

        self._very_negative = very_negative

    @property
    def negative(self):
        """
        Gets the negative of this Sentiment.

        :return: The negative of this Sentiment.
        :rtype: float
        """
        return self._negative

    @negative.setter
    def negative(self, negative):
        """
        Sets the negative of this Sentiment.

        :param negative: The negative of this Sentiment.
        :type: float
        """

        self._negative = negative

    @property
    def neutral(self):
        """
        Gets the neutral of this Sentiment.

        :return: The neutral of this Sentiment.
        :rtype: float
        """
        return self._neutral

    @neutral.setter
    def neutral(self, neutral):
        """
        Sets the neutral of this Sentiment.

        :param neutral: The neutral of this Sentiment.
        :type: float
        """

        self._neutral = neutral

    @property
    def positive(self):
        """
        Gets the positive of this Sentiment.

        :return: The positive of this Sentiment.
        :rtype: float
        """
        return self._positive

    @positive.setter
    def positive(self, positive):
        """
        Sets the positive of this Sentiment.

        :param positive: The positive of this Sentiment.
        :type: float
        """

        self._positive = positive

    @property
    def very_positive(self):
        """
        Gets the very_positive of this Sentiment.

        :return: The very_positive of this Sentiment.
        :rtype: float
        """
        return self._very_positive

    @very_positive.setter
    def very_positive(self, very_positive):
        """
        Sets the very_positive of this Sentiment.

        :param very_positive: The very_positive of this Sentiment.
        :type: float
        """

        self._very_positive = very_positive

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
