# coding: utf-8

"""
    Stakeholder engagement API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DataHandler(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, data_source=None, all_commands=None, preferred_commands=None, transfer_data_flavors=None, name=None, input_stream=None, content=None, content_type=None, output_stream=None):
        """
        DataHandler - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'data_source': 'DataSource',
            'all_commands': 'list[CommandInfo]',
            'preferred_commands': 'list[CommandInfo]',
            'transfer_data_flavors': 'list[DataFlavor]',
            'name': 'str',
            'input_stream': 'InputStream',
            'content': 'object',
            'content_type': 'str',
            'output_stream': 'OutputStream'
        }

        self.attribute_map = {
            'data_source': 'dataSource',
            'all_commands': 'allCommands',
            'preferred_commands': 'preferredCommands',
            'transfer_data_flavors': 'transferDataFlavors',
            'name': 'name',
            'input_stream': 'inputStream',
            'content': 'content',
            'content_type': 'contentType',
            'output_stream': 'outputStream'
        }

        self._data_source = data_source
        self._all_commands = all_commands
        self._preferred_commands = preferred_commands
        self._transfer_data_flavors = transfer_data_flavors
        self._name = name
        self._input_stream = input_stream
        self._content = content
        self._content_type = content_type
        self._output_stream = output_stream

    @property
    def data_source(self):
        """
        Gets the data_source of this DataHandler.

        :return: The data_source of this DataHandler.
        :rtype: DataSource
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """
        Sets the data_source of this DataHandler.

        :param data_source: The data_source of this DataHandler.
        :type: DataSource
        """

        self._data_source = data_source

    @property
    def all_commands(self):
        """
        Gets the all_commands of this DataHandler.

        :return: The all_commands of this DataHandler.
        :rtype: list[CommandInfo]
        """
        return self._all_commands

    @all_commands.setter
    def all_commands(self, all_commands):
        """
        Sets the all_commands of this DataHandler.

        :param all_commands: The all_commands of this DataHandler.
        :type: list[CommandInfo]
        """

        self._all_commands = all_commands

    @property
    def preferred_commands(self):
        """
        Gets the preferred_commands of this DataHandler.

        :return: The preferred_commands of this DataHandler.
        :rtype: list[CommandInfo]
        """
        return self._preferred_commands

    @preferred_commands.setter
    def preferred_commands(self, preferred_commands):
        """
        Sets the preferred_commands of this DataHandler.

        :param preferred_commands: The preferred_commands of this DataHandler.
        :type: list[CommandInfo]
        """

        self._preferred_commands = preferred_commands

    @property
    def transfer_data_flavors(self):
        """
        Gets the transfer_data_flavors of this DataHandler.

        :return: The transfer_data_flavors of this DataHandler.
        :rtype: list[DataFlavor]
        """
        return self._transfer_data_flavors

    @transfer_data_flavors.setter
    def transfer_data_flavors(self, transfer_data_flavors):
        """
        Sets the transfer_data_flavors of this DataHandler.

        :param transfer_data_flavors: The transfer_data_flavors of this DataHandler.
        :type: list[DataFlavor]
        """

        self._transfer_data_flavors = transfer_data_flavors

    @property
    def name(self):
        """
        Gets the name of this DataHandler.

        :return: The name of this DataHandler.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DataHandler.

        :param name: The name of this DataHandler.
        :type: str
        """

        self._name = name

    @property
    def input_stream(self):
        """
        Gets the input_stream of this DataHandler.

        :return: The input_stream of this DataHandler.
        :rtype: InputStream
        """
        return self._input_stream

    @input_stream.setter
    def input_stream(self, input_stream):
        """
        Sets the input_stream of this DataHandler.

        :param input_stream: The input_stream of this DataHandler.
        :type: InputStream
        """

        self._input_stream = input_stream

    @property
    def content(self):
        """
        Gets the content of this DataHandler.

        :return: The content of this DataHandler.
        :rtype: object
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this DataHandler.

        :param content: The content of this DataHandler.
        :type: object
        """

        self._content = content

    @property
    def content_type(self):
        """
        Gets the content_type of this DataHandler.

        :return: The content_type of this DataHandler.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """
        Sets the content_type of this DataHandler.

        :param content_type: The content_type of this DataHandler.
        :type: str
        """

        self._content_type = content_type

    @property
    def output_stream(self):
        """
        Gets the output_stream of this DataHandler.

        :return: The output_stream of this DataHandler.
        :rtype: OutputStream
        """
        return self._output_stream

    @output_stream.setter
    def output_stream(self, output_stream):
        """
        Sets the output_stream of this DataHandler.

        :param output_stream: The output_stream of this DataHandler.
        :type: OutputStream
        """

        self._output_stream = output_stream

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
