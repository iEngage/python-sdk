# coding: utf-8

"""
    Stakeholder engagement API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class QuestionApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_answer(self, question_id, answer, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Answer the specified question
        Allows the user to answer the question
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_answer(question_id, answer, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param str answer: answer (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/><b>A) Available values -</b><br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/>4)questionId<br/>5)answeringUser<br/>6)isMarkedAnswer<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseAnswer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_answer_with_http_info(question_id, answer, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.add_answer_with_http_info(question_id, answer, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def add_answer_with_http_info(self, question_id, answer, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Answer the specified question
        Allows the user to answer the question
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_answer_with_http_info(question_id, answer, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param str answer: answer (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/><b>A) Available values -</b><br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/>4)questionId<br/>5)answeringUser<br/>6)isMarkedAnswer<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseAnswer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['question_id', 'answer', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_answer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'question_id' is set
        if ('question_id' not in params) or (params['question_id'] is None):
            raise ValueError("Missing the required parameter `question_id` when calling `add_answer`")
        # verify the required parameter 'answer' is set
        if ('answer' not in params) or (params['answer'] is None):
            raise ValueError("Missing the required parameter `answer` when calling `add_answer`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `add_answer`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `add_answer`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `add_answer`")


        collection_formats = {}

        resource_path = '/questions/{questionId}/answers'.replace('{format}', 'json')
        path_params = {}
        if 'question_id' in params:
            path_params['questionId'] = params['question_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'answer' in params:
            form_params.append(('answer', params['answer']))
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseAnswer',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def add_question(self, category_id, question_title, question_description, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Share question without attachment
        Allows the user to share question without attachment. Returns the question object
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_question(category_id, question_title, question_description, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str question_title: Question Title (required)
        :param str question_description: Describe question (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :return: VerveResponseQuestion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_question_with_http_info(category_id, question_title, question_description, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.add_question_with_http_info(category_id, question_title, question_description, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def add_question_with_http_info(self, category_id, question_title, question_description, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Share question without attachment
        Allows the user to share question without attachment. Returns the question object
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_question_with_http_info(category_id, question_title, question_description, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str question_title: Question Title (required)
        :param str question_description: Describe question (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :return: VerveResponseQuestion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id', 'question_title', 'question_description', 'logged_in_user_id', 'access_token', 'client_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_question" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `add_question`")
        # verify the required parameter 'question_title' is set
        if ('question_title' not in params) or (params['question_title'] is None):
            raise ValueError("Missing the required parameter `question_title` when calling `add_question`")
        # verify the required parameter 'question_description' is set
        if ('question_description' not in params) or (params['question_description'] is None):
            raise ValueError("Missing the required parameter `question_description` when calling `add_question`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `add_question`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `add_question`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `add_question`")


        collection_formats = {}

        resource_path = '/questions'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'category_id' in params:
            form_params.append(('categoryId', params['category_id']))
        if 'question_title' in params:
            form_params.append(('questionTitle', params['question_title']))
        if 'question_description' in params:
            form_params.append(('questionDescription', params['question_description']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseQuestion',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def add_question_0(self, body, body2, body3, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Share question with attachment
        Allows the user to share question with attachment. Returns the question object
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_question_0(body, body2, body3, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int body: categoryId (required)
        :param str body2: questionTitle (required)
        :param str body3: questionDescription (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param list[Attachment] body4:
        :return: VerveResponseQuestion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_question_0_with_http_info(body, body2, body3, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.add_question_0_with_http_info(body, body2, body3, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def add_question_0_with_http_info(self, body, body2, body3, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Share question with attachment
        Allows the user to share question with attachment. Returns the question object
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_question_0_with_http_info(body, body2, body3, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int body: categoryId (required)
        :param str body2: questionTitle (required)
        :param str body3: questionDescription (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param list[Attachment] body4:
        :return: VerveResponseQuestion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'body2', 'body3', 'logged_in_user_id', 'access_token', 'client_token', 'body4']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_question_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_question_0`")
        # verify the required parameter 'body2' is set
        if ('body2' not in params) or (params['body2'] is None):
            raise ValueError("Missing the required parameter `body2` when calling `add_question_0`")
        # verify the required parameter 'body3' is set
        if ('body3' not in params) or (params['body3'] is None):
            raise ValueError("Missing the required parameter `body3` when calling `add_question_0`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `add_question_0`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `add_question_0`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `add_question_0`")


        collection_formats = {}

        resource_path = '/questions/attachment'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body4' in params:
            body_params = params['body4']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseQuestion',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_question_category(self, name, description, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Create question category
        Creates a question category. Returns the created question category
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_question_category(name, description, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Name (required)
        :param str description: description (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int organization_id: OrganizationId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2)categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseQuestionCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_question_category_with_http_info(name, description, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.create_question_category_with_http_info(name, description, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def create_question_category_with_http_info(self, name, description, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Create question category
        Creates a question category. Returns the created question category
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_question_category_with_http_info(name, description, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Name (required)
        :param str description: description (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int organization_id: OrganizationId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2)categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseQuestionCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'description', 'logged_in_user_id', 'access_token', 'client_token', 'organization_id', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_question_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_question_category`")
        # verify the required parameter 'description' is set
        if ('description' not in params) or (params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `create_question_category`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `create_question_category`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `create_question_category`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `create_question_category`")


        collection_formats = {}

        resource_path = '/questions/categories'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'organization_id' in params:
            form_params.append(('OrganizationId', params['organization_id']))
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseQuestionCategory',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_answer(self, answer_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Delete answer
        Allows the user to delete an answer. Returns the deleted answer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_answer(answer_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int answer_id: answerId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/><b>A) Available values -</b><br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/>4)questionId<br/>5)answeringUser<br/>6)isMarkedAnswer<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseAnswer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_answer_with_http_info(answer_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.delete_answer_with_http_info(answer_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def delete_answer_with_http_info(self, answer_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Delete answer
        Allows the user to delete an answer. Returns the deleted answer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_answer_with_http_info(answer_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int answer_id: answerId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/><b>A) Available values -</b><br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/>4)questionId<br/>5)answeringUser<br/>6)isMarkedAnswer<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseAnswer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['answer_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_answer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'answer_id' is set
        if ('answer_id' not in params) or (params['answer_id'] is None):
            raise ValueError("Missing the required parameter `answer_id` when calling `delete_answer`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `delete_answer`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `delete_answer`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `delete_answer`")


        collection_formats = {}

        resource_path = '/questions/answers/{answerId}'.replace('{format}', 'json')
        path_params = {}
        if 'answer_id' in params:
            path_params['answerId'] = params['answer_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseAnswer',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_question(self, question_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Delete question
        Allows the user to delete a question. Returns the deleted answer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_question(question_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_question_with_http_info(question_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.delete_question_with_http_info(question_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def delete_question_with_http_info(self, question_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Delete question
        Allows the user to delete a question. Returns the deleted answer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_question_with_http_info(question_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['question_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_question" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'question_id' is set
        if ('question_id' not in params) or (params['question_id'] is None):
            raise ValueError("Missing the required parameter `question_id` when calling `delete_question`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `delete_question`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `delete_question`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `delete_question`")


        collection_formats = {}

        resource_path = '/questions/{questionId}'.replace('{format}', 'json')
        path_params = {}
        if 'question_id' in params:
            path_params['questionId'] = params['question_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseQuestion',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_question_category(self, category_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Delete question category
        Allows the user to delete the question category. Returns the deleted question category
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_question_category(category_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2)categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseQuestionCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_question_category_with_http_info(category_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.delete_question_category_with_http_info(category_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def delete_question_category_with_http_info(self, category_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Delete question category
        Allows the user to delete the question category. Returns the deleted question category
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_question_category_with_http_info(category_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2)categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseQuestionCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_question_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `delete_question_category`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `delete_question_category`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `delete_question_category`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `delete_question_category`")


        collection_formats = {}

        resource_path = '/questions/categories/{categoryId}'.replace('{format}', 'json')
        path_params = {}
        if 'category_id' in params:
            path_params['categoryId'] = params['category_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseQuestionCategory',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def dislike_answer(self, question_id, answer_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Dislike answer
        Allows the user to dislike the answer.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.dislike_answer(question_id, answer_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param int answer_id: answerId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/><b>A) Available values -</b><br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/>4)questionId<br/>5)answeringUser<br/>6)isMarkedAnswer<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseAnswer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.dislike_answer_with_http_info(question_id, answer_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.dislike_answer_with_http_info(question_id, answer_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def dislike_answer_with_http_info(self, question_id, answer_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Dislike answer
        Allows the user to dislike the answer.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.dislike_answer_with_http_info(question_id, answer_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param int answer_id: answerId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/><b>A) Available values -</b><br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/>4)questionId<br/>5)answeringUser<br/>6)isMarkedAnswer<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseAnswer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['question_id', 'answer_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dislike_answer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'question_id' is set
        if ('question_id' not in params) or (params['question_id'] is None):
            raise ValueError("Missing the required parameter `question_id` when calling `dislike_answer`")
        # verify the required parameter 'answer_id' is set
        if ('answer_id' not in params) or (params['answer_id'] is None):
            raise ValueError("Missing the required parameter `answer_id` when calling `dislike_answer`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `dislike_answer`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `dislike_answer`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `dislike_answer`")


        collection_formats = {}

        resource_path = '/questions/{questionId}/answers/{answerId}/dislike'.replace('{format}', 'json')
        path_params = {}
        if 'question_id' in params:
            path_params['questionId'] = params['question_id']
        if 'answer_id' in params:
            path_params['answerId'] = params['answer_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseAnswer',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_answers(self, question_id, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of answers by questionId
        Returns the list of answers by questionId
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_answers(question_id, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/><b>A) Available values -</b><br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/>4)questionId<br/>5)answeringUser<br/>6)isMarkedAnswer<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseAnswerList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_answers_with_http_info(question_id, start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_answers_with_http_info(question_id, start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_answers_with_http_info(self, question_id, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of answers by questionId
        Returns the list of answers by questionId
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_answers_with_http_info(question_id, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/><b>A) Available values -</b><br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/>4)questionId<br/>5)answeringUser<br/>6)isMarkedAnswer<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseAnswerList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['question_id', 'start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_answers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'question_id' is set
        if ('question_id' not in params) or (params['question_id'] is None):
            raise ValueError("Missing the required parameter `question_id` when calling `get_answers`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_answers`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_answers`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_answers`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_answers`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_answers`")


        collection_formats = {}

        resource_path = '/questions/{questionId}/answers'.replace('{format}', 'json')
        path_params = {}
        if 'question_id' in params:
            path_params['questionId'] = params['question_id']

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseAnswerList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_friends_questions(self, question_status, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of questions shared by friends
        Returns the list of questions shared by friends
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_friends_questions(question_status, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str question_status: Question status <br/> 1) ALL <br/> 2)  UNREPLIED <br/> 3)  REPLIED <br/> 4)  CLOSED (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int category_id: categoryId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_friends_questions_with_http_info(question_status, start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_friends_questions_with_http_info(question_status, start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_friends_questions_with_http_info(self, question_status, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of questions shared by friends
        Returns the list of questions shared by friends
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_friends_questions_with_http_info(question_status, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str question_status: Question status <br/> 1) ALL <br/> 2)  UNREPLIED <br/> 3)  REPLIED <br/> 4)  CLOSED (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int category_id: categoryId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['question_status', 'start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'category_id', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_friends_questions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'question_status' is set
        if ('question_status' not in params) or (params['question_status'] is None):
            raise ValueError("Missing the required parameter `question_status` when calling `get_friends_questions`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_friends_questions`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_friends_questions`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_friends_questions`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_friends_questions`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_friends_questions`")


        collection_formats = {}

        resource_path = '/questions/friends'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'question_status' in params:
            query_params['questionStatus'] = params['question_status']
        if 'category_id' in params:
            query_params['categoryId'] = params['category_id']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseQuestionList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_question(self, question_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get question by id
        Returns the question by id
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_question(question_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_question_with_http_info(question_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_question_with_http_info(question_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_question_with_http_info(self, question_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get question by id
        Returns the question by id
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_question_with_http_info(question_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['question_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_question" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'question_id' is set
        if ('question_id' not in params) or (params['question_id'] is None):
            raise ValueError("Missing the required parameter `question_id` when calling `get_question`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_question`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_question`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_question`")


        collection_formats = {}

        resource_path = '/questions/{questionId}'.replace('{format}', 'json')
        path_params = {}
        if 'question_id' in params:
            path_params['questionId'] = params['question_id']

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseQuestion',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_question_categories(self, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get the list of question categories
        Returns the list of question categories
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_question_categories(start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2)categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseQuestionCategoryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_question_categories_with_http_info(start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_question_categories_with_http_info(start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_question_categories_with_http_info(self, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get the list of question categories
        Returns the list of question categories
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_question_categories_with_http_info(start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2)categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseQuestionCategoryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_question_categories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_question_categories`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_question_categories`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_question_categories`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_question_categories`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_question_categories`")


        collection_formats = {}

        resource_path = '/questions/categories'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseQuestionCategoryList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_questions_for_user(self, question_status, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of all questions visible to the user
        Returns the list of all questions visible to the user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_questions_for_user(question_status, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str question_status: Question status <br/> 1) ALL <br/> 2)  UNREPLIED <br/> 3)  REPLIED <br/> 4)  CLOSED (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int category_id: categoryId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_questions_for_user_with_http_info(question_status, start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_questions_for_user_with_http_info(question_status, start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_questions_for_user_with_http_info(self, question_status, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of all questions visible to the user
        Returns the list of all questions visible to the user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_questions_for_user_with_http_info(question_status, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str question_status: Question status <br/> 1) ALL <br/> 2)  UNREPLIED <br/> 3)  REPLIED <br/> 4)  CLOSED (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int category_id: categoryId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['question_status', 'start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'category_id', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_questions_for_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'question_status' is set
        if ('question_status' not in params) or (params['question_status'] is None):
            raise ValueError("Missing the required parameter `question_status` when calling `get_questions_for_user`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_questions_for_user`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_questions_for_user`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_questions_for_user`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_questions_for_user`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_questions_for_user`")


        collection_formats = {}

        resource_path = '/questions'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'question_status' in params:
            query_params['questionStatus'] = params['question_status']
        if 'category_id' in params:
            query_params['categoryId'] = params['category_id']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseQuestionList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_recommend_question(self, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of recommended questions
        Returns the list of recommended questions
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_recommend_question(start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_recommend_question_with_http_info(start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_recommend_question_with_http_info(start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_recommend_question_with_http_info(self, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of recommended questions
        Returns the list of recommended questions
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_recommend_question_with_http_info(start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recommend_question" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_recommend_question`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_recommend_question`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_recommend_question`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_recommend_question`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_recommend_question`")


        collection_formats = {}

        resource_path = '/questions/recommend'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseQuestionList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_recommended_questions_from_db(self, user_id, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of recommended questions from DB
        Returns the list of recommended questions from DB
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_recommended_questions_from_db(user_id, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_recommended_questions_from_db_with_http_info(user_id, start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_recommended_questions_from_db_with_http_info(user_id, start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_recommended_questions_from_db_with_http_info(self, user_id, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of recommended questions from DB
        Returns the list of recommended questions from DB
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_recommended_questions_from_db_with_http_info(user_id, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recommended_questions_from_db" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_recommended_questions_from_db`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_recommended_questions_from_db`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_recommended_questions_from_db`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_recommended_questions_from_db`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_recommended_questions_from_db`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_recommended_questions_from_db`")


        collection_formats = {}

        resource_path = '/questions/{userId}/recommendedQuestions'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseQuestionList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_recommended_users_from_db(self, question_id, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of recommended Users from DB
        Returns the list of recommended users from DB
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_recommended_users_from_db(question_id, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)userId<br/>2)firstName<br/>3)lastName<br/>4)profileImage<br/><b>A) Available values-</b><br/>1)userId<br/>2)firstName<br/>3)lastName<br/>4)emailId<br/>5)profileImage<br/>6)birthDate<br/>7)currentUserFollowing<br/>8)currentUserFriend<br/>9)equityScore
        :return: VerveResponseUserList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_recommended_users_from_db_with_http_info(question_id, start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_recommended_users_from_db_with_http_info(question_id, start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_recommended_users_from_db_with_http_info(self, question_id, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of recommended Users from DB
        Returns the list of recommended users from DB
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_recommended_users_from_db_with_http_info(question_id, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)userId<br/>2)firstName<br/>3)lastName<br/>4)profileImage<br/><b>A) Available values-</b><br/>1)userId<br/>2)firstName<br/>3)lastName<br/>4)emailId<br/>5)profileImage<br/>6)birthDate<br/>7)currentUserFollowing<br/>8)currentUserFriend<br/>9)equityScore
        :return: VerveResponseUserList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['question_id', 'start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recommended_users_from_db" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'question_id' is set
        if ('question_id' not in params) or (params['question_id'] is None):
            raise ValueError("Missing the required parameter `question_id` when calling `get_recommended_users_from_db`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_recommended_users_from_db`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_recommended_users_from_db`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_recommended_users_from_db`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_recommended_users_from_db`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_recommended_users_from_db`")


        collection_formats = {}

        resource_path = '/questions/{questionId}/recommendedUsers'.replace('{format}', 'json')
        path_params = {}
        if 'question_id' in params:
            path_params['questionId'] = params['question_id']

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseUserList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_user_questions(self, user_id, question_status, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of questions shared by user
        Returns the list of questions shared by specific user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_questions(user_id, question_status, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId (required)
        :param str question_status: Question status <br/> 1) ALL <br/> 2)  UNREPLIED <br/> 3)  REPLIED <br/> 4)  CLOSED (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int category_id: categoryId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_questions_with_http_info(user_id, question_status, start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_user_questions_with_http_info(user_id, question_status, start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_user_questions_with_http_info(self, user_id, question_status, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of questions shared by user
        Returns the list of questions shared by specific user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_questions_with_http_info(user_id, question_status, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId (required)
        :param str question_status: Question status <br/> 1) ALL <br/> 2)  UNREPLIED <br/> 3)  REPLIED <br/> 4)  CLOSED (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int category_id: categoryId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'question_status', 'start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'category_id', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_questions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_user_questions`")
        # verify the required parameter 'question_status' is set
        if ('question_status' not in params) or (params['question_status'] is None):
            raise ValueError("Missing the required parameter `question_status` when calling `get_user_questions`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_user_questions`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_user_questions`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_user_questions`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_user_questions`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_user_questions`")


        collection_formats = {}

        resource_path = '/questions/{userId}/shared'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'question_status' in params:
            query_params['questionStatus'] = params['question_status']
        if 'category_id' in params:
            query_params['categoryId'] = params['category_id']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseQuestionList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_user_subscribed_question_categories(self, user_id, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of question categories subscribed by the user
        Returns the list of question categories subscribed by the user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_subscribed_question_categories(user_id, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2)categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseQuestionCategoryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_subscribed_question_categories_with_http_info(user_id, start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_user_subscribed_question_categories_with_http_info(user_id, start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_user_subscribed_question_categories_with_http_info(self, user_id, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of question categories subscribed by the user
        Returns the list of question categories subscribed by the user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_subscribed_question_categories_with_http_info(user_id, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2)categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseQuestionCategoryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_subscribed_question_categories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_user_subscribed_question_categories`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_user_subscribed_question_categories`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_user_subscribed_question_categories`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_user_subscribed_question_categories`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_user_subscribed_question_categories`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_user_subscribed_question_categories`")


        collection_formats = {}

        resource_path = '/questions/categories/{userId}/subscribe'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseQuestionCategoryList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_user_subscribed_questions(self, user_id, question_status, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of questions subscribed by user
        Returns the list of questions subscribed by specific user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_subscribed_questions(user_id, question_status, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId (required)
        :param str question_status: Question status <br/> 1) ALL <br/> 2)  UNREPLIED <br/> 3)  REPLIED <br/> 4)  CLOSED (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int category_id: categoryId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_subscribed_questions_with_http_info(user_id, question_status, start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_user_subscribed_questions_with_http_info(user_id, question_status, start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_user_subscribed_questions_with_http_info(self, user_id, question_status, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of questions subscribed by user
        Returns the list of questions subscribed by specific user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_subscribed_questions_with_http_info(user_id, question_status, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId (required)
        :param str question_status: Question status <br/> 1) ALL <br/> 2)  UNREPLIED <br/> 3)  REPLIED <br/> 4)  CLOSED (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int category_id: categoryId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'question_status', 'start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'category_id', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_subscribed_questions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_user_subscribed_questions`")
        # verify the required parameter 'question_status' is set
        if ('question_status' not in params) or (params['question_status'] is None):
            raise ValueError("Missing the required parameter `question_status` when calling `get_user_subscribed_questions`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_user_subscribed_questions`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_user_subscribed_questions`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_user_subscribed_questions`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_user_subscribed_questions`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_user_subscribed_questions`")


        collection_formats = {}

        resource_path = '/questions/{userId}/subscribe'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'question_status' in params:
            query_params['questionStatus'] = params['question_status']
        if 'category_id' in params:
            query_params['categoryId'] = params['category_id']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseQuestionList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def like_answer(self, question_id, answer_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Like answer
        Allows the user to like the answer.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.like_answer(question_id, answer_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param int answer_id: answerId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/><b>A) Available values -</b><br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/>4)questionId<br/>5)answeringUser<br/>6)isMarkedAnswer<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseAnswer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.like_answer_with_http_info(question_id, answer_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.like_answer_with_http_info(question_id, answer_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def like_answer_with_http_info(self, question_id, answer_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Like answer
        Allows the user to like the answer.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.like_answer_with_http_info(question_id, answer_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param int answer_id: answerId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/><b>A) Available values -</b><br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/>4)questionId<br/>5)answeringUser<br/>6)isMarkedAnswer<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseAnswer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['question_id', 'answer_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method like_answer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'question_id' is set
        if ('question_id' not in params) or (params['question_id'] is None):
            raise ValueError("Missing the required parameter `question_id` when calling `like_answer`")
        # verify the required parameter 'answer_id' is set
        if ('answer_id' not in params) or (params['answer_id'] is None):
            raise ValueError("Missing the required parameter `answer_id` when calling `like_answer`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `like_answer`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `like_answer`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `like_answer`")


        collection_formats = {}

        resource_path = '/questions/{questionId}/answers/{answerId}/like'.replace('{format}', 'json')
        path_params = {}
        if 'question_id' in params:
            path_params['questionId'] = params['question_id']
        if 'answer_id' in params:
            path_params['answerId'] = params['answer_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseAnswer',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def mark_as_an_answer(self, question_id, answer_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Mark answer as a answer
        Marks the answer as accepted. This means the user is satisfied with the answer & then the question will go into closed state
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.mark_as_an_answer(question_id, answer_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param int answer_id: answerId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/><b>A) Available values -</b><br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/>4)questionId<br/>5)answeringUser<br/>6)isMarkedAnswer<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseAnswer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.mark_as_an_answer_with_http_info(question_id, answer_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.mark_as_an_answer_with_http_info(question_id, answer_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def mark_as_an_answer_with_http_info(self, question_id, answer_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Mark answer as a answer
        Marks the answer as accepted. This means the user is satisfied with the answer & then the question will go into closed state
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.mark_as_an_answer_with_http_info(question_id, answer_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param int answer_id: answerId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/><b>A) Available values -</b><br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/>4)questionId<br/>5)answeringUser<br/>6)isMarkedAnswer<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseAnswer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['question_id', 'answer_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_as_an_answer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'question_id' is set
        if ('question_id' not in params) or (params['question_id'] is None):
            raise ValueError("Missing the required parameter `question_id` when calling `mark_as_an_answer`")
        # verify the required parameter 'answer_id' is set
        if ('answer_id' not in params) or (params['answer_id'] is None):
            raise ValueError("Missing the required parameter `answer_id` when calling `mark_as_an_answer`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `mark_as_an_answer`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `mark_as_an_answer`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `mark_as_an_answer`")


        collection_formats = {}

        resource_path = '/questions/{questionId}/answers/{answerId}/mark'.replace('{format}', 'json')
        path_params = {}
        if 'question_id' in params:
            path_params['questionId'] = params['question_id']
        if 'answer_id' in params:
            path_params['answerId'] = params['answer_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseAnswer',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def search_questions(self, search_text, question_status, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of matching questions
        Returns the list of matching questions
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_questions(search_text, question_status, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search_text: Search Text, keywords to search (required)
        :param str question_status: Question status <br/> 1) ALL <br/> 2)  UNREPLIED <br/> 3)  REPLIED <br/> 4)  CLOSED (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_questions_with_http_info(search_text, question_status, start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.search_questions_with_http_info(search_text, question_status, start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def search_questions_with_http_info(self, search_text, question_status, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of matching questions
        Returns the list of matching questions
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_questions_with_http_info(search_text, question_status, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search_text: Search Text, keywords to search (required)
        :param str question_status: Question status <br/> 1) ALL <br/> 2)  UNREPLIED <br/> 3)  REPLIED <br/> 4)  CLOSED (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_text', 'question_status', 'start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_questions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_text' is set
        if ('search_text' not in params) or (params['search_text'] is None):
            raise ValueError("Missing the required parameter `search_text` when calling `search_questions`")
        # verify the required parameter 'question_status' is set
        if ('question_status' not in params) or (params['question_status'] is None):
            raise ValueError("Missing the required parameter `question_status` when calling `search_questions`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `search_questions`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `search_questions`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `search_questions`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `search_questions`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `search_questions`")


        collection_formats = {}

        resource_path = '/questions/search'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'search_text' in params:
            query_params['searchText'] = params['search_text']
        if 'question_status' in params:
            query_params['questionStatus'] = params['question_status']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseQuestionList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def subscribe_question(self, question_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Subscribe question
        Allows the user to subscribe a question
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.subscribe_question(question_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.subscribe_question_with_http_info(question_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.subscribe_question_with_http_info(question_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def subscribe_question_with_http_info(self, question_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Subscribe question
        Allows the user to subscribe a question
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.subscribe_question_with_http_info(question_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['question_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscribe_question" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'question_id' is set
        if ('question_id' not in params) or (params['question_id'] is None):
            raise ValueError("Missing the required parameter `question_id` when calling `subscribe_question`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `subscribe_question`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `subscribe_question`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `subscribe_question`")


        collection_formats = {}

        resource_path = '/questions/{questionId}/subscribe'.replace('{format}', 'json')
        path_params = {}
        if 'question_id' in params:
            path_params['questionId'] = params['question_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseQuestion',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def subscribe_question_category(self, category_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Subscribe question category
        Returns the subscribed question category
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.subscribe_question_category(category_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2)categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseQuestionCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.subscribe_question_category_with_http_info(category_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.subscribe_question_category_with_http_info(category_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def subscribe_question_category_with_http_info(self, category_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Subscribe question category
        Returns the subscribed question category
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.subscribe_question_category_with_http_info(category_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2)categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseQuestionCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscribe_question_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `subscribe_question_category`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `subscribe_question_category`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `subscribe_question_category`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `subscribe_question_category`")


        collection_formats = {}

        resource_path = '/questions/categories/{categoryId}/subscribe'.replace('{format}', 'json')
        path_params = {}
        if 'category_id' in params:
            path_params['categoryId'] = params['category_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/x-www-form-urlencoded'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseQuestionCategory',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def unmark_as_an_answer(self, question_id, answer_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Unmark answer as a answer
        Unmarks the answer. This will remove the marked answer.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unmark_as_an_answer(question_id, answer_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param int answer_id: answerId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/><b>A) Available values -</b><br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/>4)questionId<br/>5)answeringUser<br/>6)isMarkedAnswer<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseAnswer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.unmark_as_an_answer_with_http_info(question_id, answer_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.unmark_as_an_answer_with_http_info(question_id, answer_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def unmark_as_an_answer_with_http_info(self, question_id, answer_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Unmark answer as a answer
        Unmarks the answer. This will remove the marked answer.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unmark_as_an_answer_with_http_info(question_id, answer_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param int answer_id: answerId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/><b>A) Available values -</b><br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/>4)questionId<br/>5)answeringUser<br/>6)isMarkedAnswer<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseAnswer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['question_id', 'answer_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unmark_as_an_answer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'question_id' is set
        if ('question_id' not in params) or (params['question_id'] is None):
            raise ValueError("Missing the required parameter `question_id` when calling `unmark_as_an_answer`")
        # verify the required parameter 'answer_id' is set
        if ('answer_id' not in params) or (params['answer_id'] is None):
            raise ValueError("Missing the required parameter `answer_id` when calling `unmark_as_an_answer`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `unmark_as_an_answer`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `unmark_as_an_answer`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `unmark_as_an_answer`")


        collection_formats = {}

        resource_path = '/questions/{questionId}/answers/{answerId}/unmark'.replace('{format}', 'json')
        path_params = {}
        if 'question_id' in params:
            path_params['questionId'] = params['question_id']
        if 'answer_id' in params:
            path_params['answerId'] = params['answer_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseAnswer',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def unsubscribe_question(self, question_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Unsubscribe question
        Allows the user to unsubscribe a question
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unsubscribe_question(question_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.unsubscribe_question_with_http_info(question_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.unsubscribe_question_with_http_info(question_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def unsubscribe_question_with_http_info(self, question_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Unsubscribe question
        Allows the user to unsubscribe a question
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unsubscribe_question_with_http_info(question_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['question_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unsubscribe_question" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'question_id' is set
        if ('question_id' not in params) or (params['question_id'] is None):
            raise ValueError("Missing the required parameter `question_id` when calling `unsubscribe_question`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `unsubscribe_question`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `unsubscribe_question`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `unsubscribe_question`")


        collection_formats = {}

        resource_path = '/questions/{questionId}/unsubscribe'.replace('{format}', 'json')
        path_params = {}
        if 'question_id' in params:
            path_params['questionId'] = params['question_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseQuestion',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def unsubscribe_question_category(self, category_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Unsubscribe question category
        Returns the unsubscribed question category
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unsubscribe_question_category(category_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2)categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseQuestionCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.unsubscribe_question_category_with_http_info(category_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.unsubscribe_question_category_with_http_info(category_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def unsubscribe_question_category_with_http_info(self, category_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Unsubscribe question category
        Returns the unsubscribed question category
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unsubscribe_question_category_with_http_info(category_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2)categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseQuestionCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unsubscribe_question_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `unsubscribe_question_category`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `unsubscribe_question_category`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `unsubscribe_question_category`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `unsubscribe_question_category`")


        collection_formats = {}

        resource_path = '/questions/categories/{categoryId}/unsubscribe'.replace('{format}', 'json')
        path_params = {}
        if 'category_id' in params:
            path_params['categoryId'] = params['category_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseQuestionCategory',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_answer(self, answer_id, answer, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Update answer
        Allows the user to update an answer. Returns the updated answer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_answer(answer_id, answer, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int answer_id: answerId (required)
        :param str answer: answer (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/><b>A) Available values -</b><br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/>4)questionId<br/>5)answeringUser<br/>6)isMarkedAnswer<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseAnswer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_answer_with_http_info(answer_id, answer, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.update_answer_with_http_info(answer_id, answer, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def update_answer_with_http_info(self, answer_id, answer, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Update answer
        Allows the user to update an answer. Returns the updated answer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_answer_with_http_info(answer_id, answer, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int answer_id: answerId (required)
        :param str answer: answer (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/><b>A) Available values -</b><br/>1)answerId<br/>2)answerDescription<br/>3)createdDate<br/>4)questionId<br/>5)answeringUser<br/>6)isMarkedAnswer<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseAnswer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['answer_id', 'answer', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_answer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'answer_id' is set
        if ('answer_id' not in params) or (params['answer_id'] is None):
            raise ValueError("Missing the required parameter `answer_id` when calling `update_answer`")
        # verify the required parameter 'answer' is set
        if ('answer' not in params) or (params['answer'] is None):
            raise ValueError("Missing the required parameter `answer` when calling `update_answer`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `update_answer`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `update_answer`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `update_answer`")


        collection_formats = {}

        resource_path = '/questions/answers/{answerId}'.replace('{format}', 'json')
        path_params = {}
        if 'answer_id' in params:
            path_params['answerId'] = params['answer_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'answer' in params:
            form_params.append(('answer', params['answer']))
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseAnswer',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_question(self, question_id, question_title, question_description, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Update question
        Allows the user to update question. Returns the updated question
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_question(question_id, question_title, question_description, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param str question_title: Question Title (required)
        :param str question_description: Describe Question (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_question_with_http_info(question_id, question_title, question_description, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.update_question_with_http_info(question_id, question_title, question_description, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def update_question_with_http_info(self, question_id, question_title, question_description, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Update question
        Allows the user to update question. Returns the updated question
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_question_with_http_info(question_id, question_title, question_description, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int question_id: questionId (required)
        :param str question_title: Question Title (required)
        :param str question_description: Describe Question (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)createdDate<br/><b>A) Available values-</b><br/>1)questionId<br/>2)questionTitle<br/>3)questionDescription<br/>4)issuer<br/>5)noOfAnswers<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseQuestion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['question_id', 'question_title', 'question_description', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_question" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'question_id' is set
        if ('question_id' not in params) or (params['question_id'] is None):
            raise ValueError("Missing the required parameter `question_id` when calling `update_question`")
        # verify the required parameter 'question_title' is set
        if ('question_title' not in params) or (params['question_title'] is None):
            raise ValueError("Missing the required parameter `question_title` when calling `update_question`")
        # verify the required parameter 'question_description' is set
        if ('question_description' not in params) or (params['question_description'] is None):
            raise ValueError("Missing the required parameter `question_description` when calling `update_question`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `update_question`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `update_question`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `update_question`")


        collection_formats = {}

        resource_path = '/questions/{questionId}'.replace('{format}', 'json')
        path_params = {}
        if 'question_id' in params:
            path_params['questionId'] = params['question_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'question_title' in params:
            form_params.append(('questionTitle', params['question_title']))
        if 'question_description' in params:
            form_params.append(('questionDescription', params['question_description']))
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseQuestion',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_question_category(self, category_id, category_name, category_description, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Update question category
        Allows the user to update the question category. Returns the updated question category
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_question_category(category_id, category_name, category_description, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str category_name: Category Name (required)
        :param str category_description: Describe category (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2)categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseQuestionCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_question_category_with_http_info(category_id, category_name, category_description, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.update_question_category_with_http_info(category_id, category_name, category_description, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def update_question_category_with_http_info(self, category_id, category_name, category_description, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Update question category
        Allows the user to update the question category. Returns the updated question category
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_question_category_with_http_info(category_id, category_name, category_description, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str category_name: Category Name (required)
        :param str category_description: Describe category (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2)categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseQuestionCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id', 'category_name', 'category_description', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_question_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `update_question_category`")
        # verify the required parameter 'category_name' is set
        if ('category_name' not in params) or (params['category_name'] is None):
            raise ValueError("Missing the required parameter `category_name` when calling `update_question_category`")
        # verify the required parameter 'category_description' is set
        if ('category_description' not in params) or (params['category_description'] is None):
            raise ValueError("Missing the required parameter `category_description` when calling `update_question_category`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `update_question_category`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `update_question_category`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `update_question_category`")


        collection_formats = {}

        resource_path = '/questions/categories/{categoryId}'.replace('{format}', 'json')
        path_params = {}
        if 'category_id' in params:
            path_params['categoryId'] = params['category_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'category_name' in params:
            form_params.append(('categoryName', params['category_name']))
        if 'category_description' in params:
            form_params.append(('categoryDescription', params['category_description']))
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseQuestionCategory',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
