# coding: utf-8

"""
    iEngage 2.0 API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CollaborationApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_comment_blog(self, blog_id, requester_id, client_token, **kwargs):
        """
        Comment on posted blog
        This service allows a user to comment on a blog. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model & Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. blogId (Path Parameter)     2. commentText

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_comment_blog(blog_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int blog_id: blogId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param Comment body: 
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseComment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_comment_blog_with_http_info(blog_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.add_comment_blog_with_http_info(blog_id, requester_id, client_token, **kwargs)
            return data

    def add_comment_blog_with_http_info(self, blog_id, requester_id, client_token, **kwargs):
        """
        Comment on posted blog
        This service allows a user to comment on a blog. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model & Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. blogId (Path Parameter)     2. commentText

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_comment_blog_with_http_info(blog_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int blog_id: blogId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param Comment body: 
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseComment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['blog_id', 'requester_id', 'client_token', 'body', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_comment_blog" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'blog_id' is set
        if ('blog_id' not in params) or (params['blog_id'] is None):
            raise ValueError("Missing the required parameter `blog_id` when calling `add_comment_blog`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `add_comment_blog`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `add_comment_blog`")

        resource_path = '/collaborations/blogs/{blogId}/comments'.replace('{format}', 'json')
        path_params = {}
        if 'blog_id' in params:
            path_params['blogId'] = params['blog_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseComment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def add_comment_discussion(self, discussion_id, requester_id, client_token, **kwargs):
        """
        Comment on discussion
        This service allows a user to comment on a discussion. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model & Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. discussionId (Path Parameter)     2. commentText

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_comment_discussion(discussion_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int discussion_id: discussionId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param Comment body: 
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseComment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_comment_discussion_with_http_info(discussion_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.add_comment_discussion_with_http_info(discussion_id, requester_id, client_token, **kwargs)
            return data

    def add_comment_discussion_with_http_info(self, discussion_id, requester_id, client_token, **kwargs):
        """
        Comment on discussion
        This service allows a user to comment on a discussion. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model & Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. discussionId (Path Parameter)     2. commentText

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_comment_discussion_with_http_info(discussion_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int discussion_id: discussionId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param Comment body: 
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseComment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['discussion_id', 'requester_id', 'client_token', 'body', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_comment_discussion" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'discussion_id' is set
        if ('discussion_id' not in params) or (params['discussion_id'] is None):
            raise ValueError("Missing the required parameter `discussion_id` when calling `add_comment_discussion`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `add_comment_discussion`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `add_comment_discussion`")

        resource_path = '/collaborations/discussions/{discussionId}/comments'.replace('{format}', 'json')
        path_params = {}
        if 'discussion_id' in params:
            path_params['discussionId'] = params['discussion_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseComment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_blog(self, blog_id, requester_id, client_token, **kwargs):
        """
        Delete blog
        Allows the user to delete blog. Returns the deleted blog

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_blog(blog_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int blog_id: blog Id (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseBlog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_blog_with_http_info(blog_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.delete_blog_with_http_info(blog_id, requester_id, client_token, **kwargs)
            return data

    def delete_blog_with_http_info(self, blog_id, requester_id, client_token, **kwargs):
        """
        Delete blog
        Allows the user to delete blog. Returns the deleted blog

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_blog_with_http_info(blog_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int blog_id: blog Id (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseBlog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['blog_id', 'requester_id', 'client_token', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_blog" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'blog_id' is set
        if ('blog_id' not in params) or (params['blog_id'] is None):
            raise ValueError("Missing the required parameter `blog_id` when calling `delete_blog`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `delete_blog`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `delete_blog`")

        resource_path = '/collaborations/blogs/{blogId}'.replace('{format}', 'json')
        path_params = {}
        if 'blog_id' in params:
            path_params['blogId'] = params['blog_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseBlog',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_blog_comment(self, comment_id, requester_id, client_token, **kwargs):
        """
        Delete blog comment
        Allows the user to delete blog comment.  Returns the deleted blog comment

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_blog_comment(comment_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int comment_id: comment Id (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseComment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_blog_comment_with_http_info(comment_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.delete_blog_comment_with_http_info(comment_id, requester_id, client_token, **kwargs)
            return data

    def delete_blog_comment_with_http_info(self, comment_id, requester_id, client_token, **kwargs):
        """
        Delete blog comment
        Allows the user to delete blog comment.  Returns the deleted blog comment

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_blog_comment_with_http_info(comment_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int comment_id: comment Id (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseComment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['comment_id', 'requester_id', 'client_token', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_blog_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params) or (params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `delete_blog_comment`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `delete_blog_comment`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `delete_blog_comment`")

        resource_path = '/collaborations/blogs/comments/{commentId}'.replace('{format}', 'json')
        path_params = {}
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseComment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_discussion(self, discussion_id, requester_id, client_token, **kwargs):
        """
        Delete discussion
        Allows the user to delete discussion. Returns the deleted discussion

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_discussion(discussion_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int discussion_id: discussion Id (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseDiscussion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_discussion_with_http_info(discussion_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.delete_discussion_with_http_info(discussion_id, requester_id, client_token, **kwargs)
            return data

    def delete_discussion_with_http_info(self, discussion_id, requester_id, client_token, **kwargs):
        """
        Delete discussion
        Allows the user to delete discussion. Returns the deleted discussion

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_discussion_with_http_info(discussion_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int discussion_id: discussion Id (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseDiscussion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['discussion_id', 'requester_id', 'client_token', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_discussion" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'discussion_id' is set
        if ('discussion_id' not in params) or (params['discussion_id'] is None):
            raise ValueError("Missing the required parameter `discussion_id` when calling `delete_discussion`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `delete_discussion`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `delete_discussion`")

        resource_path = '/collaborations/discussions/{discussionId}'.replace('{format}', 'json')
        path_params = {}
        if 'discussion_id' in params:
            path_params['discussionId'] = params['discussion_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseDiscussion',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_discussion_comment(self, comment_id, requester_id, client_token, **kwargs):
        """
        Delete discussion comment
        Allows the user to delete discussion comment. Returns the deleted discussion comment

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_discussion_comment(comment_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int comment_id: comment Id (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseComment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_discussion_comment_with_http_info(comment_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.delete_discussion_comment_with_http_info(comment_id, requester_id, client_token, **kwargs)
            return data

    def delete_discussion_comment_with_http_info(self, comment_id, requester_id, client_token, **kwargs):
        """
        Delete discussion comment
        Allows the user to delete discussion comment. Returns the deleted discussion comment

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_discussion_comment_with_http_info(comment_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int comment_id: comment Id (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseComment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['comment_id', 'requester_id', 'client_token', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_discussion_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params) or (params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `delete_discussion_comment`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `delete_discussion_comment`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `delete_discussion_comment`")

        resource_path = '/collaborations/discussions/comments/{commentId}'.replace('{format}', 'json')
        path_params = {}
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseComment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_blog_comments(self, blog_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of comments on blog
        Returns the list of comments on blog

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_blog_comments(blog_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int blog_id: blogId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseCommentList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_blog_comments_with_http_info(blog_id, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_blog_comments_with_http_info(blog_id, start, end, requester_id, client_token, **kwargs)
            return data

    def get_blog_comments_with_http_info(self, blog_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of comments on blog
        Returns the list of comments on blog

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_blog_comments_with_http_info(blog_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int blog_id: blogId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseCommentList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['blog_id', 'start', 'end', 'requester_id', 'client_token', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_blog_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'blog_id' is set
        if ('blog_id' not in params) or (params['blog_id'] is None):
            raise ValueError("Missing the required parameter `blog_id` when calling `get_blog_comments`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_blog_comments`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_blog_comments`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_blog_comments`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_blog_comments`")

        resource_path = '/collaborations/blogs/{blogId}/comments'.replace('{format}', 'json')
        path_params = {}
        if 'blog_id' in params:
            path_params['blogId'] = params['blog_id']

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseCommentList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_blogs(self, association, start, end, requester_id, client_token, **kwargs):
        """
        Get list of blogs
        Returns the list of blogs

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_blogs(association, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int association: association (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseBlogList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_blogs_with_http_info(association, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_blogs_with_http_info(association, start, end, requester_id, client_token, **kwargs)
            return data

    def get_blogs_with_http_info(self, association, start, end, requester_id, client_token, **kwargs):
        """
        Get list of blogs
        Returns the list of blogs

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_blogs_with_http_info(association, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int association: association (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseBlogList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['association', 'start', 'end', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_blogs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'association' is set
        if ('association' not in params) or (params['association'] is None):
            raise ValueError("Missing the required parameter `association` when calling `get_blogs`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_blogs`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_blogs`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_blogs`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_blogs`")

        resource_path = '/collaborations/blogs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'association' in params:
            query_params['association'] = params['association']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseBlogList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_discussion_comments(self, discussion_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of comments on discussion
        Returns the list of comments on discussion

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_discussion_comments(discussion_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int discussion_id: discussionId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseCommentList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_discussion_comments_with_http_info(discussion_id, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_discussion_comments_with_http_info(discussion_id, start, end, requester_id, client_token, **kwargs)
            return data

    def get_discussion_comments_with_http_info(self, discussion_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of comments on discussion
        Returns the list of comments on discussion

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_discussion_comments_with_http_info(discussion_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int discussion_id: discussionId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseCommentList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['discussion_id', 'start', 'end', 'requester_id', 'client_token', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discussion_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'discussion_id' is set
        if ('discussion_id' not in params) or (params['discussion_id'] is None):
            raise ValueError("Missing the required parameter `discussion_id` when calling `get_discussion_comments`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_discussion_comments`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_discussion_comments`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_discussion_comments`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_discussion_comments`")

        resource_path = '/collaborations/discussions/{discussionId}/comments'.replace('{format}', 'json')
        path_params = {}
        if 'discussion_id' in params:
            path_params['discussionId'] = params['discussion_id']

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseCommentList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_discussions(self, association, start, end, requester_id, client_token, **kwargs):
        """
        Get list of discussions
        Returns the list of discussions

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_discussions(association, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int association: association (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseDiscussionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_discussions_with_http_info(association, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_discussions_with_http_info(association, start, end, requester_id, client_token, **kwargs)
            return data

    def get_discussions_with_http_info(self, association, start, end, requester_id, client_token, **kwargs):
        """
        Get list of discussions
        Returns the list of discussions

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_discussions_with_http_info(association, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int association: association (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseDiscussionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['association', 'start', 'end', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discussions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'association' is set
        if ('association' not in params) or (params['association'] is None):
            raise ValueError("Missing the required parameter `association` when calling `get_discussions`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_discussions`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_discussions`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_discussions`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_discussions`")

        resource_path = '/collaborations/discussions'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'association' in params:
            query_params['association'] = params['association']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseDiscussionList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_user_subscribed_blogs(self, user_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of blogs subscribed by user
        Returns the list of blogs subscribed by user

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_subscribed_blogs(user_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: User Id whose subcribtions want tp get.  (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseBlog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_subscribed_blogs_with_http_info(user_id, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_user_subscribed_blogs_with_http_info(user_id, start, end, requester_id, client_token, **kwargs)
            return data

    def get_user_subscribed_blogs_with_http_info(self, user_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of blogs subscribed by user
        Returns the list of blogs subscribed by user

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_subscribed_blogs_with_http_info(user_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: User Id whose subcribtions want tp get.  (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseBlog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'start', 'end', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_subscribed_blogs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_user_subscribed_blogs`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_user_subscribed_blogs`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_user_subscribed_blogs`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_user_subscribed_blogs`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_user_subscribed_blogs`")

        resource_path = '/collaborations/blogs/{userId}/subscribe'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseBlog',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_user_subscribed_discussions(self, user_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of discussions subscribed by user
        Returns the list of discussions subscribed by user 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_subscribed_discussions(user_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: User Id whose subcribtions want tp get. (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseDiscussionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_subscribed_discussions_with_http_info(user_id, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_user_subscribed_discussions_with_http_info(user_id, start, end, requester_id, client_token, **kwargs)
            return data

    def get_user_subscribed_discussions_with_http_info(self, user_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of discussions subscribed by user
        Returns the list of discussions subscribed by user 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_subscribed_discussions_with_http_info(user_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: User Id whose subcribtions want tp get. (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseDiscussionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'start', 'end', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_subscribed_discussions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_user_subscribed_discussions`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_user_subscribed_discussions`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_user_subscribed_discussions`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_user_subscribed_discussions`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_user_subscribed_discussions`")

        resource_path = '/collaborations/discussions/{userId}/subscribe'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseDiscussionList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def post_blog(self, requester_id, client_token, **kwargs):
        """
        Post blog
        This service allows a user to post a blog. The following fields(key:value) are required to be present in the Blog JSON object. Refer to the Model & Model Schema of the expected JSON Object for the body of this API. **Required fields** 1. association      2. title      3. description

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_blog(requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param Blog body: 
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseBlog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_blog_with_http_info(requester_id, client_token, **kwargs)
        else:
            (data) = self.post_blog_with_http_info(requester_id, client_token, **kwargs)
            return data

    def post_blog_with_http_info(self, requester_id, client_token, **kwargs):
        """
        Post blog
        This service allows a user to post a blog. The following fields(key:value) are required to be present in the Blog JSON object. Refer to the Model & Model Schema of the expected JSON Object for the body of this API. **Required fields** 1. association      2. title      3. description

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_blog_with_http_info(requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param Blog body: 
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseBlog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['requester_id', 'client_token', 'body', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_blog" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `post_blog`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `post_blog`")

        resource_path = '/collaborations/blogs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseBlog',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def start_discussion(self, requester_id, client_token, **kwargs):
        """
        Start discussion
        This service allows a user to post a discussion. The following fields(key:value) are required to be present in the Discussion JSON object. Refer to the Model & Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. association      2. subject      3. description

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.start_discussion(requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param Discussion body: 
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseDiscussion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.start_discussion_with_http_info(requester_id, client_token, **kwargs)
        else:
            (data) = self.start_discussion_with_http_info(requester_id, client_token, **kwargs)
            return data

    def start_discussion_with_http_info(self, requester_id, client_token, **kwargs):
        """
        Start discussion
        This service allows a user to post a discussion. The following fields(key:value) are required to be present in the Discussion JSON object. Refer to the Model & Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. association      2. subject      3. description

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.start_discussion_with_http_info(requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param Discussion body: 
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseDiscussion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['requester_id', 'client_token', 'body', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_discussion" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `start_discussion`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `start_discussion`")

        resource_path = '/collaborations/discussions'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseDiscussion',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def subscribe_blog(self, blog_id, requester_id, client_token, **kwargs):
        """
        Subscribe blog
        Allows the user to subscribe to blog. Returns the subscribed blog

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.subscribe_blog(blog_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int blog_id: blogId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseBlog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.subscribe_blog_with_http_info(blog_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.subscribe_blog_with_http_info(blog_id, requester_id, client_token, **kwargs)
            return data

    def subscribe_blog_with_http_info(self, blog_id, requester_id, client_token, **kwargs):
        """
        Subscribe blog
        Allows the user to subscribe to blog. Returns the subscribed blog

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.subscribe_blog_with_http_info(blog_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int blog_id: blogId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseBlog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['blog_id', 'requester_id', 'client_token', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscribe_blog" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'blog_id' is set
        if ('blog_id' not in params) or (params['blog_id'] is None):
            raise ValueError("Missing the required parameter `blog_id` when calling `subscribe_blog`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `subscribe_blog`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `subscribe_blog`")

        resource_path = '/collaborations/blogs/{blogId}/subscribe'.replace('{format}', 'json')
        path_params = {}
        if 'blog_id' in params:
            path_params['blogId'] = params['blog_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseBlog',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def subscribe_discussion(self, discussion_id, requester_id, client_token, **kwargs):
        """
        Subscribe discussion
        Allows the user to subscribe to a discussion. Returns the subscribed discussion

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.subscribe_discussion(discussion_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int discussion_id: discussionId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseDiscussion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.subscribe_discussion_with_http_info(discussion_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.subscribe_discussion_with_http_info(discussion_id, requester_id, client_token, **kwargs)
            return data

    def subscribe_discussion_with_http_info(self, discussion_id, requester_id, client_token, **kwargs):
        """
        Subscribe discussion
        Allows the user to subscribe to a discussion. Returns the subscribed discussion

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.subscribe_discussion_with_http_info(discussion_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int discussion_id: discussionId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseDiscussion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['discussion_id', 'requester_id', 'client_token', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscribe_discussion" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'discussion_id' is set
        if ('discussion_id' not in params) or (params['discussion_id'] is None):
            raise ValueError("Missing the required parameter `discussion_id` when calling `subscribe_discussion`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `subscribe_discussion`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `subscribe_discussion`")

        resource_path = '/collaborations/discussions/{discussionId}/subscribe'.replace('{format}', 'json')
        path_params = {}
        if 'discussion_id' in params:
            path_params['discussionId'] = params['discussion_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseDiscussion',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def unsubscribe_blog(self, blog_id, requester_id, client_token, **kwargs):
        """
        Unsubscribe blog
        Allows the user to unsubscribe blog. Returns the unsubscribed blog

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unsubscribe_blog(blog_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int blog_id: blogId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseBlog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.unsubscribe_blog_with_http_info(blog_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.unsubscribe_blog_with_http_info(blog_id, requester_id, client_token, **kwargs)
            return data

    def unsubscribe_blog_with_http_info(self, blog_id, requester_id, client_token, **kwargs):
        """
        Unsubscribe blog
        Allows the user to unsubscribe blog. Returns the unsubscribed blog

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unsubscribe_blog_with_http_info(blog_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int blog_id: blogId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseBlog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['blog_id', 'requester_id', 'client_token', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unsubscribe_blog" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'blog_id' is set
        if ('blog_id' not in params) or (params['blog_id'] is None):
            raise ValueError("Missing the required parameter `blog_id` when calling `unsubscribe_blog`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `unsubscribe_blog`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `unsubscribe_blog`")

        resource_path = '/collaborations/blogs/{blogId}/unsubscribe'.replace('{format}', 'json')
        path_params = {}
        if 'blog_id' in params:
            path_params['blogId'] = params['blog_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseBlog',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def unsubscribe_discussion(self, discussion_id, requester_id, client_token, **kwargs):
        """
        Unsubscribe discussion
        Allows the user to unsubscribe to a discussion. Returns the unsubscribed discussion

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unsubscribe_discussion(discussion_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int discussion_id: discussionId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseDiscussion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.unsubscribe_discussion_with_http_info(discussion_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.unsubscribe_discussion_with_http_info(discussion_id, requester_id, client_token, **kwargs)
            return data

    def unsubscribe_discussion_with_http_info(self, discussion_id, requester_id, client_token, **kwargs):
        """
        Unsubscribe discussion
        Allows the user to unsubscribe to a discussion. Returns the unsubscribed discussion

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unsubscribe_discussion_with_http_info(discussion_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int discussion_id: discussionId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseDiscussion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['discussion_id', 'requester_id', 'client_token', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unsubscribe_discussion" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'discussion_id' is set
        if ('discussion_id' not in params) or (params['discussion_id'] is None):
            raise ValueError("Missing the required parameter `discussion_id` when calling `unsubscribe_discussion`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `unsubscribe_discussion`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `unsubscribe_discussion`")

        resource_path = '/collaborations/discussions/{discussionId}/unsubscribe'.replace('{format}', 'json')
        path_params = {}
        if 'discussion_id' in params:
            path_params['discussionId'] = params['discussion_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseDiscussion',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_blog(self, blog_id, blog_title, blog_description, requester_id, client_token, **kwargs):
        """
        Update blog
        Allows the user to update blog. Returns the updated blog

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_blog(blog_id, blog_title, blog_description, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int blog_id: blogId (required)
        :param str blog_title: blog title (required)
        :param str blog_description: blog description (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseBlog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_blog_with_http_info(blog_id, blog_title, blog_description, requester_id, client_token, **kwargs)
        else:
            (data) = self.update_blog_with_http_info(blog_id, blog_title, blog_description, requester_id, client_token, **kwargs)
            return data

    def update_blog_with_http_info(self, blog_id, blog_title, blog_description, requester_id, client_token, **kwargs):
        """
        Update blog
        Allows the user to update blog. Returns the updated blog

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_blog_with_http_info(blog_id, blog_title, blog_description, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int blog_id: blogId (required)
        :param str blog_title: blog title (required)
        :param str blog_description: blog description (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseBlog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['blog_id', 'blog_title', 'blog_description', 'requester_id', 'client_token', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_blog" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'blog_id' is set
        if ('blog_id' not in params) or (params['blog_id'] is None):
            raise ValueError("Missing the required parameter `blog_id` when calling `update_blog`")
        # verify the required parameter 'blog_title' is set
        if ('blog_title' not in params) or (params['blog_title'] is None):
            raise ValueError("Missing the required parameter `blog_title` when calling `update_blog`")
        # verify the required parameter 'blog_description' is set
        if ('blog_description' not in params) or (params['blog_description'] is None):
            raise ValueError("Missing the required parameter `blog_description` when calling `update_blog`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `update_blog`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `update_blog`")

        resource_path = '/collaborations/blogs/{blogId}'.replace('{format}', 'json')
        path_params = {}
        if 'blog_id' in params:
            path_params['blogId'] = params['blog_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'blog_title' in params:
            form_params.append(('blogTitle', params['blog_title']))
        if 'blog_description' in params:
            form_params.append(('blogDescription', params['blog_description']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseBlog',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_blog_comment(self, comment_id, comment_text, requester_id, client_token, **kwargs):
        """
        Update blog comment
        Allows the user to update blog comment. Returns the updated blog comment

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_blog_comment(comment_id, comment_text, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int comment_id: commentId (required)
        :param str comment_text: comment text (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseComment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_blog_comment_with_http_info(comment_id, comment_text, requester_id, client_token, **kwargs)
        else:
            (data) = self.update_blog_comment_with_http_info(comment_id, comment_text, requester_id, client_token, **kwargs)
            return data

    def update_blog_comment_with_http_info(self, comment_id, comment_text, requester_id, client_token, **kwargs):
        """
        Update blog comment
        Allows the user to update blog comment. Returns the updated blog comment

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_blog_comment_with_http_info(comment_id, comment_text, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int comment_id: commentId (required)
        :param str comment_text: comment text (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseComment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['comment_id', 'comment_text', 'requester_id', 'client_token', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_blog_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params) or (params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `update_blog_comment`")
        # verify the required parameter 'comment_text' is set
        if ('comment_text' not in params) or (params['comment_text'] is None):
            raise ValueError("Missing the required parameter `comment_text` when calling `update_blog_comment`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `update_blog_comment`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `update_blog_comment`")

        resource_path = '/collaborations/blogs/comments/{commentId}'.replace('{format}', 'json')
        path_params = {}
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'comment_text' in params:
            form_params.append(('commentText', params['comment_text']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseComment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_discussion(self, discussion_id, subject, discussion_description, requester_id, client_token, **kwargs):
        """
        Update discussion
        Allows the user to update discussion. Returns the updated discussion

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_discussion(discussion_id, subject, discussion_description, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int discussion_id: discussionId (required)
        :param str subject: subject (required)
        :param str discussion_description: discussion Description (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseDiscussion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_discussion_with_http_info(discussion_id, subject, discussion_description, requester_id, client_token, **kwargs)
        else:
            (data) = self.update_discussion_with_http_info(discussion_id, subject, discussion_description, requester_id, client_token, **kwargs)
            return data

    def update_discussion_with_http_info(self, discussion_id, subject, discussion_description, requester_id, client_token, **kwargs):
        """
        Update discussion
        Allows the user to update discussion. Returns the updated discussion

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_discussion_with_http_info(discussion_id, subject, discussion_description, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int discussion_id: discussionId (required)
        :param str subject: subject (required)
        :param str discussion_description: discussion Description (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseDiscussion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['discussion_id', 'subject', 'discussion_description', 'requester_id', 'client_token', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_discussion" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'discussion_id' is set
        if ('discussion_id' not in params) or (params['discussion_id'] is None):
            raise ValueError("Missing the required parameter `discussion_id` when calling `update_discussion`")
        # verify the required parameter 'subject' is set
        if ('subject' not in params) or (params['subject'] is None):
            raise ValueError("Missing the required parameter `subject` when calling `update_discussion`")
        # verify the required parameter 'discussion_description' is set
        if ('discussion_description' not in params) or (params['discussion_description'] is None):
            raise ValueError("Missing the required parameter `discussion_description` when calling `update_discussion`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `update_discussion`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `update_discussion`")

        resource_path = '/collaborations/discussions/{discussionId}'.replace('{format}', 'json')
        path_params = {}
        if 'discussion_id' in params:
            path_params['discussionId'] = params['discussion_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'subject' in params:
            form_params.append(('subject', params['subject']))
        if 'discussion_description' in params:
            form_params.append(('discussionDescription', params['discussion_description']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseDiscussion',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_discussion_comment(self, comment_id, comment_text, requester_id, client_token, **kwargs):
        """
        Update discussion comment
        Allows the user to update discussion comment. Returns the updated discussion comment

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_discussion_comment(comment_id, comment_text, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int comment_id: commentId (required)
        :param str comment_text: comment text (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseDiscussion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_discussion_comment_with_http_info(comment_id, comment_text, requester_id, client_token, **kwargs)
        else:
            (data) = self.update_discussion_comment_with_http_info(comment_id, comment_text, requester_id, client_token, **kwargs)
            return data

    def update_discussion_comment_with_http_info(self, comment_id, comment_text, requester_id, client_token, **kwargs):
        """
        Update discussion comment
        Allows the user to update discussion comment. Returns the updated discussion comment

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_discussion_comment_with_http_info(comment_id, comment_text, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int comment_id: commentId (required)
        :param str comment_text: comment text (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseDiscussion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['comment_id', 'comment_text', 'requester_id', 'client_token', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_discussion_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params) or (params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `update_discussion_comment`")
        # verify the required parameter 'comment_text' is set
        if ('comment_text' not in params) or (params['comment_text'] is None):
            raise ValueError("Missing the required parameter `comment_text` when calling `update_discussion_comment`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `update_discussion_comment`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `update_discussion_comment`")

        resource_path = '/collaborations/discussions/comments/{commentId}'.replace('{format}', 'json')
        path_params = {}
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'comment_text' in params:
            form_params.append(('commentText', params['comment_text']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseDiscussion',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
