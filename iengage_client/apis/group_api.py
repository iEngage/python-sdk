# coding: utf-8

"""
    iEngage 2.0 API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class GroupApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_group(self, requester_id, client_token, **kwargs):
        """
        Create group
        This service allows a user to create a group. The following fields(key:value) are required to be present in the Group JSON object. Refer to the Model & Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. association      2. groupName      3. description      4. managerId [1,2,..]      5. accessType

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_group(requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param Group body: 
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_group_with_http_info(requester_id, client_token, **kwargs)
        else:
            (data) = self.create_group_with_http_info(requester_id, client_token, **kwargs)
            return data

    def create_group_with_http_info(self, requester_id, client_token, **kwargs):
        """
        Create group
        This service allows a user to create a group. The following fields(key:value) are required to be present in the Group JSON object. Refer to the Model & Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. association      2. groupName      3. description      4. managerId [1,2,..]      5. accessType

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_group_with_http_info(requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param Group body: 
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['requester_id', 'client_token', 'body', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `create_group`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `create_group`")

        resource_path = '/groups'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseGroup',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_group(self, group_id, requester_id, client_token, **kwargs):
        """
        Delete group
        Allows the user to delete a group. Returns the deleted group

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_group(group_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: groupId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_group_with_http_info(group_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.delete_group_with_http_info(group_id, requester_id, client_token, **kwargs)
            return data

    def delete_group_with_http_info(self, group_id, requester_id, client_token, **kwargs):
        """
        Delete group
        Allows the user to delete a group. Returns the deleted group

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_group_with_http_info(group_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: groupId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `delete_group`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `delete_group`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `delete_group`")

        resource_path = '/groups/{groupId}'.replace('{format}', 'json')
        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseGroup',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def follow_group(self, group_id, requester_id, client_token, **kwargs):
        """
        Follow group
        Allows the user to follow a group. Returns the followed group

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.follow_group(group_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: groupId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.follow_group_with_http_info(group_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.follow_group_with_http_info(group_id, requester_id, client_token, **kwargs)
            return data

    def follow_group_with_http_info(self, group_id, requester_id, client_token, **kwargs):
        """
        Follow group
        Allows the user to follow a group. Returns the followed group

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.follow_group_with_http_info(group_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: groupId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method follow_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `follow_group`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `follow_group`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `follow_group`")

        resource_path = '/groups/{groupId}/follow'.replace('{format}', 'json')
        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseGroup',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_group_followers(self, group_id, start, end, requester_id, client_token, **kwargs):
        """
        Get the list of followers for the group
        Returns the list of followers for the group

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_group_followers(group_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: groupId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)userId       2)firstName       3)lastName       4)profileImage        **A) Available values-**       1)userId       2)firstName       3)lastName       4)emailId       5)profileImage       6)birthDate        */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseUserList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_group_followers_with_http_info(group_id, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_group_followers_with_http_info(group_id, start, end, requester_id, client_token, **kwargs)
            return data

    def get_group_followers_with_http_info(self, group_id, start, end, requester_id, client_token, **kwargs):
        """
        Get the list of followers for the group
        Returns the list of followers for the group

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_group_followers_with_http_info(group_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: groupId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)userId       2)firstName       3)lastName       4)profileImage        **A) Available values-**       1)userId       2)firstName       3)lastName       4)emailId       5)profileImage       6)birthDate        */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseUserList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'start', 'end', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_group_followers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_group_followers`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_group_followers`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_group_followers`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_group_followers`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_group_followers`")

        resource_path = '/groups/{groupId}/followers'.replace('{format}', 'json')
        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseUserList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_group_ideas(self, group_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of all ideas in a group
        Returns the list of all ideas in a group

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_group_ideas(group_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: groupId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdeaList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_group_ideas_with_http_info(group_id, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_group_ideas_with_http_info(group_id, start, end, requester_id, client_token, **kwargs)
            return data

    def get_group_ideas_with_http_info(self, group_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of all ideas in a group
        Returns the list of all ideas in a group

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_group_ideas_with_http_info(group_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: groupId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdeaList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'start', 'end', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_group_ideas" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_group_ideas`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_group_ideas`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_group_ideas`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_group_ideas`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_group_ideas`")

        resource_path = '/groups/{groupId}/ideas'.replace('{format}', 'json')
        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseIdeaList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_groups(self, start, end, requester_id, client_token, **kwargs):
        """
        Get the list of groups visible for user
        Returns the list of groups

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_groups(start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseGroupList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_groups_with_http_info(start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_groups_with_http_info(start, end, requester_id, client_token, **kwargs)
            return data

    def get_groups_with_http_info(self, start, end, requester_id, client_token, **kwargs):
        """
        Get the list of groups visible for user
        Returns the list of groups

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_groups_with_http_info(start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseGroupList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'end', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_groups`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_groups`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_groups`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_groups`")

        resource_path = '/groups'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseGroupList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_recommendation_group(self, start, end, requester_id, client_token, **kwargs):
        """
        Get list of recommended groups
        Returns the list of recommended groups

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_recommendation_group(start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseGroupList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_recommendation_group_with_http_info(start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_recommendation_group_with_http_info(start, end, requester_id, client_token, **kwargs)
            return data

    def get_recommendation_group_with_http_info(self, start, end, requester_id, client_token, **kwargs):
        """
        Get list of recommended groups
        Returns the list of recommended groups

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_recommendation_group_with_http_info(start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseGroupList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'end', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recommendation_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_recommendation_group`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_recommendation_group`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_recommendation_group`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_recommendation_group`")

        resource_path = '/groups/recommend'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseGroupList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_user_following_groups(self, user_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of groups that a user is following
        Returns the list of groups the user is following

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_following_groups(user_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: User Id whose groups want to get. (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseGroupList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_following_groups_with_http_info(user_id, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_user_following_groups_with_http_info(user_id, start, end, requester_id, client_token, **kwargs)
            return data

    def get_user_following_groups_with_http_info(self, user_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of groups that a user is following
        Returns the list of groups the user is following

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_following_groups_with_http_info(user_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: User Id whose groups want to get. (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseGroupList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'start', 'end', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_following_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_user_following_groups`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_user_following_groups`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_user_following_groups`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_user_following_groups`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_user_following_groups`")

        resource_path = '/groups/{userId}/following'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseGroupList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def search_groups(self, query, start, end, requester_id, client_token, **kwargs):
        """
        Get list of matching groups
        Returns the list of matching group

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_groups(query, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str query: query (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseGroupList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_groups_with_http_info(query, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.search_groups_with_http_info(query, start, end, requester_id, client_token, **kwargs)
            return data

    def search_groups_with_http_info(self, query, start, end, requester_id, client_token, **kwargs):
        """
        Get list of matching groups
        Returns the list of matching group

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_groups_with_http_info(query, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str query: query (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseGroupList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'start', 'end', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params) or (params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `search_groups`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `search_groups`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `search_groups`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `search_groups`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `search_groups`")

        resource_path = '/groups/search'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'query' in params:
            query_params['query'] = params['query']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseGroupList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def unfollow_group(self, group_id, requester_id, client_token, **kwargs):
        """
        Unfollow group
        Allows the user to unfollow a group. Returns the unfollowed group

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unfollow_group(group_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: groupId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.unfollow_group_with_http_info(group_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.unfollow_group_with_http_info(group_id, requester_id, client_token, **kwargs)
            return data

    def unfollow_group_with_http_info(self, group_id, requester_id, client_token, **kwargs):
        """
        Unfollow group
        Allows the user to unfollow a group. Returns the unfollowed group

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unfollow_group_with_http_info(group_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: groupId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unfollow_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `unfollow_group`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `unfollow_group`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `unfollow_group`")

        resource_path = '/groups/{groupId}/unfollow'.replace('{format}', 'json')
        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseGroup',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_group(self, group_id, title, description, requester_id, client_token, **kwargs):
        """
        Update group
        Allows the user to update the group. Returns the updated group

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_group(group_id, title, description, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: groupId (required)
        :param str title: title (required)
        :param str description: description (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_group_with_http_info(group_id, title, description, requester_id, client_token, **kwargs)
        else:
            (data) = self.update_group_with_http_info(group_id, title, description, requester_id, client_token, **kwargs)
            return data

    def update_group_with_http_info(self, group_id, title, description, requester_id, client_token, **kwargs):
        """
        Update group
        Allows the user to update the group. Returns the updated group

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_group_with_http_info(group_id, title, description, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: groupId (required)
        :param str title: title (required)
        :param str description: description (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'title', 'description', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `update_group`")
        # verify the required parameter 'title' is set
        if ('title' not in params) or (params['title'] is None):
            raise ValueError("Missing the required parameter `title` when calling `update_group`")
        # verify the required parameter 'description' is set
        if ('description' not in params) or (params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `update_group`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `update_group`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `update_group`")

        resource_path = '/groups/{groupId}'.replace('{format}', 'json')
        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))
        if 'description' in params:
            form_params.append(('description', params['description']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseGroup',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
