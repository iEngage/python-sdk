# coding: utf-8

"""
    Stakeholder engagement API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class BPMApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def assign_wf_task(self, assignee_user_id, task_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Assign task
        Assign BPM task, It will return task object
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.assign_wf_task(assignee_user_id, task_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int assignee_user_id: assigneeUserId - assign to this user (required)
        :param int task_id: taskId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str comment: comment
        :param int due_date: dueDate
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)taskId<br/>2)name<br/>3)type<br/><b>A) Available values -</b> <br/>1)taskId<br/>2)name<br/>3)dueDate<br/>4)description<br/>5)transitionList<br/>6)type<br/>7)entityId<br/>8)attributes
        :return: VerveResponseWFTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.assign_wf_task_with_http_info(assignee_user_id, task_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.assign_wf_task_with_http_info(assignee_user_id, task_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def assign_wf_task_with_http_info(self, assignee_user_id, task_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Assign task
        Assign BPM task, It will return task object
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.assign_wf_task_with_http_info(assignee_user_id, task_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int assignee_user_id: assigneeUserId - assign to this user (required)
        :param int task_id: taskId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str comment: comment
        :param int due_date: dueDate
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)taskId<br/>2)name<br/>3)type<br/><b>A) Available values -</b> <br/>1)taskId<br/>2)name<br/>3)dueDate<br/>4)description<br/>5)transitionList<br/>6)type<br/>7)entityId<br/>8)attributes
        :return: VerveResponseWFTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assignee_user_id', 'task_id', 'logged_in_user_id', 'access_token', 'client_token', 'comment', 'due_date', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_wf_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assignee_user_id' is set
        if ('assignee_user_id' not in params) or (params['assignee_user_id'] is None):
            raise ValueError("Missing the required parameter `assignee_user_id` when calling `assign_wf_task`")
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params) or (params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `assign_wf_task`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `assign_wf_task`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `assign_wf_task`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `assign_wf_task`")


        collection_formats = {}

        resource_path = '/bpm/tasks/{taskId}/assign'.replace('{format}', 'json')
        path_params = {}
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'assignee_user_id' in params:
            form_params.append(('assigneeUserId', params['assignee_user_id']))
        if 'comment' in params:
            form_params.append(('comment', params['comment']))
        if 'due_date' in params:
            form_params.append(('dueDate', params['due_date']))
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseWFTask',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def complete_wf_task(self, user_id, task_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Complete task
        Complete BPM task, It will return task object
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.complete_wf_task(user_id, task_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId whose task want to complete (required)
        :param int task_id: taskId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str transition: transition
        :param str comment: comment
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)taskId<br/>2)name<br/>3)type<br/><b>A) Available values -</b> <br/>1)taskId<br/>2)name<br/>3)dueDate<br/>4)description<br/>5)transitionList<br/>6)type<br/>7)entityId<br/>8)attributes
        :return: VerveResponseWFTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.complete_wf_task_with_http_info(user_id, task_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.complete_wf_task_with_http_info(user_id, task_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def complete_wf_task_with_http_info(self, user_id, task_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Complete task
        Complete BPM task, It will return task object
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.complete_wf_task_with_http_info(user_id, task_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId whose task want to complete (required)
        :param int task_id: taskId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str transition: transition
        :param str comment: comment
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)taskId<br/>2)name<br/>3)type<br/><b>A) Available values -</b> <br/>1)taskId<br/>2)name<br/>3)dueDate<br/>4)description<br/>5)transitionList<br/>6)type<br/>7)entityId<br/>8)attributes
        :return: VerveResponseWFTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'task_id', 'logged_in_user_id', 'access_token', 'client_token', 'transition', 'comment', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method complete_wf_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `complete_wf_task`")
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params) or (params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `complete_wf_task`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `complete_wf_task`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `complete_wf_task`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `complete_wf_task`")


        collection_formats = {}

        resource_path = '/bpm/tasks/{taskId}/complete'.replace('{format}', 'json')
        path_params = {}
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'user_id' in params:
            form_params.append(('userId', params['user_id']))
        if 'transition' in params:
            form_params.append(('transition', params['transition']))
        if 'comment' in params:
            form_params.append(('comment', params['comment']))
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseWFTask',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_bpm_tasks(self, user_id, task_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get task by task id
        Return the BPM task
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_bpm_tasks(user_id, task_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId (required)
        :param int task_id: taskId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)taskId<br/>2)name<br/>3)type<br/><b>A) Available values -</b> <br/>1)taskId<br/>2)name<br/>3)dueDate<br/>4)description<br/>5)transitionList<br/>6)type<br/>7)entityId<br/>8)attributes
        :return: VerveResponseWFTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_bpm_tasks_with_http_info(user_id, task_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_bpm_tasks_with_http_info(user_id, task_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_bpm_tasks_with_http_info(self, user_id, task_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get task by task id
        Return the BPM task
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_bpm_tasks_with_http_info(user_id, task_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId (required)
        :param int task_id: taskId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)taskId<br/>2)name<br/>3)type<br/><b>A) Available values -</b> <br/>1)taskId<br/>2)name<br/>3)dueDate<br/>4)description<br/>5)transitionList<br/>6)type<br/>7)entityId<br/>8)attributes
        :return: VerveResponseWFTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'task_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bpm_tasks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_bpm_tasks`")
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params) or (params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `get_bpm_tasks`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_bpm_tasks`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_bpm_tasks`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_bpm_tasks`")


        collection_formats = {}

        resource_path = '/bpm/tasks/{taskId}'.replace('{format}', 'json')
        path_params = {}
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']

        query_params = {}
        if 'user_id' in params:
            query_params['userId'] = params['user_id']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseWFTask',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_search_task(self, user_id, search_string, completed, search_by_user_roles, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of BPM task assigned to user
        Return the list of BPM task
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_search_task(user_id, search_string, completed, search_by_user_roles, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId (required)
        :param str search_string: searchString (required)
        :param bool completed: 1) true - Completed <br/> 2) false - Pending <br/> (required)
        :param bool search_by_user_roles: 1) true - Assigned to roles <br/> 2) false - Assigned to user (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str type: Type
        :param int organization_id: organizationId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)taskId<br/>2)name<br/>3)type<br/><b>A) Available values -</b> <br/>1)taskId<br/>2)name<br/>3)dueDate<br/>4)description<br/>5)transitionList<br/>6)type<br/>7)entityId<br/>8)attributes
        :return: VerveResponseWFTaskList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_search_task_with_http_info(user_id, search_string, completed, search_by_user_roles, start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_search_task_with_http_info(user_id, search_string, completed, search_by_user_roles, start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_search_task_with_http_info(self, user_id, search_string, completed, search_by_user_roles, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of BPM task assigned to user
        Return the list of BPM task
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_search_task_with_http_info(user_id, search_string, completed, search_by_user_roles, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId (required)
        :param str search_string: searchString (required)
        :param bool completed: 1) true - Completed <br/> 2) false - Pending <br/> (required)
        :param bool search_by_user_roles: 1) true - Assigned to roles <br/> 2) false - Assigned to user (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str type: Type
        :param int organization_id: organizationId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)taskId<br/>2)name<br/>3)type<br/><b>A) Available values -</b> <br/>1)taskId<br/>2)name<br/>3)dueDate<br/>4)description<br/>5)transitionList<br/>6)type<br/>7)entityId<br/>8)attributes
        :return: VerveResponseWFTaskList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'search_string', 'completed', 'search_by_user_roles', 'start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'type', 'organization_id', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_search_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_search_task`")
        # verify the required parameter 'search_string' is set
        if ('search_string' not in params) or (params['search_string'] is None):
            raise ValueError("Missing the required parameter `search_string` when calling `get_search_task`")
        # verify the required parameter 'completed' is set
        if ('completed' not in params) or (params['completed'] is None):
            raise ValueError("Missing the required parameter `completed` when calling `get_search_task`")
        # verify the required parameter 'search_by_user_roles' is set
        if ('search_by_user_roles' not in params) or (params['search_by_user_roles'] is None):
            raise ValueError("Missing the required parameter `search_by_user_roles` when calling `get_search_task`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_search_task`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_search_task`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_search_task`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_search_task`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_search_task`")


        collection_formats = {}

        resource_path = '/bpm/{userId}/tasks/name'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'search_string' in params:
            query_params['searchString'] = params['search_string']
        if 'completed' in params:
            query_params['completed'] = params['completed']
        if 'search_by_user_roles' in params:
            query_params['searchByUserRoles'] = params['search_by_user_roles']
        if 'type' in params:
            query_params['type'] = params['type']
        if 'organization_id' in params:
            query_params['organizationId'] = params['organization_id']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseWFTaskList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_tasks_by_entity(self, user_id, entity_id, completed, search_by_user_roles, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of BPM task assigned to user
        Return the list of BPM task
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tasks_by_entity(user_id, entity_id, completed, search_by_user_roles, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId whose task want to see (required)
        :param int entity_id: entityId (required)
        :param bool completed: 1) true - Completed <br/> 2) false - Pending <br/> (required)
        :param bool search_by_user_roles: 1) true - Assigned to roles <br/> 2) false - Assigned to user (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)taskId<br/>2)name<br/>3)type<br/><b>A) Available values -</b> <br/>1)taskId<br/>2)name<br/>3)dueDate<br/>4)description<br/>5)transitionList<br/>6)type<br/>7)entityId<br/>8)attributes
        :return: VerveResponseWFTaskList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_tasks_by_entity_with_http_info(user_id, entity_id, completed, search_by_user_roles, start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_tasks_by_entity_with_http_info(user_id, entity_id, completed, search_by_user_roles, start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_tasks_by_entity_with_http_info(self, user_id, entity_id, completed, search_by_user_roles, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of BPM task assigned to user
        Return the list of BPM task
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tasks_by_entity_with_http_info(user_id, entity_id, completed, search_by_user_roles, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId whose task want to see (required)
        :param int entity_id: entityId (required)
        :param bool completed: 1) true - Completed <br/> 2) false - Pending <br/> (required)
        :param bool search_by_user_roles: 1) true - Assigned to roles <br/> 2) false - Assigned to user (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)taskId<br/>2)name<br/>3)type<br/><b>A) Available values -</b> <br/>1)taskId<br/>2)name<br/>3)dueDate<br/>4)description<br/>5)transitionList<br/>6)type<br/>7)entityId<br/>8)attributes
        :return: VerveResponseWFTaskList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'entity_id', 'completed', 'search_by_user_roles', 'start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tasks_by_entity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_tasks_by_entity`")
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params) or (params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `get_tasks_by_entity`")
        # verify the required parameter 'completed' is set
        if ('completed' not in params) or (params['completed'] is None):
            raise ValueError("Missing the required parameter `completed` when calling `get_tasks_by_entity`")
        # verify the required parameter 'search_by_user_roles' is set
        if ('search_by_user_roles' not in params) or (params['search_by_user_roles'] is None):
            raise ValueError("Missing the required parameter `search_by_user_roles` when calling `get_tasks_by_entity`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_tasks_by_entity`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_tasks_by_entity`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_tasks_by_entity`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_tasks_by_entity`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_tasks_by_entity`")


        collection_formats = {}

        resource_path = '/bpm/{userId}/tasks/{entityId}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'entity_id' in params:
            path_params['entityId'] = params['entity_id']

        query_params = {}
        if 'completed' in params:
            query_params['completed'] = params['completed']
        if 'search_by_user_roles' in params:
            query_params['searchByUserRoles'] = params['search_by_user_roles']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseWFTaskList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_user_bpm_tasks(self, user_id, completed, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of BPM task assigned to user
        Return the list of BPM task
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_bpm_tasks(user_id, completed, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId whose task want to see (required)
        :param bool completed: 1) true - Completed <br/> 2) false - Pending <br/> 3) Blank - All (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str type: Type
        :param int organization_id: organizationId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)taskId<br/>2)name<br/>3)type<br/><b>A) Available values -</b> <br/>1)taskId<br/>2)name<br/>3)dueDate<br/>4)description<br/>5)transitionList<br/>6)type<br/>7)entityId<br/>8)attributes
        :return: VerveResponseWFTaskList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_bpm_tasks_with_http_info(user_id, completed, start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_user_bpm_tasks_with_http_info(user_id, completed, start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_user_bpm_tasks_with_http_info(self, user_id, completed, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of BPM task assigned to user
        Return the list of BPM task
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_bpm_tasks_with_http_info(user_id, completed, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId whose task want to see (required)
        :param bool completed: 1) true - Completed <br/> 2) false - Pending <br/> 3) Blank - All (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str type: Type
        :param int organization_id: organizationId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)taskId<br/>2)name<br/>3)type<br/><b>A) Available values -</b> <br/>1)taskId<br/>2)name<br/>3)dueDate<br/>4)description<br/>5)transitionList<br/>6)type<br/>7)entityId<br/>8)attributes
        :return: VerveResponseWFTaskList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'completed', 'start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'type', 'organization_id', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_bpm_tasks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_user_bpm_tasks`")
        # verify the required parameter 'completed' is set
        if ('completed' not in params) or (params['completed'] is None):
            raise ValueError("Missing the required parameter `completed` when calling `get_user_bpm_tasks`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_user_bpm_tasks`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_user_bpm_tasks`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_user_bpm_tasks`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_user_bpm_tasks`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_user_bpm_tasks`")


        collection_formats = {}

        resource_path = '/bpm/{userId}/tasks'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'completed' in params:
            query_params['completed'] = params['completed']
        if 'type' in params:
            query_params['type'] = params['type']
        if 'organization_id' in params:
            query_params['organizationId'] = params['organization_id']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseWFTaskList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_user_roles_bpm_tasks(self, user_id, completed, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of BPM task assigned to user roles
        Return the list of BPM task
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_roles_bpm_tasks(user_id, completed, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId whose task want to see (required)
        :param bool completed: 1) true - Completed <br/> 2) false - Pending <br/> 3) Blank - All (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str type: Type
        :param int organization_id: organizationId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)taskId<br/>2)name<br/>3)type<br/><b>A) Available values -</b> <br/>1)taskId<br/>2)name<br/>3)dueDate<br/>4)description<br/>5)transitionList<br/>6)type<br/>7)entityId<br/>8)attributes
        :return: VerveResponseWFTaskList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_roles_bpm_tasks_with_http_info(user_id, completed, start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_user_roles_bpm_tasks_with_http_info(user_id, completed, start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_user_roles_bpm_tasks_with_http_info(self, user_id, completed, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of BPM task assigned to user roles
        Return the list of BPM task
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_roles_bpm_tasks_with_http_info(user_id, completed, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId whose task want to see (required)
        :param bool completed: 1) true - Completed <br/> 2) false - Pending <br/> 3) Blank - All (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str type: Type
        :param int organization_id: organizationId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)taskId<br/>2)name<br/>3)type<br/><b>A) Available values -</b> <br/>1)taskId<br/>2)name<br/>3)dueDate<br/>4)description<br/>5)transitionList<br/>6)type<br/>7)entityId<br/>8)attributes
        :return: VerveResponseWFTaskList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'completed', 'start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'type', 'organization_id', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_roles_bpm_tasks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_user_roles_bpm_tasks`")
        # verify the required parameter 'completed' is set
        if ('completed' not in params) or (params['completed'] is None):
            raise ValueError("Missing the required parameter `completed` when calling `get_user_roles_bpm_tasks`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_user_roles_bpm_tasks`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_user_roles_bpm_tasks`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_user_roles_bpm_tasks`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_user_roles_bpm_tasks`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_user_roles_bpm_tasks`")


        collection_formats = {}

        resource_path = '/bpm/{userId}/roles/tasks'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'completed' in params:
            query_params['completed'] = params['completed']
        if 'type' in params:
            query_params['type'] = params['type']
        if 'organization_id' in params:
            query_params['organizationId'] = params['organization_id']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseWFTaskList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
