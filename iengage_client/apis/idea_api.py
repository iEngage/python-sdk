# coding: utf-8

"""
    iEngage 2.0 API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class IdeaApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def delete_comment(self, comment_id, requester_id, client_token, **kwargs):
        """
        Delete comment
        Allows the user to delete comment. Returns the deleted comment

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_comment(comment_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int comment_id: Comment Id (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseComment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_comment_with_http_info(comment_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.delete_comment_with_http_info(comment_id, requester_id, client_token, **kwargs)
            return data

    def delete_comment_with_http_info(self, comment_id, requester_id, client_token, **kwargs):
        """
        Delete comment
        Allows the user to delete comment. Returns the deleted comment

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_comment_with_http_info(comment_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int comment_id: Comment Id (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseComment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['comment_id', 'requester_id', 'client_token', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params) or (params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `delete_comment`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `delete_comment`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `delete_comment`")

        resource_path = '/ideas/comments/{commentId}'.replace('{format}', 'json')
        path_params = {}
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseComment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_idea(self, idea_id, requester_id, client_token, file, **kwargs):
        """
        Delete idea
        Allows the user to delete idea. Returns the deleted idea

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_idea(idea_id, requester_id, client_token, file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int idea_id: ideaId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param file file: file (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdea
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_idea_with_http_info(idea_id, requester_id, client_token, file, **kwargs)
        else:
            (data) = self.delete_idea_with_http_info(idea_id, requester_id, client_token, file, **kwargs)
            return data

    def delete_idea_with_http_info(self, idea_id, requester_id, client_token, file, **kwargs):
        """
        Delete idea
        Allows the user to delete idea. Returns the deleted idea

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_idea_with_http_info(idea_id, requester_id, client_token, file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int idea_id: ideaId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param file file: file (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdea
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idea_id', 'requester_id', 'client_token', 'file', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_idea" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idea_id' is set
        if ('idea_id' not in params) or (params['idea_id'] is None):
            raise ValueError("Missing the required parameter `idea_id` when calling `delete_idea`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `delete_idea`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `delete_idea`")
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `delete_idea`")

        resource_path = '/ideas/{ideaId}'.replace('{format}', 'json')
        path_params = {}
        if 'idea_id' in params:
            path_params['ideaId'] = params['idea_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))
        if 'file' in params:
            local_var_files['file'] = params['file']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseIdea',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def follow_idea(self, idea_id, requester_id, client_token, **kwargs):
        """
        Follow idea
        Allows the user to follow idea. Returns the followed idea

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.follow_idea(idea_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int idea_id: idea Id (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdea
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.follow_idea_with_http_info(idea_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.follow_idea_with_http_info(idea_id, requester_id, client_token, **kwargs)
            return data

    def follow_idea_with_http_info(self, idea_id, requester_id, client_token, **kwargs):
        """
        Follow idea
        Allows the user to follow idea. Returns the followed idea

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.follow_idea_with_http_info(idea_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int idea_id: idea Id (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdea
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idea_id', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method follow_idea" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idea_id' is set
        if ('idea_id' not in params) or (params['idea_id'] is None):
            raise ValueError("Missing the required parameter `idea_id` when calling `follow_idea`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `follow_idea`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `follow_idea`")

        resource_path = '/ideas/{ideaId}/follow'.replace('{format}', 'json')
        path_params = {}
        if 'idea_id' in params:
            path_params['ideaId'] = params['idea_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseIdea',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_all_ideas(self, start, end, requester_id, client_token, **kwargs):
        """
        Get list of Ideas
        Returns the list of ideas

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_ideas(start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdeaList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_ideas_with_http_info(start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_all_ideas_with_http_info(start, end, requester_id, client_token, **kwargs)
            return data

    def get_all_ideas_with_http_info(self, start, end, requester_id, client_token, **kwargs):
        """
        Get list of Ideas
        Returns the list of ideas

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_ideas_with_http_info(start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdeaList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'end', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_ideas" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_all_ideas`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_all_ideas`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_all_ideas`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_all_ideas`")

        resource_path = '/ideas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseIdeaList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_following_ideas(self, user_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of ideas that users are following
        Returns the list of ideas being followed

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_following_ideas(user_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: User Id whose followed ideas want to get. (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdeaList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_following_ideas_with_http_info(user_id, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_following_ideas_with_http_info(user_id, start, end, requester_id, client_token, **kwargs)
            return data

    def get_following_ideas_with_http_info(self, user_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of ideas that users are following
        Returns the list of ideas being followed

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_following_ideas_with_http_info(user_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: User Id whose followed ideas want to get. (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdeaList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'start', 'end', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_following_ideas" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_following_ideas`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_following_ideas`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_following_ideas`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_following_ideas`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_following_ideas`")

        resource_path = '/ideas/{userId}/following'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseIdeaList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_group_ideas(self, user_id, group_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of ideas in group
        Return the ideas list on group

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_group_ideas(user_id, group_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: user Id (required)
        :param int group_id: group Id (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdeaList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_group_ideas_with_http_info(user_id, group_id, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_group_ideas_with_http_info(user_id, group_id, start, end, requester_id, client_token, **kwargs)
            return data

    def get_group_ideas_with_http_info(self, user_id, group_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of ideas in group
        Return the ideas list on group

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_group_ideas_with_http_info(user_id, group_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: user Id (required)
        :param int group_id: group Id (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdeaList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'group_id', 'start', 'end', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_group_ideas" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_group_ideas`")
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_group_ideas`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_group_ideas`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_group_ideas`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_group_ideas`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_group_ideas`")

        resource_path = '/ideas/getGroupIdeas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'user_id' in params:
            query_params['userId'] = params['user_id']
        if 'group_id' in params:
            query_params['groupId'] = params['group_id']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseIdeaList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_idea(self, idea_id, requester_id, client_token, **kwargs):
        """
        Get idea by id
        Returns the idea by id

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_idea(idea_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int idea_id: idea Id (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdea
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_idea_with_http_info(idea_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_idea_with_http_info(idea_id, requester_id, client_token, **kwargs)
            return data

    def get_idea_with_http_info(self, idea_id, requester_id, client_token, **kwargs):
        """
        Get idea by id
        Returns the idea by id

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_idea_with_http_info(idea_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int idea_id: idea Id (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdea
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idea_id', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_idea" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idea_id' is set
        if ('idea_id' not in params) or (params['idea_id'] is None):
            raise ValueError("Missing the required parameter `idea_id` when calling `get_idea`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_idea`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_idea`")

        resource_path = '/ideas/{ideaId}'.replace('{format}', 'json')
        path_params = {}
        if 'idea_id' in params:
            path_params['ideaId'] = params['idea_id']

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseIdea',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_idea_comment(self, idea_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of comments on idea
        Returns the list of comments on idea

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_idea_comment(idea_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int idea_id: idea Id (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseCommentList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_idea_comment_with_http_info(idea_id, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_idea_comment_with_http_info(idea_id, start, end, requester_id, client_token, **kwargs)
            return data

    def get_idea_comment_with_http_info(self, idea_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of comments on idea
        Returns the list of comments on idea

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_idea_comment_with_http_info(idea_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int idea_id: idea Id (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseCommentList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idea_id', 'start', 'end', 'requester_id', 'client_token', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_idea_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idea_id' is set
        if ('idea_id' not in params) or (params['idea_id'] is None):
            raise ValueError("Missing the required parameter `idea_id` when calling `get_idea_comment`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_idea_comment`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_idea_comment`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_idea_comment`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_idea_comment`")

        resource_path = '/ideas/{ideaId}/comments'.replace('{format}', 'json')
        path_params = {}
        if 'idea_id' in params:
            path_params['ideaId'] = params['idea_id']

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseCommentList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_idea_followers(self, idea_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of followers for this idea
        Returns the list of followers

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_idea_followers(idea_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int idea_id: ideaId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseUserList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_idea_followers_with_http_info(idea_id, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_idea_followers_with_http_info(idea_id, start, end, requester_id, client_token, **kwargs)
            return data

    def get_idea_followers_with_http_info(self, idea_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of followers for this idea
        Returns the list of followers

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_idea_followers_with_http_info(idea_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int idea_id: ideaId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseUserList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idea_id', 'start', 'end', 'requester_id', 'client_token', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_idea_followers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idea_id' is set
        if ('idea_id' not in params) or (params['idea_id'] is None):
            raise ValueError("Missing the required parameter `idea_id` when calling `get_idea_followers`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_idea_followers`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_idea_followers`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_idea_followers`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_idea_followers`")

        resource_path = '/ideas/{ideaId}/followers'.replace('{format}', 'json')
        path_params = {}
        if 'idea_id' in params:
            path_params['ideaId'] = params['idea_id']

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseUserList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_idea_rating_parameters(self, user_id, idea_stage, requester_id, client_token, **kwargs):
        """
        Get rating parameters of idea by user
        Return the rating parameters of idea by user

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_idea_rating_parameters(user_id, idea_stage, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: user Id (required)
        :param str idea_stage:  /* Idea stages     1)under-consideration      2) shortlisted      3) accepted      4) prototyping  */ (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseString
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_idea_rating_parameters_with_http_info(user_id, idea_stage, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_idea_rating_parameters_with_http_info(user_id, idea_stage, requester_id, client_token, **kwargs)
            return data

    def get_idea_rating_parameters_with_http_info(self, user_id, idea_stage, requester_id, client_token, **kwargs):
        """
        Get rating parameters of idea by user
        Return the rating parameters of idea by user

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_idea_rating_parameters_with_http_info(user_id, idea_stage, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: user Id (required)
        :param str idea_stage:  /* Idea stages     1)under-consideration      2) shortlisted      3) accepted      4) prototyping  */ (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseString
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'idea_stage', 'requester_id', 'client_token', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_idea_rating_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_idea_rating_parameters`")
        # verify the required parameter 'idea_stage' is set
        if ('idea_stage' not in params) or (params['idea_stage'] is None):
            raise ValueError("Missing the required parameter `idea_stage` when calling `get_idea_rating_parameters`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_idea_rating_parameters`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_idea_rating_parameters`")

        resource_path = '/ideas/getIdeaRatingParameters'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'user_id' in params:
            query_params['userId'] = params['user_id']
        if 'idea_stage' in params:
            query_params['ideaStage'] = params['idea_stage']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseString',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_idea_ratings(self, user_id, idea_id, idea_stage, requester_id, client_token, **kwargs):
        """
        Get list of ideas that are rated by user 
        Return the rated ideas list

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_idea_ratings(user_id, idea_id, idea_stage, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: user Id (required)
        :param int idea_id: idea Id (required)
        :param str idea_stage:  /* Idea stages     1)under-consideration      2) shortlisted      3) accepted      4) prototyping  */ (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdeaUserRatingList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_idea_ratings_with_http_info(user_id, idea_id, idea_stage, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_idea_ratings_with_http_info(user_id, idea_id, idea_stage, requester_id, client_token, **kwargs)
            return data

    def get_idea_ratings_with_http_info(self, user_id, idea_id, idea_stage, requester_id, client_token, **kwargs):
        """
        Get list of ideas that are rated by user 
        Return the rated ideas list

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_idea_ratings_with_http_info(user_id, idea_id, idea_stage, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: user Id (required)
        :param int idea_id: idea Id (required)
        :param str idea_stage:  /* Idea stages     1)under-consideration      2) shortlisted      3) accepted      4) prototyping  */ (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdeaUserRatingList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'idea_id', 'idea_stage', 'requester_id', 'client_token', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_idea_ratings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_idea_ratings`")
        # verify the required parameter 'idea_id' is set
        if ('idea_id' not in params) or (params['idea_id'] is None):
            raise ValueError("Missing the required parameter `idea_id` when calling `get_idea_ratings`")
        # verify the required parameter 'idea_stage' is set
        if ('idea_stage' not in params) or (params['idea_stage'] is None):
            raise ValueError("Missing the required parameter `idea_stage` when calling `get_idea_ratings`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_idea_ratings`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_idea_ratings`")

        resource_path = '/ideas/getIdeaUserRating'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'user_id' in params:
            query_params['userId'] = params['user_id']
        if 'idea_id' in params:
            query_params['ideaId'] = params['idea_id']
        if 'idea_stage' in params:
            query_params['ideaStage'] = params['idea_stage']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseIdeaUserRatingList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_recommend_ideas(self, start, end, requester_id, client_token, **kwargs):
        """
        Get the list of recommended ideas
        Returns the list of recommended ideas 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_recommend_ideas(start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdeaList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_recommend_ideas_with_http_info(start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_recommend_ideas_with_http_info(start, end, requester_id, client_token, **kwargs)
            return data

    def get_recommend_ideas_with_http_info(self, start, end, requester_id, client_token, **kwargs):
        """
        Get the list of recommended ideas
        Returns the list of recommended ideas 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_recommend_ideas_with_http_info(start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdeaList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'end', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recommend_ideas" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_recommend_ideas`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_recommend_ideas`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_recommend_ideas`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_recommend_ideas`")

        resource_path = '/ideas/recommend'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseIdeaList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_top_ideas(self, start, end, requester_id, client_token, **kwargs):
        """
        Get the list of top ideas
        Return the list of top ideas

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_top_ideas(start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdeaList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_top_ideas_with_http_info(start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_top_ideas_with_http_info(start, end, requester_id, client_token, **kwargs)
            return data

    def get_top_ideas_with_http_info(self, start, end, requester_id, client_token, **kwargs):
        """
        Get the list of top ideas
        Return the list of top ideas

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_top_ideas_with_http_info(start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdeaList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'end', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_top_ideas" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_top_ideas`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_top_ideas`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_top_ideas`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_top_ideas`")

        resource_path = '/ideas/top'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseIdeaList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_user_ideas(self, user_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of ideas shared by user
        Returns the list of ideas shared by user

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_ideas(user_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId whose shared ideas want to get (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdeaList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_ideas_with_http_info(user_id, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_user_ideas_with_http_info(user_id, start, end, requester_id, client_token, **kwargs)
            return data

    def get_user_ideas_with_http_info(self, user_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of ideas shared by user
        Returns the list of ideas shared by user

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_ideas_with_http_info(user_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId whose shared ideas want to get (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdeaList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'start', 'end', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_ideas" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_user_ideas`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_user_ideas`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_user_ideas`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_user_ideas`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_user_ideas`")

        resource_path = '/ideas/{userId}/shared'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseIdeaList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_user_rate_ideas(self, user_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of ideas rated by user
        Return the list of ideas rated by user

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_rate_ideas(user_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId whose rated ideas want to get (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdeaList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_rate_ideas_with_http_info(user_id, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_user_rate_ideas_with_http_info(user_id, start, end, requester_id, client_token, **kwargs)
            return data

    def get_user_rate_ideas_with_http_info(self, user_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of ideas rated by user
        Return the list of ideas rated by user

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_rate_ideas_with_http_info(user_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId whose rated ideas want to get (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdeaList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'start', 'end', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_rate_ideas" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_user_rate_ideas`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_user_rate_ideas`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_user_rate_ideas`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_user_rate_ideas`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_user_rate_ideas`")

        resource_path = '/ideas/{userId}/rated'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseIdeaList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def rate_idea(self, user_id, idea_id, idea_stage, requester_id, client_token, **kwargs):
        """
        Rate an idea
        Allows the user to rate an idea. Returns the rated idea

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.rate_idea(user_id, idea_id, idea_stage, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: user Id (required)
        :param int idea_id: idea Id (required)
        :param str idea_stage:  /* Ideas stage      1)under-consideration      2) shortlisted      3) accepted      4) prototyping  */ (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdea
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.rate_idea_with_http_info(user_id, idea_id, idea_stage, requester_id, client_token, **kwargs)
        else:
            (data) = self.rate_idea_with_http_info(user_id, idea_id, idea_stage, requester_id, client_token, **kwargs)
            return data

    def rate_idea_with_http_info(self, user_id, idea_id, idea_stage, requester_id, client_token, **kwargs):
        """
        Rate an idea
        Allows the user to rate an idea. Returns the rated idea

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.rate_idea_with_http_info(user_id, idea_id, idea_stage, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: user Id (required)
        :param int idea_id: idea Id (required)
        :param str idea_stage:  /* Ideas stage      1)under-consideration      2) shortlisted      3) accepted      4) prototyping  */ (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdea
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'idea_id', 'idea_stage', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rate_idea" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `rate_idea`")
        # verify the required parameter 'idea_id' is set
        if ('idea_id' not in params) or (params['idea_id'] is None):
            raise ValueError("Missing the required parameter `idea_id` when calling `rate_idea`")
        # verify the required parameter 'idea_stage' is set
        if ('idea_stage' not in params) or (params['idea_stage'] is None):
            raise ValueError("Missing the required parameter `idea_stage` when calling `rate_idea`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `rate_idea`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `rate_idea`")

        resource_path = '/ideas/rateIdea'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'user_id' in params:
            form_params.append(('userId', params['user_id']))
        if 'idea_id' in params:
            form_params.append(('ideaId', params['idea_id']))
        if 'idea_stage' in params:
            form_params.append(('ideaStage', params['idea_stage']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        #header_params['Content-Type'] = self.api_client.\
         #   select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

        header_params['Content-Type'] = 'application/x-www-form-urlencoded'
        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseIdea',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def rate_idea_0(self, user_id, idea_id, idea_stage, parameter, rating, requester_id, client_token, **kwargs):
        """
        Give rating on idea
        Allows the user to give a rating on idea. Returns the rated idea

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.rate_idea_0(user_id, idea_id, idea_stage, parameter, rating, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: user Id (required)
        :param int idea_id: idea Id (required)
        :param str idea_stage:  /* Idea stages      1)under-consideration      2) shortlisted      3) accepted      4) prototyping  */ (required)
        :param str parameter: parameter (required)
        :param float rating: rating (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdea
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.rate_idea_0_with_http_info(user_id, idea_id, idea_stage, parameter, rating, requester_id, client_token, **kwargs)
        else:
            (data) = self.rate_idea_0_with_http_info(user_id, idea_id, idea_stage, parameter, rating, requester_id, client_token, **kwargs)
            return data

    def rate_idea_0_with_http_info(self, user_id, idea_id, idea_stage, parameter, rating, requester_id, client_token, **kwargs):
        """
        Give rating on idea
        Allows the user to give a rating on idea. Returns the rated idea

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.rate_idea_0_with_http_info(user_id, idea_id, idea_stage, parameter, rating, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: user Id (required)
        :param int idea_id: idea Id (required)
        :param str idea_stage:  /* Idea stages      1)under-consideration      2) shortlisted      3) accepted      4) prototyping  */ (required)
        :param str parameter: parameter (required)
        :param float rating: rating (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdea
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'idea_id', 'idea_stage', 'parameter', 'rating', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rate_idea_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `rate_idea_0`")
        # verify the required parameter 'idea_id' is set
        if ('idea_id' not in params) or (params['idea_id'] is None):
            raise ValueError("Missing the required parameter `idea_id` when calling `rate_idea_0`")
        # verify the required parameter 'idea_stage' is set
        if ('idea_stage' not in params) or (params['idea_stage'] is None):
            raise ValueError("Missing the required parameter `idea_stage` when calling `rate_idea_0`")
        # verify the required parameter 'parameter' is set
        if ('parameter' not in params) or (params['parameter'] is None):
            raise ValueError("Missing the required parameter `parameter` when calling `rate_idea_0`")
        # verify the required parameter 'rating' is set
        if ('rating' not in params) or (params['rating'] is None):
            raise ValueError("Missing the required parameter `rating` when calling `rate_idea_0`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `rate_idea_0`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `rate_idea_0`")

        resource_path = '/ideas/rateIdeaByParameter'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'user_id' in params:
            query_params['userId'] = params['user_id']
        if 'idea_id' in params:
            query_params['ideaId'] = params['idea_id']
        if 'idea_stage' in params:
            query_params['ideaStage'] = params['idea_stage']
        if 'parameter' in params:
            query_params['parameter'] = params['parameter']
        if 'rating' in params:
            query_params['rating'] = params['rating']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseIdea',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def search_ideas(self, search_text, start, end, requester_id, client_token, **kwargs):
        """
        Get list of matching ideas
        Returns the list of matching ideas

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_ideas(search_text, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search_text: Enter text to be searched (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdeaList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_ideas_with_http_info(search_text, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.search_ideas_with_http_info(search_text, start, end, requester_id, client_token, **kwargs)
            return data

    def search_ideas_with_http_info(self, search_text, start, end, requester_id, client_token, **kwargs):
        """
        Get list of matching ideas
        Returns the list of matching ideas

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_ideas_with_http_info(search_text, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search_text: Enter text to be searched (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdeaList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_text', 'start', 'end', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_ideas" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_text' is set
        if ('search_text' not in params) or (params['search_text'] is None):
            raise ValueError("Missing the required parameter `search_text` when calling `search_ideas`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `search_ideas`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `search_ideas`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `search_ideas`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `search_ideas`")

        resource_path = '/ideas/search'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'search_text' in params:
            query_params['searchText'] = params['search_text']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseIdeaList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def share_form_idea(self, title, description, group_id, file, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Share Idea with attachments
        Allows the user to share idea with attachments

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.share_form_idea(title, description, group_id, file, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str title: title (required)
        :param str description: description (required)
        :param str group_id: groupId (required)
        :param file file: file (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :return: VerveResponseIdea
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.share_form_idea_with_http_info(title, description, group_id, file, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.share_form_idea_with_http_info(title, description, group_id, file, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def share_form_idea_with_http_info(self, title, description, group_id, file, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Share Idea with attachments
        Allows the user to share idea with attachments

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.share_form_idea_with_http_info(title, description, group_id, file, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str title: title (required)
        :param str description: description (required)
        :param str group_id: groupId (required)
        :param file file: file (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :return: VerveResponseIdea
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title', 'description', 'group_id', 'file', 'logged_in_user_id', 'access_token', 'client_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method share_form_idea" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'title' is set
        if ('title' not in params) or (params['title'] is None):
            raise ValueError("Missing the required parameter `title` when calling `share_form_idea`")
        # verify the required parameter 'description' is set
        if ('description' not in params) or (params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `share_form_idea`")
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `share_form_idea`")
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `share_form_idea`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `share_form_idea`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `share_form_idea`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `share_form_idea`")

        resource_path = '/ideas/attachment'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'group_id' in params:
            form_params.append(('groupId', params['group_id']))
        if 'file' in params:
            local_var_files['file'] = params['file']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseIdea',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def share_idea(self, requester_id, client_token, **kwargs):
        """
        Share idea  
        This service allows a user to share a idea. The following fields(key:value) are required to be present in the Idea JSON object. Refer to the Model & Model Schema of the expected JSON Object for the body of this API.  /*  **Required fields**      1. ideaTitle      2. ideaDescription      3. group: { groupId }  */

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.share_idea(requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param Idea body: 
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdea
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.share_idea_with_http_info(requester_id, client_token, **kwargs)
        else:
            (data) = self.share_idea_with_http_info(requester_id, client_token, **kwargs)
            return data

    def share_idea_with_http_info(self, requester_id, client_token, **kwargs):
        """
        Share idea  
        This service allows a user to share a idea. The following fields(key:value) are required to be present in the Idea JSON object. Refer to the Model & Model Schema of the expected JSON Object for the body of this API.  /*  **Required fields**      1. ideaTitle      2. ideaDescription      3. group: { groupId }  */

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.share_idea_with_http_info(requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param Idea body: 
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdea
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['requester_id', 'client_token', 'body', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method share_idea" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `share_idea`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `share_idea`")

        resource_path = '/ideas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseIdea',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def share_idea_comment(self, idea_id, requester_id, client_token, **kwargs):
        """
        Comment on shared idea
        This service allows a user to comment on a idea. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model & Model Schema of the expected JSON Object for the body of this API. /* **Required fields**     1. ideaId (Path Parameter)     2. commentText  */

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.share_idea_comment(idea_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int idea_id: idea Id (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param Comment body: 
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseComment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.share_idea_comment_with_http_info(idea_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.share_idea_comment_with_http_info(idea_id, requester_id, client_token, **kwargs)
            return data

    def share_idea_comment_with_http_info(self, idea_id, requester_id, client_token, **kwargs):
        """
        Comment on shared idea
        This service allows a user to comment on a idea. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model & Model Schema of the expected JSON Object for the body of this API. /* **Required fields**     1. ideaId (Path Parameter)     2. commentText  */

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.share_idea_comment_with_http_info(idea_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int idea_id: idea Id (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param Comment body: 
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseComment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idea_id', 'requester_id', 'client_token', 'body', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method share_idea_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idea_id' is set
        if ('idea_id' not in params) or (params['idea_id'] is None):
            raise ValueError("Missing the required parameter `idea_id` when calling `share_idea_comment`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `share_idea_comment`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `share_idea_comment`")

        resource_path = '/ideas/{ideaId}/comments'.replace('{format}', 'json')
        path_params = {}
        if 'idea_id' in params:
            path_params['ideaId'] = params['idea_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseComment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def unfollow_idea(self, idea_id, requester_id, client_token, **kwargs):
        """
        Unfollow idea
        Allows the user to unfollow idea. Returns the unfollowed idea

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unfollow_idea(idea_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int idea_id: idea Id (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdea
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.unfollow_idea_with_http_info(idea_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.unfollow_idea_with_http_info(idea_id, requester_id, client_token, **kwargs)
            return data

    def unfollow_idea_with_http_info(self, idea_id, requester_id, client_token, **kwargs):
        """
        Unfollow idea
        Allows the user to unfollow idea. Returns the unfollowed idea

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unfollow_idea_with_http_info(idea_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int idea_id: idea Id (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdea
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idea_id', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unfollow_idea" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idea_id' is set
        if ('idea_id' not in params) or (params['idea_id'] is None):
            raise ValueError("Missing the required parameter `idea_id` when calling `unfollow_idea`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `unfollow_idea`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `unfollow_idea`")

        resource_path = '/ideas/{ideaId}/unfollow'.replace('{format}', 'json')
        path_params = {}
        if 'idea_id' in params:
            path_params['ideaId'] = params['idea_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseIdea',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_commet(self, comment_id, comment_text, requester_id, client_token, **kwargs):
        """
        Update comment
        Allows the user to update comment. Returns the updated comment

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_commet(comment_id, comment_text, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int comment_id: commentId (required)
        :param str comment_text: Comment text (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseComment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_commet_with_http_info(comment_id, comment_text, requester_id, client_token, **kwargs)
        else:
            (data) = self.update_commet_with_http_info(comment_id, comment_text, requester_id, client_token, **kwargs)
            return data

    def update_commet_with_http_info(self, comment_id, comment_text, requester_id, client_token, **kwargs):
        """
        Update comment
        Allows the user to update comment. Returns the updated comment

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_commet_with_http_info(comment_id, comment_text, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int comment_id: commentId (required)
        :param str comment_text: Comment text (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseComment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['comment_id', 'comment_text', 'requester_id', 'client_token', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_commet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params) or (params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `update_commet`")
        # verify the required parameter 'comment_text' is set
        if ('comment_text' not in params) or (params['comment_text'] is None):
            raise ValueError("Missing the required parameter `comment_text` when calling `update_commet`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `update_commet`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `update_commet`")

        resource_path = '/ideas/comments/{commentId}'.replace('{format}', 'json')
        path_params = {}
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'comment_text' in params:
            form_params.append(('commentText', params['comment_text']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseComment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_idea(self, idea_id, idea_title, idea_description, requester_id, client_token, **kwargs):
        """
        Update idea
        Allows the user to update idea. Returns the updated idea

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_idea(idea_id, idea_title, idea_description, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int idea_id: ideaId (required)
        :param str idea_title: Idea Title (required)
        :param str idea_description: Describe Idea (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdea
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_idea_with_http_info(idea_id, idea_title, idea_description, requester_id, client_token, **kwargs)
        else:
            (data) = self.update_idea_with_http_info(idea_id, idea_title, idea_description, requester_id, client_token, **kwargs)
            return data

    def update_idea_with_http_info(self, idea_id, idea_title, idea_description, requester_id, client_token, **kwargs):
        """
        Update idea
        Allows the user to update idea. Returns the updated idea

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_idea_with_http_info(idea_id, idea_title, idea_description, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int idea_id: ideaId (required)
        :param str idea_title: Idea Title (required)
        :param str idea_description: Describe Idea (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseIdea
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idea_id', 'idea_title', 'idea_description', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_idea" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idea_id' is set
        if ('idea_id' not in params) or (params['idea_id'] is None):
            raise ValueError("Missing the required parameter `idea_id` when calling `update_idea`")
        # verify the required parameter 'idea_title' is set
        if ('idea_title' not in params) or (params['idea_title'] is None):
            raise ValueError("Missing the required parameter `idea_title` when calling `update_idea`")
        # verify the required parameter 'idea_description' is set
        if ('idea_description' not in params) or (params['idea_description'] is None):
            raise ValueError("Missing the required parameter `idea_description` when calling `update_idea`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `update_idea`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `update_idea`")

        resource_path = '/ideas/{ideaId}'.replace('{format}', 'json')
        path_params = {}
        if 'idea_id' in params:
            path_params['ideaId'] = params['idea_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'idea_title' in params:
            form_params.append(('ideaTitle', params['idea_title']))
        if 'idea_description' in params:
            form_params.append(('ideaDescription', params['idea_description']))
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseIdea',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
