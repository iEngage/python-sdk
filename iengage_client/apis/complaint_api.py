# coding: utf-8

"""
    Stakeholder engagement API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ComplaintApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_complaint(self, category_id, complaint_title, complaint_description, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Share complaint without attachment
        Allows the user to share complaint. Returns complaint
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_complaint(category_id, complaint_title, complaint_description, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str complaint_title: Complaint Title (required)
        :param str complaint_description: Describe complaint (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :return: VerveResponseComplaint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_complaint_with_http_info(category_id, complaint_title, complaint_description, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.add_complaint_with_http_info(category_id, complaint_title, complaint_description, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def add_complaint_with_http_info(self, category_id, complaint_title, complaint_description, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Share complaint without attachment
        Allows the user to share complaint. Returns complaint
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_complaint_with_http_info(category_id, complaint_title, complaint_description, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str complaint_title: Complaint Title (required)
        :param str complaint_description: Describe complaint (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :return: VerveResponseComplaint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id', 'complaint_title', 'complaint_description', 'logged_in_user_id', 'access_token', 'client_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_complaint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `add_complaint`")
        # verify the required parameter 'complaint_title' is set
        if ('complaint_title' not in params) or (params['complaint_title'] is None):
            raise ValueError("Missing the required parameter `complaint_title` when calling `add_complaint`")
        # verify the required parameter 'complaint_description' is set
        if ('complaint_description' not in params) or (params['complaint_description'] is None):
            raise ValueError("Missing the required parameter `complaint_description` when calling `add_complaint`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `add_complaint`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `add_complaint`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `add_complaint`")


        collection_formats = {}

        resource_path = '/complaints'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'category_id' in params:
            form_params.append(('categoryId', params['category_id']))
        if 'complaint_title' in params:
            form_params.append(('complaintTitle', params['complaint_title']))
        if 'complaint_description' in params:
            form_params.append(('complaintDescription', params['complaint_description']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseComplaint',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def add_complaint_0(self, body, body2, body3, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Share complaint with attachment
        Allows the user to share complaints. Returns the complaint object
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_complaint_0(body, body2, body3, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int body: categoryId (required)
        :param str body2: complaintTitle (required)
        :param str body3: complaintDescription (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param list[Attachment] body4:
        :return: VerveResponseComplaint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_complaint_0_with_http_info(body, body2, body3, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.add_complaint_0_with_http_info(body, body2, body3, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def add_complaint_0_with_http_info(self, body, body2, body3, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Share complaint with attachment
        Allows the user to share complaints. Returns the complaint object
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_complaint_0_with_http_info(body, body2, body3, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int body: categoryId (required)
        :param str body2: complaintTitle (required)
        :param str body3: complaintDescription (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param list[Attachment] body4:
        :return: VerveResponseComplaint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'body2', 'body3', 'logged_in_user_id', 'access_token', 'client_token', 'body4']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_complaint_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_complaint_0`")
        # verify the required parameter 'body2' is set
        if ('body2' not in params) or (params['body2'] is None):
            raise ValueError("Missing the required parameter `body2` when calling `add_complaint_0`")
        # verify the required parameter 'body3' is set
        if ('body3' not in params) or (params['body3'] is None):
            raise ValueError("Missing the required parameter `body3` when calling `add_complaint_0`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `add_complaint_0`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `add_complaint_0`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `add_complaint_0`")


        collection_formats = {}

        resource_path = '/complaints/attachment'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body4' in params:
            body_params = params['body4']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseComplaint',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def add_solution(self, complaint_id, solution, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Share solution on complaint
        Allows the user to share a solution on complaint
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_solution(complaint_id, solution, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param str solution: solution (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/><b>A) Available values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/>4)complaintId<br/>5)solvingUser<br/>6)isMarkedSolution<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_solution_with_http_info(complaint_id, solution, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.add_solution_with_http_info(complaint_id, solution, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def add_solution_with_http_info(self, complaint_id, solution, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Share solution on complaint
        Allows the user to share a solution on complaint
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_solution_with_http_info(complaint_id, solution, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param str solution: solution (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/><b>A) Available values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/>4)complaintId<br/>5)solvingUser<br/>6)isMarkedSolution<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['complaint_id', 'solution', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_solution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'complaint_id' is set
        if ('complaint_id' not in params) or (params['complaint_id'] is None):
            raise ValueError("Missing the required parameter `complaint_id` when calling `add_solution`")
        # verify the required parameter 'solution' is set
        if ('solution' not in params) or (params['solution'] is None):
            raise ValueError("Missing the required parameter `solution` when calling `add_solution`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `add_solution`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `add_solution`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `add_solution`")


        collection_formats = {}

        resource_path = '/complaints/{complaintId}/solutions'.replace('{format}', 'json')
        path_params = {}
        if 'complaint_id' in params:
            path_params['complaintId'] = params['complaint_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'solution' in params:
            form_params.append(('solution', params['solution']))
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseSolution',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_complaint_category(self, name, description, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Create complaint category
        Allows the user to create complaint category. Returns the created complaint category
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_complaint_category(name, description, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Name (required)
        :param str description: description (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int organization_id: OrganizationId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2) categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseComplaintCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_complaint_category_with_http_info(name, description, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.create_complaint_category_with_http_info(name, description, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def create_complaint_category_with_http_info(self, name, description, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Create complaint category
        Allows the user to create complaint category. Returns the created complaint category
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_complaint_category_with_http_info(name, description, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Name (required)
        :param str description: description (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int organization_id: OrganizationId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2) categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseComplaintCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'description', 'logged_in_user_id', 'access_token', 'client_token', 'organization_id', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_complaint_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_complaint_category`")
        # verify the required parameter 'description' is set
        if ('description' not in params) or (params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `create_complaint_category`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `create_complaint_category`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `create_complaint_category`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `create_complaint_category`")


        collection_formats = {}

        resource_path = '/complaints/categories'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'organization_id' in params:
            form_params.append(('OrganizationId', params['organization_id']))
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseComplaintCategory',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_complaint(self, complaint_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Delete complaint
        Allows the user to delete complaint. Returns the deleted complaint
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_complaint(complaint_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_complaint_with_http_info(complaint_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.delete_complaint_with_http_info(complaint_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def delete_complaint_with_http_info(self, complaint_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Delete complaint
        Allows the user to delete complaint. Returns the deleted complaint
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_complaint_with_http_info(complaint_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['complaint_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_complaint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'complaint_id' is set
        if ('complaint_id' not in params) or (params['complaint_id'] is None):
            raise ValueError("Missing the required parameter `complaint_id` when calling `delete_complaint`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `delete_complaint`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `delete_complaint`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `delete_complaint`")


        collection_formats = {}

        resource_path = '/complaints/{complaintId}'.replace('{format}', 'json')
        path_params = {}
        if 'complaint_id' in params:
            path_params['complaintId'] = params['complaint_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseComplaint',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_complaint_category(self, category_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Delete complaint cotegory
        Returns the deleted complaint category
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_complaint_category(category_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2) categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseComplaintCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_complaint_category_with_http_info(category_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.delete_complaint_category_with_http_info(category_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def delete_complaint_category_with_http_info(self, category_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Delete complaint cotegory
        Returns the deleted complaint category
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_complaint_category_with_http_info(category_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2) categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseComplaintCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_complaint_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `delete_complaint_category`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `delete_complaint_category`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `delete_complaint_category`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `delete_complaint_category`")


        collection_formats = {}

        resource_path = '/complaints/categories/{categoryId}'.replace('{format}', 'json')
        path_params = {}
        if 'category_id' in params:
            path_params['categoryId'] = params['category_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseComplaintCategory',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_solution(self, solution_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Delete solution
        Allows the user to delete solution. Returns the deleted solution
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_solution(solution_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int solution_id: solutionId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/><b>A) Available values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/>4)complaintId<br/>5)solvingUser<br/>6)isMarkedSolution<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_solution_with_http_info(solution_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.delete_solution_with_http_info(solution_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def delete_solution_with_http_info(self, solution_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Delete solution
        Allows the user to delete solution. Returns the deleted solution
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_solution_with_http_info(solution_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int solution_id: solutionId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/><b>A) Available values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/>4)complaintId<br/>5)solvingUser<br/>6)isMarkedSolution<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['solution_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_solution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'solution_id' is set
        if ('solution_id' not in params) or (params['solution_id'] is None):
            raise ValueError("Missing the required parameter `solution_id` when calling `delete_solution`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `delete_solution`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `delete_solution`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `delete_solution`")


        collection_formats = {}

        resource_path = '/complaints/solutions/{solutionId}'.replace('{format}', 'json')
        path_params = {}
        if 'solution_id' in params:
            path_params['solutionId'] = params['solution_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseSolution',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def dislike_solution(self, complaint_id, solution_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Dislike Solution
        Allows the user to dislike the solution. Returns the disliked solution
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.dislike_solution(complaint_id, solution_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param int solution_id: solutionId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/><b>A) Available values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/>4)complaintId<br/>5)solvingUser<br/>6)isMarkedSolution<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.dislike_solution_with_http_info(complaint_id, solution_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.dislike_solution_with_http_info(complaint_id, solution_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def dislike_solution_with_http_info(self, complaint_id, solution_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Dislike Solution
        Allows the user to dislike the solution. Returns the disliked solution
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.dislike_solution_with_http_info(complaint_id, solution_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param int solution_id: solutionId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/><b>A) Available values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/>4)complaintId<br/>5)solvingUser<br/>6)isMarkedSolution<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['complaint_id', 'solution_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dislike_solution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'complaint_id' is set
        if ('complaint_id' not in params) or (params['complaint_id'] is None):
            raise ValueError("Missing the required parameter `complaint_id` when calling `dislike_solution`")
        # verify the required parameter 'solution_id' is set
        if ('solution_id' not in params) or (params['solution_id'] is None):
            raise ValueError("Missing the required parameter `solution_id` when calling `dislike_solution`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `dislike_solution`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `dislike_solution`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `dislike_solution`")


        collection_formats = {}

        resource_path = '/complaints/{complaintId}/solutions/{solutionId}/dislike'.replace('{format}', 'json')
        path_params = {}
        if 'complaint_id' in params:
            path_params['complaintId'] = params['complaint_id']
        if 'solution_id' in params:
            path_params['solutionId'] = params['solution_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseSolution',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_complaint(self, complaint_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get complaint by id
        Returns the complaint by id
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_complaint(complaint_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_complaint_with_http_info(complaint_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_complaint_with_http_info(complaint_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_complaint_with_http_info(self, complaint_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get complaint by id
        Returns the complaint by id
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_complaint_with_http_info(complaint_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['complaint_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_complaint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'complaint_id' is set
        if ('complaint_id' not in params) or (params['complaint_id'] is None):
            raise ValueError("Missing the required parameter `complaint_id` when calling `get_complaint`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_complaint`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_complaint`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_complaint`")


        collection_formats = {}

        resource_path = '/complaints/{complaintId}'.replace('{format}', 'json')
        path_params = {}
        if 'complaint_id' in params:
            path_params['complaintId'] = params['complaint_id']

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseComplaint',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_complaint_categories(self, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of complaint category
        Returns the list of complaint category
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_complaint_categories(start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2) categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseComplaintCategoryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_complaint_categories_with_http_info(start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_complaint_categories_with_http_info(start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_complaint_categories_with_http_info(self, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of complaint category
        Returns the list of complaint category
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_complaint_categories_with_http_info(start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2) categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseComplaintCategoryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_complaint_categories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_complaint_categories`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_complaint_categories`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_complaint_categories`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_complaint_categories`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_complaint_categories`")


        collection_formats = {}

        resource_path = '/complaints/categories'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseComplaintCategoryList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_complaints_for_user(self, complaint_status, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of all complaint visible for user
        Returns the list of all complaints visible for user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_complaints_for_user(complaint_status, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str complaint_status: Complaint status <br/> 1) ALL <br/> 2)  UNREPLIED <br/> 3)  REPLIED <br/> 4)  CLOSED (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int category_id: categoryId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaintList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_complaints_for_user_with_http_info(complaint_status, start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_complaints_for_user_with_http_info(complaint_status, start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_complaints_for_user_with_http_info(self, complaint_status, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of all complaint visible for user
        Returns the list of all complaints visible for user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_complaints_for_user_with_http_info(complaint_status, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str complaint_status: Complaint status <br/> 1) ALL <br/> 2)  UNREPLIED <br/> 3)  REPLIED <br/> 4)  CLOSED (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int category_id: categoryId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaintList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['complaint_status', 'start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'category_id', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_complaints_for_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'complaint_status' is set
        if ('complaint_status' not in params) or (params['complaint_status'] is None):
            raise ValueError("Missing the required parameter `complaint_status` when calling `get_complaints_for_user`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_complaints_for_user`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_complaints_for_user`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_complaints_for_user`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_complaints_for_user`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_complaints_for_user`")


        collection_formats = {}

        resource_path = '/complaints'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'complaint_status' in params:
            query_params['complaintStatus'] = params['complaint_status']
        if 'category_id' in params:
            query_params['categoryId'] = params['category_id']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseComplaintList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_friends_complaints(self, complaint_status, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of complaints shared by your friends
        Returns the list of complaints shared by friends
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_friends_complaints(complaint_status, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str complaint_status: Complaint status <br/> 1) ALL <br/> 2)  UNREPLIED <br/> 3)  REPLIED <br/> 4)  CLOSED (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int category_id: categoryId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaintList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_friends_complaints_with_http_info(complaint_status, start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_friends_complaints_with_http_info(complaint_status, start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_friends_complaints_with_http_info(self, complaint_status, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of complaints shared by your friends
        Returns the list of complaints shared by friends
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_friends_complaints_with_http_info(complaint_status, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str complaint_status: Complaint status <br/> 1) ALL <br/> 2)  UNREPLIED <br/> 3)  REPLIED <br/> 4)  CLOSED (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int category_id: categoryId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaintList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['complaint_status', 'start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'category_id', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_friends_complaints" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'complaint_status' is set
        if ('complaint_status' not in params) or (params['complaint_status'] is None):
            raise ValueError("Missing the required parameter `complaint_status` when calling `get_friends_complaints`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_friends_complaints`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_friends_complaints`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_friends_complaints`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_friends_complaints`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_friends_complaints`")


        collection_formats = {}

        resource_path = '/complaints/friends'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'complaint_status' in params:
            query_params['complaintStatus'] = params['complaint_status']
        if 'category_id' in params:
            query_params['categoryId'] = params['category_id']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseComplaintList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_recommend_complaint(self, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of recommended complaints
        Returns the list of recommended complaints
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_recommend_complaint(start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaintList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_recommend_complaint_with_http_info(start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_recommend_complaint_with_http_info(start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_recommend_complaint_with_http_info(self, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of recommended complaints
        Returns the list of recommended complaints
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_recommend_complaint_with_http_info(start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaintList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recommend_complaint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_recommend_complaint`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_recommend_complaint`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_recommend_complaint`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_recommend_complaint`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_recommend_complaint`")


        collection_formats = {}

        resource_path = '/complaints/recommend'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseComplaintList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_recommended_complaints_from_db(self, user_id, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of recommended complaints from DB
        Returns the list of recommended complaints from DB
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_recommended_complaints_from_db(user_id, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaintList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_recommended_complaints_from_db_with_http_info(user_id, start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_recommended_complaints_from_db_with_http_info(user_id, start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_recommended_complaints_from_db_with_http_info(self, user_id, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of recommended complaints from DB
        Returns the list of recommended complaints from DB
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_recommended_complaints_from_db_with_http_info(user_id, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaintList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recommended_complaints_from_db" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_recommended_complaints_from_db`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_recommended_complaints_from_db`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_recommended_complaints_from_db`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_recommended_complaints_from_db`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_recommended_complaints_from_db`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_recommended_complaints_from_db`")


        collection_formats = {}

        resource_path = '/complaints/{userId}/recommendedComplaints'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseComplaintList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_recommended_users_from_db(self, complaint_id, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of recommended Users from DB
        Returns the list of recommended users from DB
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_recommended_users_from_db(complaint_id, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)userId<br/>2)firstName<br/>3)lastName<br/>4)profileImage<br/><b>A) Available values-</b><br/>1)userId<br/>2)firstName<br/>3)lastName<br/>4)emailId<br/>5)profileImage<br/>6)birthDate<br/>7)currentUserFollowing<br/>8)currentUserFriend<br/>9)equityScore
        :return: VerveResponseUserList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_recommended_users_from_db_with_http_info(complaint_id, start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_recommended_users_from_db_with_http_info(complaint_id, start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_recommended_users_from_db_with_http_info(self, complaint_id, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of recommended Users from DB
        Returns the list of recommended users from DB
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_recommended_users_from_db_with_http_info(complaint_id, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)userId<br/>2)firstName<br/>3)lastName<br/>4)profileImage<br/><b>A) Available values-</b><br/>1)userId<br/>2)firstName<br/>3)lastName<br/>4)emailId<br/>5)profileImage<br/>6)birthDate<br/>7)currentUserFollowing<br/>8)currentUserFriend<br/>9)equityScore
        :return: VerveResponseUserList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['complaint_id', 'start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recommended_users_from_db" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'complaint_id' is set
        if ('complaint_id' not in params) or (params['complaint_id'] is None):
            raise ValueError("Missing the required parameter `complaint_id` when calling `get_recommended_users_from_db`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_recommended_users_from_db`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_recommended_users_from_db`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_recommended_users_from_db`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_recommended_users_from_db`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_recommended_users_from_db`")


        collection_formats = {}

        resource_path = '/complaints/{complaintId}/recommendedUsers'.replace('{format}', 'json')
        path_params = {}
        if 'complaint_id' in params:
            path_params['complaintId'] = params['complaint_id']

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseUserList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_solutions(self, complaint_id, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of solutions by ComplaintId
        Return the list of solutions
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_solutions(complaint_id, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/><b>A) Available values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/>4)complaintId<br/>5)solvingUser<br/>6)isMarkedSolution<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseSolutionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_solutions_with_http_info(complaint_id, start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_solutions_with_http_info(complaint_id, start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_solutions_with_http_info(self, complaint_id, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of solutions by ComplaintId
        Return the list of solutions
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_solutions_with_http_info(complaint_id, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/><b>A) Available values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/>4)complaintId<br/>5)solvingUser<br/>6)isMarkedSolution<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseSolutionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['complaint_id', 'start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_solutions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'complaint_id' is set
        if ('complaint_id' not in params) or (params['complaint_id'] is None):
            raise ValueError("Missing the required parameter `complaint_id` when calling `get_solutions`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_solutions`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_solutions`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_solutions`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_solutions`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_solutions`")


        collection_formats = {}

        resource_path = '/complaints/{complaintId}/solutions'.replace('{format}', 'json')
        path_params = {}
        if 'complaint_id' in params:
            path_params['complaintId'] = params['complaint_id']

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseSolutionList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_user_complaints(self, user_id, complaint_status, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of complaints shared by user
        Returns the list of complaints shared by the user himself
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_complaints(user_id, complaint_status, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId (required)
        :param str complaint_status: Complaint status <br/> 1) ALL <br/> 2)  UNREPLIED <br/> 3)  REPLIED <br/> 4)  CLOSED (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int category_id: categoryId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaintList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_complaints_with_http_info(user_id, complaint_status, start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_user_complaints_with_http_info(user_id, complaint_status, start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_user_complaints_with_http_info(self, user_id, complaint_status, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of complaints shared by user
        Returns the list of complaints shared by the user himself
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_complaints_with_http_info(user_id, complaint_status, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId (required)
        :param str complaint_status: Complaint status <br/> 1) ALL <br/> 2)  UNREPLIED <br/> 3)  REPLIED <br/> 4)  CLOSED (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int category_id: categoryId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaintList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'complaint_status', 'start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'category_id', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_complaints" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_user_complaints`")
        # verify the required parameter 'complaint_status' is set
        if ('complaint_status' not in params) or (params['complaint_status'] is None):
            raise ValueError("Missing the required parameter `complaint_status` when calling `get_user_complaints`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_user_complaints`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_user_complaints`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_user_complaints`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_user_complaints`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_user_complaints`")


        collection_formats = {}

        resource_path = '/complaints/{userId}/shared'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'complaint_status' in params:
            query_params['complaintStatus'] = params['complaint_status']
        if 'category_id' in params:
            query_params['categoryId'] = params['category_id']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseComplaintList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_user_subscribed_complaint_categories(self, user_id, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of Complaint categories subscribed by user
        Returns the list of complaint categories subscribed by user himself
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_subscribed_complaint_categories(user_id, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2) categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseComplaintCategoryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_subscribed_complaint_categories_with_http_info(user_id, start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_user_subscribed_complaint_categories_with_http_info(user_id, start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_user_subscribed_complaint_categories_with_http_info(self, user_id, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of Complaint categories subscribed by user
        Returns the list of complaint categories subscribed by user himself
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_subscribed_complaint_categories_with_http_info(user_id, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2) categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseComplaintCategoryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_subscribed_complaint_categories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_user_subscribed_complaint_categories`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_user_subscribed_complaint_categories`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_user_subscribed_complaint_categories`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_user_subscribed_complaint_categories`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_user_subscribed_complaint_categories`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_user_subscribed_complaint_categories`")


        collection_formats = {}

        resource_path = '/complaints/categories/{userId}/subscribe'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseComplaintCategoryList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_user_subscribed_complaints(self, user_id, complaint_status, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of complaints subscribed by user
        Returns the list of complaints subscribed by user himself
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_subscribed_complaints(user_id, complaint_status, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId (required)
        :param str complaint_status: Complaint status <br/> 1) ALL <br/> 2)  UNREPLIED <br/> 3)  REPLIED <br/> 4)  CLOSED (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int category_id: categoryId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaintList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_subscribed_complaints_with_http_info(user_id, complaint_status, start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.get_user_subscribed_complaints_with_http_info(user_id, complaint_status, start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def get_user_subscribed_complaints_with_http_info(self, user_id, complaint_status, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of complaints subscribed by user
        Returns the list of complaints subscribed by user himself
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_subscribed_complaints_with_http_info(user_id, complaint_status, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId (required)
        :param str complaint_status: Complaint status <br/> 1) ALL <br/> 2)  UNREPLIED <br/> 3)  REPLIED <br/> 4)  CLOSED (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int category_id: categoryId
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaintList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'complaint_status', 'start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'category_id', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_subscribed_complaints" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_user_subscribed_complaints`")
        # verify the required parameter 'complaint_status' is set
        if ('complaint_status' not in params) or (params['complaint_status'] is None):
            raise ValueError("Missing the required parameter `complaint_status` when calling `get_user_subscribed_complaints`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_user_subscribed_complaints`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_user_subscribed_complaints`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `get_user_subscribed_complaints`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_user_subscribed_complaints`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_user_subscribed_complaints`")


        collection_formats = {}

        resource_path = '/complaints/{userId}/subscribe'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'complaint_status' in params:
            query_params['complaintStatus'] = params['complaint_status']
        if 'category_id' in params:
            query_params['categoryId'] = params['category_id']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseComplaintList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def like_solution(self, complaint_id, solution_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Like solution
        Allows the user to like the solution. Returns the liked solution
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.like_solution(complaint_id, solution_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param int solution_id: solutionId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/><b>A) Available values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/>4)complaintId<br/>5)solvingUser<br/>6)isMarkedSolution<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.like_solution_with_http_info(complaint_id, solution_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.like_solution_with_http_info(complaint_id, solution_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def like_solution_with_http_info(self, complaint_id, solution_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Like solution
        Allows the user to like the solution. Returns the liked solution
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.like_solution_with_http_info(complaint_id, solution_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param int solution_id: solutionId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/><b>A) Available values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/>4)complaintId<br/>5)solvingUser<br/>6)isMarkedSolution<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['complaint_id', 'solution_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method like_solution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'complaint_id' is set
        if ('complaint_id' not in params) or (params['complaint_id'] is None):
            raise ValueError("Missing the required parameter `complaint_id` when calling `like_solution`")
        # verify the required parameter 'solution_id' is set
        if ('solution_id' not in params) or (params['solution_id'] is None):
            raise ValueError("Missing the required parameter `solution_id` when calling `like_solution`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `like_solution`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `like_solution`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `like_solution`")


        collection_formats = {}

        resource_path = '/complaints/{complaintId}/solutions/{solutionId}/like'.replace('{format}', 'json')
        path_params = {}
        if 'complaint_id' in params:
            path_params['complaintId'] = params['complaint_id']
        if 'solution_id' in params:
            path_params['solutionId'] = params['solution_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseSolution',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def mark_as_an_solution(self, complaint_id, solution_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Mark solution as a solution
        Allows the user to mark a solution. This means user is satisfied with the solution & the complaint will be closed
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.mark_as_an_solution(complaint_id, solution_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param int solution_id: solutionId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/><b>A) Available values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/>4)complaintId<br/>5)solvingUser<br/>6)isMarkedSolution<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.mark_as_an_solution_with_http_info(complaint_id, solution_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.mark_as_an_solution_with_http_info(complaint_id, solution_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def mark_as_an_solution_with_http_info(self, complaint_id, solution_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Mark solution as a solution
        Allows the user to mark a solution. This means user is satisfied with the solution & the complaint will be closed
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.mark_as_an_solution_with_http_info(complaint_id, solution_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param int solution_id: solutionId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/><b>A) Available values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/>4)complaintId<br/>5)solvingUser<br/>6)isMarkedSolution<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['complaint_id', 'solution_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_as_an_solution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'complaint_id' is set
        if ('complaint_id' not in params) or (params['complaint_id'] is None):
            raise ValueError("Missing the required parameter `complaint_id` when calling `mark_as_an_solution`")
        # verify the required parameter 'solution_id' is set
        if ('solution_id' not in params) or (params['solution_id'] is None):
            raise ValueError("Missing the required parameter `solution_id` when calling `mark_as_an_solution`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `mark_as_an_solution`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `mark_as_an_solution`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `mark_as_an_solution`")


        collection_formats = {}

        resource_path = '/complaints/{complaintId}/solutions/{solutionId}/mark'.replace('{format}', 'json')
        path_params = {}
        if 'complaint_id' in params:
            path_params['complaintId'] = params['complaint_id']
        if 'solution_id' in params:
            path_params['solutionId'] = params['solution_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseSolution',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def search_complaints(self, search_text, complaint_status, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of complaints by search
        Returns the list of matching complaints
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_complaints(search_text, complaint_status, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search_text: Enter text to be searched (required)
        :param str complaint_status: Complaint status <br/> 1) ALL <br/> 2)  UNREPLIED <br/> 3)  REPLIED <br/> 4)  CLOSED (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_complaints_with_http_info(search_text, complaint_status, start, end, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.search_complaints_with_http_info(search_text, complaint_status, start, end, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def search_complaints_with_http_info(self, search_text, complaint_status, start, end, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Get list of complaints by search
        Returns the list of matching complaints
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_complaints_with_http_info(search_text, complaint_status, start, end, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search_text: Enter text to be searched (required)
        :param str complaint_status: Complaint status <br/> 1) ALL <br/> 2)  UNREPLIED <br/> 3)  REPLIED <br/> 4)  CLOSED (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_text', 'complaint_status', 'start', 'end', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_complaints" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_text' is set
        if ('search_text' not in params) or (params['search_text'] is None):
            raise ValueError("Missing the required parameter `search_text` when calling `search_complaints`")
        # verify the required parameter 'complaint_status' is set
        if ('complaint_status' not in params) or (params['complaint_status'] is None):
            raise ValueError("Missing the required parameter `complaint_status` when calling `search_complaints`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `search_complaints`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `search_complaints`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `search_complaints`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `search_complaints`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `search_complaints`")


        collection_formats = {}

        resource_path = '/complaints/search'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'search_text' in params:
            query_params['searchText'] = params['search_text']
        if 'complaint_status' in params:
            query_params['complaintStatus'] = params['complaint_status']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseComplaint',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def subscribe_complaint(self, complaint_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Subscribe complaint
        Allows the user to subscribe a complaint. Returns the subscibed complaint
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.subscribe_complaint(complaint_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.subscribe_complaint_with_http_info(complaint_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.subscribe_complaint_with_http_info(complaint_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def subscribe_complaint_with_http_info(self, complaint_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Subscribe complaint
        Allows the user to subscribe a complaint. Returns the subscibed complaint
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.subscribe_complaint_with_http_info(complaint_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['complaint_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscribe_complaint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'complaint_id' is set
        if ('complaint_id' not in params) or (params['complaint_id'] is None):
            raise ValueError("Missing the required parameter `complaint_id` when calling `subscribe_complaint`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `subscribe_complaint`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `subscribe_complaint`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `subscribe_complaint`")


        collection_formats = {}

        resource_path = '/complaints/{complaintId}/subscribe'.replace('{format}', 'json')
        path_params = {}
        if 'complaint_id' in params:
            path_params['complaintId'] = params['complaint_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseComplaint',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def subscribe_complaint_category(self, category_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Subscribe complaint category
        Allows the user to subscribe complaint category. Returns the subscribed complaint category.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.subscribe_complaint_category(category_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2) categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseComplaintCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.subscribe_complaint_category_with_http_info(category_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.subscribe_complaint_category_with_http_info(category_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def subscribe_complaint_category_with_http_info(self, category_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Subscribe complaint category
        Allows the user to subscribe complaint category. Returns the subscribed complaint category.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.subscribe_complaint_category_with_http_info(category_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2) categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseComplaintCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscribe_complaint_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `subscribe_complaint_category`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `subscribe_complaint_category`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `subscribe_complaint_category`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `subscribe_complaint_category`")


        collection_formats = {}

        resource_path = '/complaints/categories/{categoryId}/subscribe'.replace('{format}', 'json')
        path_params = {}
        if 'category_id' in params:
            path_params['categoryId'] = params['category_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseComplaintCategory',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def unmark_as_an_solution(self, complaint_id, solution_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Unmark solution as a solution
        Allows the user to unmark a solution. This will remove the marked solution.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unmark_as_an_solution(complaint_id, solution_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param int solution_id: solutionId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/><b>A) Available values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/>4)complaintId<br/>5)solvingUser<br/>6)isMarkedSolution<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.unmark_as_an_solution_with_http_info(complaint_id, solution_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.unmark_as_an_solution_with_http_info(complaint_id, solution_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def unmark_as_an_solution_with_http_info(self, complaint_id, solution_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Unmark solution as a solution
        Allows the user to unmark a solution. This will remove the marked solution.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unmark_as_an_solution_with_http_info(complaint_id, solution_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param int solution_id: solutionId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/><b>A) Available values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/>4)complaintId<br/>5)solvingUser<br/>6)isMarkedSolution<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['complaint_id', 'solution_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unmark_as_an_solution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'complaint_id' is set
        if ('complaint_id' not in params) or (params['complaint_id'] is None):
            raise ValueError("Missing the required parameter `complaint_id` when calling `unmark_as_an_solution`")
        # verify the required parameter 'solution_id' is set
        if ('solution_id' not in params) or (params['solution_id'] is None):
            raise ValueError("Missing the required parameter `solution_id` when calling `unmark_as_an_solution`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `unmark_as_an_solution`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `unmark_as_an_solution`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `unmark_as_an_solution`")


        collection_formats = {}

        resource_path = '/complaints/{complaintId}/solutions/{solutionId}/unmark'.replace('{format}', 'json')
        path_params = {}
        if 'complaint_id' in params:
            path_params['complaintId'] = params['complaint_id']
        if 'solution_id' in params:
            path_params['solutionId'] = params['solution_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseSolution',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def unsubscribe_complaint(self, complaint_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Unsubscribe Complaint
        Allows the user to unsubscribe complaint. Returns the unsubscribed complaint
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unsubscribe_complaint(complaint_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.unsubscribe_complaint_with_http_info(complaint_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.unsubscribe_complaint_with_http_info(complaint_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def unsubscribe_complaint_with_http_info(self, complaint_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Unsubscribe Complaint
        Allows the user to unsubscribe complaint. Returns the unsubscribed complaint
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unsubscribe_complaint_with_http_info(complaint_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['complaint_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unsubscribe_complaint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'complaint_id' is set
        if ('complaint_id' not in params) or (params['complaint_id'] is None):
            raise ValueError("Missing the required parameter `complaint_id` when calling `unsubscribe_complaint`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `unsubscribe_complaint`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `unsubscribe_complaint`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `unsubscribe_complaint`")


        collection_formats = {}

        resource_path = '/complaints/{complaintId}/unsubscribe'.replace('{format}', 'json')
        path_params = {}
        if 'complaint_id' in params:
            path_params['complaintId'] = params['complaint_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseComplaint',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def unsubscribe_complaint_category(self, category_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Unsubscribe complaint category
        Allows the user to unsubscribe complaint category. Returns the unsubscribed complaint category
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unsubscribe_complaint_category(category_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2) categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseComplaintCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.unsubscribe_complaint_category_with_http_info(category_id, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.unsubscribe_complaint_category_with_http_info(category_id, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def unsubscribe_complaint_category_with_http_info(self, category_id, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Unsubscribe complaint category
        Allows the user to unsubscribe complaint category. Returns the unsubscribed complaint category
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unsubscribe_complaint_category_with_http_info(category_id, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2) categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseComplaintCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unsubscribe_complaint_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `unsubscribe_complaint_category`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `unsubscribe_complaint_category`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `unsubscribe_complaint_category`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `unsubscribe_complaint_category`")


        collection_formats = {}

        resource_path = '/complaints/categories/{categoryId}/unsubscribe'.replace('{format}', 'json')
        path_params = {}
        if 'category_id' in params:
            path_params['categoryId'] = params['category_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseComplaintCategory',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_complaint(self, complaint_id, complaint_title, complaint_description, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Update complaint
        Allows the user to update complaint. Returns the updated complaint
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_complaint(complaint_id, complaint_title, complaint_description, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param str complaint_title: Complaint Title (required)
        :param str complaint_description: Describe Complaint (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_complaint_with_http_info(complaint_id, complaint_title, complaint_description, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.update_complaint_with_http_info(complaint_id, complaint_title, complaint_description, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def update_complaint_with_http_info(self, complaint_id, complaint_title, complaint_description, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Update complaint
        Allows the user to update complaint. Returns the updated complaint
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_complaint_with_http_info(complaint_id, complaint_title, complaint_description, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int complaint_id: complaintId (required)
        :param str complaint_title: Complaint Title (required)
        :param str complaint_description: Describe Complaint (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)createdDate<br/><b>A) Availablevalues-</b><br/>1)complaintId<br/>2)complaintTitle<br/>3)complaintDescription<br/>4)issuer<br/>5)noOfSolutions<br/>6)isClosed<br/>7)createdDate<br/>8)lastUpdatedDate<br/>9)videoId<br/>10)fileURL<br/>11)isSubscribed<br/>12)sentiment</br>13)entity
        :return: VerveResponseComplaint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['complaint_id', 'complaint_title', 'complaint_description', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_complaint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'complaint_id' is set
        if ('complaint_id' not in params) or (params['complaint_id'] is None):
            raise ValueError("Missing the required parameter `complaint_id` when calling `update_complaint`")
        # verify the required parameter 'complaint_title' is set
        if ('complaint_title' not in params) or (params['complaint_title'] is None):
            raise ValueError("Missing the required parameter `complaint_title` when calling `update_complaint`")
        # verify the required parameter 'complaint_description' is set
        if ('complaint_description' not in params) or (params['complaint_description'] is None):
            raise ValueError("Missing the required parameter `complaint_description` when calling `update_complaint`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `update_complaint`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `update_complaint`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `update_complaint`")


        collection_formats = {}

        resource_path = '/complaints/{complaintId}'.replace('{format}', 'json')
        path_params = {}
        if 'complaint_id' in params:
            path_params['complaintId'] = params['complaint_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'complaint_title' in params:
            form_params.append(('complaintTitle', params['complaint_title']))
        if 'complaint_description' in params:
            form_params.append(('complaintDescription', params['complaint_description']))
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseComplaint',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_complaint_category(self, category_id, category_name, category_description, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Update complaint category
        Returns the updated complaint category
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_complaint_category(category_id, category_name, category_description, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str category_name: Category Name (required)
        :param str category_description: Describe category (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2) categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseComplaintCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_complaint_category_with_http_info(category_id, category_name, category_description, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.update_complaint_category_with_http_info(category_id, category_name, category_description, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def update_complaint_category_with_http_info(self, category_id, category_name, category_description, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Update complaint category
        Returns the updated complaint category
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_complaint_category_with_http_info(category_id, category_name, category_description, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str category_name: Category Name (required)
        :param str category_description: Describe category (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)categoryId<br/>2) categoryName<br/><b>A) Available values -</b> <br/>1)categoryId<br/>2)categoryName<br/>3)categoryDescription<br/>4)createdDate<br/>5)isSubscribed
        :return: VerveResponseComplaintCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id', 'category_name', 'category_description', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_complaint_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `update_complaint_category`")
        # verify the required parameter 'category_name' is set
        if ('category_name' not in params) or (params['category_name'] is None):
            raise ValueError("Missing the required parameter `category_name` when calling `update_complaint_category`")
        # verify the required parameter 'category_description' is set
        if ('category_description' not in params) or (params['category_description'] is None):
            raise ValueError("Missing the required parameter `category_description` when calling `update_complaint_category`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `update_complaint_category`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `update_complaint_category`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `update_complaint_category`")


        collection_formats = {}

        resource_path = '/complaints/categories/{categoryId}'.replace('{format}', 'json')
        path_params = {}
        if 'category_id' in params:
            path_params['categoryId'] = params['category_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'category_name' in params:
            form_params.append(('categoryName', params['category_name']))
        if 'category_description' in params:
            form_params.append(('categoryDescription', params['category_description']))
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseComplaintCategory',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_solution(self, solution_id, solution, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Update solution
        Allows the user to update solution. Returns the updated solution
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_solution(solution_id, solution, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int solution_id: solutionId (required)
        :param str solution: solution (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/><b>A) Available values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/>4)complaintId<br/>5)solvingUser<br/>6)isMarkedSolution<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_solution_with_http_info(solution_id, solution, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.update_solution_with_http_info(solution_id, solution, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def update_solution_with_http_info(self, solution_id, solution, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Update solution
        Allows the user to update solution. Returns the updated solution
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_solution_with_http_info(solution_id, solution, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int solution_id: solutionId (required)
        :param str solution: solution (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list<br/> <b>A) Default values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/><b>A) Available values -</b> <br/>1)solutionId<br/>2)solutionDescription<br/>3)createdDate<br/>4)complaintId<br/>5)solvingUser<br/>6)isMarkedSolution<br/>7)noOfLikes<br/>8)noOfDislikes<br/>9)replyCount<br/>10)isLiked<br/>11)isDisliked
        :return: VerveResponseSolution
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['solution_id', 'solution', 'logged_in_user_id', 'access_token', 'client_token', 'fields']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_solution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'solution_id' is set
        if ('solution_id' not in params) or (params['solution_id'] is None):
            raise ValueError("Missing the required parameter `solution_id` when calling `update_solution`")
        # verify the required parameter 'solution' is set
        if ('solution' not in params) or (params['solution'] is None):
            raise ValueError("Missing the required parameter `solution` when calling `update_solution`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `update_solution`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `update_solution`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `update_solution`")


        collection_formats = {}

        resource_path = '/complaints/solutions/{solutionId}'.replace('{format}', 'json')
        path_params = {}
        if 'solution_id' in params:
            path_params['solutionId'] = params['solution_id']

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'solution' in params:
            form_params.append(('solution', params['solution']))
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerveResponseSolution',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
