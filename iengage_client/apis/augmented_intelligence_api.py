# coding: utf-8

"""
    iEngage 2.0 API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AugmentedIntelligenceApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def classify(self, text, id, client_token, **kwargs):
        """
        Classifies using your classifier
        Returns a classification based on your training in the Classifier Admin Panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.classify(text, id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str text: Text you want classified (required)
        :param int id: Classifier ID from the Admin Panel (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :return: VerveResponseTextClassificationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.classify_with_http_info(text, id, client_token, **kwargs)
        else:
            (data) = self.classify_with_http_info(text, id, client_token, **kwargs)
            return data

    def classify_with_http_info(self, text, id, client_token, **kwargs):
        """
        Classifies using your classifier
        Returns a classification based on your training in the Classifier Admin Panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.classify_with_http_info(text, id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str text: Text you want classified (required)
        :param int id: Classifier ID from the Admin Panel (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :return: VerveResponseTextClassificationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['text', 'id', 'client_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method classify" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'text' is set
        if ('text' not in params) or (params['text'] is None):
            raise ValueError("Missing the required parameter `text` when calling `classify`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `classify`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `classify`")

        resource_path = '/ml/classifier/classify'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'text' in params:
            query_params['text'] = params['text']
        if 'id' in params:
            query_params['id'] = params['id']

        header_params = {}
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseTextClassificationList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_entities(self, id, text, client_token, **kwargs):
        """
        Extracts entities from text
        Classifies each word of the text as an entity based on your training in the NER Admin panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_entities(id, text, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: NER ID present from the Admin Panel (required)
        :param str text: Text from which to extract entities (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :return: VerveResponseEntitiesClassifiedList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_entities_with_http_info(id, text, client_token, **kwargs)
        else:
            (data) = self.get_entities_with_http_info(id, text, client_token, **kwargs)
            return data

    def get_entities_with_http_info(self, id, text, client_token, **kwargs):
        """
        Extracts entities from text
        Classifies each word of the text as an entity based on your training in the NER Admin panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_entities_with_http_info(id, text, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: NER ID present from the Admin Panel (required)
        :param str text: Text from which to extract entities (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :return: VerveResponseEntitiesClassifiedList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'text', 'client_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_entities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_entities`")
        # verify the required parameter 'text' is set
        if ('text' not in params) or (params['text'] is None):
            raise ValueError("Missing the required parameter `text` when calling `get_entities`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_entities`")

        resource_path = '/ml/ner/classify'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']
        if 'text' in params:
            query_params['text'] = params['text']

        header_params = {}
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseEntitiesClassifiedList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_interaction_type(self, text, client_token, **kwargs):
        """
        Returns the type of interaction
        Classifies text to question, complaint, appreciation, suggestion or comment. This is the default classification we assign to the type field of an Interaction

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_interaction_type(text, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str text: Text that is to be classified by type (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :return: VerveResponseFlowFinder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_interaction_type_with_http_info(text, client_token, **kwargs)
        else:
            (data) = self.get_interaction_type_with_http_info(text, client_token, **kwargs)
            return data

    def get_interaction_type_with_http_info(self, text, client_token, **kwargs):
        """
        Returns the type of interaction
        Classifies text to question, complaint, appreciation, suggestion or comment. This is the default classification we assign to the type field of an Interaction

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_interaction_type_with_http_info(text, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str text: Text that is to be classified by type (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :return: VerveResponseFlowFinder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['text', 'client_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_interaction_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'text' is set
        if ('text' not in params) or (params['text'] is None):
            raise ValueError("Missing the required parameter `text` when calling `get_interaction_type`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_interaction_type`")

        resource_path = '/ml/interactionType'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'text' in params:
            query_params['text'] = params['text']

        header_params = {}
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseFlowFinder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_keywords(self, text, client_token, **kwargs):
        """
        Returns the keywords of the sentence
        Extracts the keywords of a sentence. This could be used for example as tags.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_keywords(text, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str text: Content whose keywords are to be found out (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :return: VerveResponseKeyword
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_keywords_with_http_info(text, client_token, **kwargs)
        else:
            (data) = self.get_keywords_with_http_info(text, client_token, **kwargs)
            return data

    def get_keywords_with_http_info(self, text, client_token, **kwargs):
        """
        Returns the keywords of the sentence
        Extracts the keywords of a sentence. This could be used for example as tags.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_keywords_with_http_info(text, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str text: Content whose keywords are to be found out (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :return: VerveResponseKeyword
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['text', 'client_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_keywords" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'text' is set
        if ('text' not in params) or (params['text'] is None):
            raise ValueError("Missing the required parameter `text` when calling `get_keywords`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_keywords`")

        resource_path = '/ml/keywords'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'text' in params:
            query_params['text'] = params['text']

        header_params = {}
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseKeyword',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_popular_tag(self, start_time, end_time, start, end, requester_id, client_token, **kwargs):
        """
        Get list of popular tag of interactions
        Return the most popular tag of given interaction type

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_popular_tag(start_time, end_time, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start_time: start time (required)
        :param int end_time: end time (required)
        :param int start: start (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str interaction_type:   /*  Interaction Type      1) Question     2) Complaint    3) Idea     4) Blog     5) Discussion   */
        :param str sentiment_type:   /*  Sentiment Type      1)Positive     2)Negative      3)Neutral  */
        :param str additional_information: additional information
        :param str association: association
        :param int category_id: categoryId
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseTagList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_popular_tag_with_http_info(start_time, end_time, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_popular_tag_with_http_info(start_time, end_time, start, end, requester_id, client_token, **kwargs)
            return data

    def get_popular_tag_with_http_info(self, start_time, end_time, start, end, requester_id, client_token, **kwargs):
        """
        Get list of popular tag of interactions
        Return the most popular tag of given interaction type

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_popular_tag_with_http_info(start_time, end_time, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start_time: start time (required)
        :param int end_time: end time (required)
        :param int start: start (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str interaction_type:   /*  Interaction Type      1) Question     2) Complaint    3) Idea     4) Blog     5) Discussion   */
        :param str sentiment_type:   /*  Sentiment Type      1)Positive     2)Negative      3)Neutral  */
        :param str additional_information: additional information
        :param str association: association
        :param int category_id: categoryId
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseTagList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_time', 'end_time', 'start', 'end', 'requester_id', 'client_token', 'interaction_type', 'sentiment_type', 'additional_information', 'association', 'category_id', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_popular_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params) or (params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `get_popular_tag`")
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params) or (params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `get_popular_tag`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_popular_tag`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_popular_tag`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_popular_tag`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_popular_tag`")

        resource_path = '/analytics/popular/tags'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'interaction_type' in params:
            query_params['interactionType'] = params['interaction_type']
        if 'sentiment_type' in params:
            query_params['sentimentType'] = params['sentiment_type']
        if 'additional_information' in params:
            query_params['additionalInformation'] = params['additional_information']
        if 'association' in params:
            query_params['association'] = params['association']
        if 'category_id' in params:
            query_params['categoryId'] = params['category_id']
        if 'start_time' in params:
            query_params['startTime'] = params['start_time']
        if 'end_time' in params:
            query_params['endTime'] = params['end_time']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseTagList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_sentiment(self, start_time, end_time, requester_id, client_token, **kwargs):
        """
        Get sentiment count of interactions
        Returns the sum of the sentiment count of given interaction type

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sentiment(start_time, end_time, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start_time: start time (required)
        :param int end_time: end time (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str interaction_type:   /*  Interaction Type      1) Question     2) Complaint     3) Idea     4) Blog     5) Discussion   */
        :param str additional_information: additional information
        :param str association: association
        :param int category_id: categoryId
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseSentimentAnalytics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_sentiment_with_http_info(start_time, end_time, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_sentiment_with_http_info(start_time, end_time, requester_id, client_token, **kwargs)
            return data

    def get_sentiment_with_http_info(self, start_time, end_time, requester_id, client_token, **kwargs):
        """
        Get sentiment count of interactions
        Returns the sum of the sentiment count of given interaction type

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sentiment_with_http_info(start_time, end_time, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start_time: start time (required)
        :param int end_time: end time (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str interaction_type:   /*  Interaction Type      1) Question     2) Complaint     3) Idea     4) Blog     5) Discussion   */
        :param str additional_information: additional information
        :param str association: association
        :param int category_id: categoryId
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseSentimentAnalytics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_time', 'end_time', 'requester_id', 'client_token', 'interaction_type', 'additional_information', 'association', 'category_id', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sentiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params) or (params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `get_sentiment`")
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params) or (params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `get_sentiment`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_sentiment`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_sentiment`")

        resource_path = '/analytics/sentiments'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'interaction_type' in params:
            query_params['interactionType'] = params['interaction_type']
        if 'additional_information' in params:
            query_params['additionalInformation'] = params['additional_information']
        if 'association' in params:
            query_params['association'] = params['association']
        if 'category_id' in params:
            query_params['categoryId'] = params['category_id']
        if 'start_time' in params:
            query_params['startTime'] = params['start_time']
        if 'end_time' in params:
            query_params['endTime'] = params['end_time']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseSentimentAnalytics',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_tag_entity_sentiments(self, tag_name, start_time, end_time, start, end, requester_id, client_token, **kwargs):
        """
        Get list of tag entity sentiment
        Return the list of tag entity sentiments

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tag_entity_sentiments(tag_name, start_time, end_time, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tag_name: tag name (required)
        :param int start_time: start time (required)
        :param int end_time: end time (required)
        :param int start: start (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str sentiment_type:   /*   Sentiment Type      1)Positive     2)Negative     3)Neutral   */
        :param str additional_information: additional information
        :param str association: association
        :param str interaction_type:   /*  Interaction Type      1)Question     2)Complaint     3)Idea     4)Blog     5)Discussion   */
        :param int category_id: categoryId
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseEntitySentimentList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_tag_entity_sentiments_with_http_info(tag_name, start_time, end_time, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_tag_entity_sentiments_with_http_info(tag_name, start_time, end_time, start, end, requester_id, client_token, **kwargs)
            return data

    def get_tag_entity_sentiments_with_http_info(self, tag_name, start_time, end_time, start, end, requester_id, client_token, **kwargs):
        """
        Get list of tag entity sentiment
        Return the list of tag entity sentiments

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tag_entity_sentiments_with_http_info(tag_name, start_time, end_time, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tag_name: tag name (required)
        :param int start_time: start time (required)
        :param int end_time: end time (required)
        :param int start: start (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str sentiment_type:   /*   Sentiment Type      1)Positive     2)Negative     3)Neutral   */
        :param str additional_information: additional information
        :param str association: association
        :param str interaction_type:   /*  Interaction Type      1)Question     2)Complaint     3)Idea     4)Blog     5)Discussion   */
        :param int category_id: categoryId
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseEntitySentimentList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tag_name', 'start_time', 'end_time', 'start', 'end', 'requester_id', 'client_token', 'sentiment_type', 'additional_information', 'association', 'interaction_type', 'category_id', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tag_entity_sentiments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tag_name' is set
        if ('tag_name' not in params) or (params['tag_name'] is None):
            raise ValueError("Missing the required parameter `tag_name` when calling `get_tag_entity_sentiments`")
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params) or (params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `get_tag_entity_sentiments`")
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params) or (params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `get_tag_entity_sentiments`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_tag_entity_sentiments`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_tag_entity_sentiments`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_tag_entity_sentiments`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_tag_entity_sentiments`")

        resource_path = '/analytics/tag/entitySentiment'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'tag_name' in params:
            query_params['tagName'] = params['tag_name']
        if 'sentiment_type' in params:
            query_params['sentimentType'] = params['sentiment_type']
        if 'additional_information' in params:
            query_params['additionalInformation'] = params['additional_information']
        if 'association' in params:
            query_params['association'] = params['association']
        if 'interaction_type' in params:
            query_params['interactionType'] = params['interaction_type']
        if 'category_id' in params:
            query_params['categoryId'] = params['category_id']
        if 'start_time' in params:
            query_params['startTime'] = params['start_time']
        if 'end_time' in params:
            query_params['endTime'] = params['end_time']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseEntitySentimentList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def sentiment(self, text, client_token, **kwargs):
        """
        Analyzes the sentiment of the content
        The response will be a Sentiment Weightage. -1 is most negative and +1 is most positive. 0 will be neutral

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sentiment(text, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str text: Sentence whose sentiment is to be found out (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :return: VerveResponseSentiment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.sentiment_with_http_info(text, client_token, **kwargs)
        else:
            (data) = self.sentiment_with_http_info(text, client_token, **kwargs)
            return data

    def sentiment_with_http_info(self, text, client_token, **kwargs):
        """
        Analyzes the sentiment of the content
        The response will be a Sentiment Weightage. -1 is most negative and +1 is most positive. 0 will be neutral

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sentiment_with_http_info(text, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str text: Sentence whose sentiment is to be found out (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :return: VerveResponseSentiment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['text', 'client_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sentiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'text' is set
        if ('text' not in params) or (params['text'] is None):
            raise ValueError("Missing the required parameter `text` when calling `sentiment`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `sentiment`")

        resource_path = '/ml/sentiment'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'text' in params:
            query_params['text'] = params['text']

        header_params = {}
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseSentiment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
