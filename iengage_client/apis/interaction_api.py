# coding: utf-8

"""
    iEngage 2.0 API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class InteractionApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_interaction(self, requester_id, client_token, **kwargs):
        """
        Share interaction without attachment
        This service allows a user to post an interaction. The following fields(key:value) are required to be present in the Interaction JSON object. Refer to the Model & Model Schema of the expected JSON Object for the body of this API.      **Required fields**      1. interactionTitle     

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_interaction(requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param InteractionInputModel body: 
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteraction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_interaction_with_http_info(requester_id, client_token, **kwargs)
        else:
            (data) = self.add_interaction_with_http_info(requester_id, client_token, **kwargs)
            return data

    def add_interaction_with_http_info(self, requester_id, client_token, **kwargs):
        """
        Share interaction without attachment
        This service allows a user to post an interaction. The following fields(key:value) are required to be present in the Interaction JSON object. Refer to the Model & Model Schema of the expected JSON Object for the body of this API.      **Required fields**      1. interactionTitle     

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_interaction_with_http_info(requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param InteractionInputModel body: 
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteraction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['requester_id', 'client_token', 'body', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_interaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `add_interaction`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `add_interaction`")

        resource_path = '/interactions'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteraction',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def add_interaction_0(self, interaction_title, file, requester_id, client_token, **kwargs):
        """
        Share interaction with attachment
        Allows the user to share interaction with attachment. Returns the interaction object

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_interaction_0(interaction_title, file, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str interaction_title: interactionTitle (required)
        :param file file: file (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str category_id: categoryId
        :param str interaction_type: interactionType
        :param str interaction_description: interactionDescription
        :param str association: association
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteraction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_interaction_0_with_http_info(interaction_title, file, requester_id, client_token, **kwargs)
        else:
            (data) = self.add_interaction_0_with_http_info(interaction_title, file, requester_id, client_token, **kwargs)
            return data

    def add_interaction_0_with_http_info(self, interaction_title, file, requester_id, client_token, **kwargs):
        """
        Share interaction with attachment
        Allows the user to share interaction with attachment. Returns the interaction object

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_interaction_0_with_http_info(interaction_title, file, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str interaction_title: interactionTitle (required)
        :param file file: file (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str category_id: categoryId
        :param str interaction_type: interactionType
        :param str interaction_description: interactionDescription
        :param str association: association
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteraction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interaction_title', 'file', 'requester_id', 'client_token', 'category_id', 'interaction_type', 'interaction_description', 'association', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_interaction_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interaction_title' is set
        if ('interaction_title' not in params) or (params['interaction_title'] is None):
            raise ValueError("Missing the required parameter `interaction_title` when calling `add_interaction_0`")
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `add_interaction_0`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `add_interaction_0`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `add_interaction_0`")

        resource_path = '/interactions/attachment'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'category_id' in params:
            form_params.append(('categoryId', params['category_id']))
        if 'interaction_type' in params:
            form_params.append(('interactionType', params['interaction_type']))
        if 'interaction_title' in params:
            form_params.append(('interactionTitle', params['interaction_title']))
        if 'interaction_description' in params:
            form_params.append(('interactionDescription', params['interaction_description']))
        if 'association' in params:
            form_params.append(('association', params['association']))
        if 'file' in params:
            local_var_files['file'] = params['file']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteraction',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def add_response(self, interaction_id, requester_id, client_token, **kwargs):
        """
        Response the specified interaction
        This service allows a user to post a response on an interaction. The following fields(key:value) are required to be present in the Response JSON object. Refer to the Model & Model Schema of the expected JSON Object for the body of this API.      **Required fields**     1. interactionId (Path Parameter)     2. responseDescription     

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_response(interaction_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param InteractionResponse body: 
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_response_with_http_info(interaction_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.add_response_with_http_info(interaction_id, requester_id, client_token, **kwargs)
            return data

    def add_response_with_http_info(self, interaction_id, requester_id, client_token, **kwargs):
        """
        Response the specified interaction
        This service allows a user to post a response on an interaction. The following fields(key:value) are required to be present in the Response JSON object. Refer to the Model & Model Schema of the expected JSON Object for the body of this API.      **Required fields**     1. interactionId (Path Parameter)     2. responseDescription     

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_response_with_http_info(interaction_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param InteractionResponse body: 
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interaction_id', 'requester_id', 'client_token', 'body', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_response" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interaction_id' is set
        if ('interaction_id' not in params) or (params['interaction_id'] is None):
            raise ValueError("Missing the required parameter `interaction_id` when calling `add_response`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `add_response`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `add_response`")

        resource_path = '/interactions/{interactionId}/responses'.replace('{format}', 'json')
        path_params = {}
        if 'interaction_id' in params:
            path_params['interactionId'] = params['interaction_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded', 'application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteractionResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def add_response_0(self, body, body2, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Response the specified interaction
        Allows the user to response the interaction

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_response_0(body, body2, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int body: interactionId (required)
        :param str body2: response (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str body3: Filter fields in result list       /*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   */
        :param list[Attachment] body4: 
        :return: VerveResponseInteractionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_response_0_with_http_info(body, body2, logged_in_user_id, access_token, client_token, **kwargs)
        else:
            (data) = self.add_response_0_with_http_info(body, body2, logged_in_user_id, access_token, client_token, **kwargs)
            return data

    def add_response_0_with_http_info(self, body, body2, logged_in_user_id, access_token, client_token, **kwargs):
        """
        Response the specified interaction
        Allows the user to response the interaction

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_response_0_with_http_info(body, body2, logged_in_user_id, access_token, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int body: interactionId (required)
        :param str body2: response (required)
        :param str logged_in_user_id: User id of logged / authenticated user (required)
        :param str access_token: Unique session token for user. To get access token user will have to authenticate (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str body3: Filter fields in result list       /*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   */
        :param list[Attachment] body4: 
        :return: VerveResponseInteractionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'body2', 'logged_in_user_id', 'access_token', 'client_token', 'body3', 'body4']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_response_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_response_0`")
        # verify the required parameter 'body2' is set
        if ('body2' not in params) or (params['body2'] is None):
            raise ValueError("Missing the required parameter `body2` when calling `add_response_0`")
        # verify the required parameter 'logged_in_user_id' is set
        if ('logged_in_user_id' not in params) or (params['logged_in_user_id'] is None):
            raise ValueError("Missing the required parameter `logged_in_user_id` when calling `add_response_0`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `add_response_0`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `add_response_0`")

        resource_path = '/interactions/{interactionId}/responses/attachment'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'logged_in_user_id' in params:
            header_params['loggedInUserId'] = params['logged_in_user_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body4' in params:
            body_params = params['body4']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteractionResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def change_interaction_category(self, interaction_id, category_id, requester_id, client_token, **kwargs):
        """
        Change interaction category
        Allows the user to change the interaction category.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.change_interaction_category(interaction_id, category_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param int category_id: New interaction categoryId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteraction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.change_interaction_category_with_http_info(interaction_id, category_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.change_interaction_category_with_http_info(interaction_id, category_id, requester_id, client_token, **kwargs)
            return data

    def change_interaction_category_with_http_info(self, interaction_id, category_id, requester_id, client_token, **kwargs):
        """
        Change interaction category
        Allows the user to change the interaction category.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.change_interaction_category_with_http_info(interaction_id, category_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param int category_id: New interaction categoryId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteraction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interaction_id', 'category_id', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_interaction_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interaction_id' is set
        if ('interaction_id' not in params) or (params['interaction_id'] is None):
            raise ValueError("Missing the required parameter `interaction_id` when calling `change_interaction_category`")
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `change_interaction_category`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `change_interaction_category`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `change_interaction_category`")

        resource_path = '/interactions/{interactionId}/{categoryId}'.replace('{format}', 'json')
        path_params = {}
        if 'interaction_id' in params:
            path_params['interactionId'] = params['interaction_id']
        if 'category_id' in params:
            path_params['categoryId'] = params['category_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteraction',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def change_interaction_type(self, interaction_id, interaction_type, requester_id, client_token, **kwargs):
        """
        Change interaction type
        Allows the user to change the interaction type. Boolean value

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.change_interaction_type(interaction_id, interaction_type, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param str interaction_type: New interaction type (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteraction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.change_interaction_type_with_http_info(interaction_id, interaction_type, requester_id, client_token, **kwargs)
        else:
            (data) = self.change_interaction_type_with_http_info(interaction_id, interaction_type, requester_id, client_token, **kwargs)
            return data

    def change_interaction_type_with_http_info(self, interaction_id, interaction_type, requester_id, client_token, **kwargs):
        """
        Change interaction type
        Allows the user to change the interaction type. Boolean value

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.change_interaction_type_with_http_info(interaction_id, interaction_type, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param str interaction_type: New interaction type (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteraction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interaction_id', 'interaction_type', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_interaction_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interaction_id' is set
        if ('interaction_id' not in params) or (params['interaction_id'] is None):
            raise ValueError("Missing the required parameter `interaction_id` when calling `change_interaction_type`")
        # verify the required parameter 'interaction_type' is set
        if ('interaction_type' not in params) or (params['interaction_type'] is None):
            raise ValueError("Missing the required parameter `interaction_type` when calling `change_interaction_type`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `change_interaction_type`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `change_interaction_type`")

        resource_path = '/interactions/{interactionId}/type'.replace('{format}', 'json')
        path_params = {}
        if 'interaction_id' in params:
            path_params['interactionId'] = params['interaction_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'interaction_type' in params:
            form_params.append(('interactionType', params['interaction_type']))
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteraction',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_interaction_category(self, requester_id, client_token, **kwargs):
        """
        Create interaction category
        This service allows a user to create a category. The following fields(key:value) are required to be present in the Category JSON object. Refer to the Model & Model Schema of the expected JSON Object for the body of this API.      **Required fields**      1. associationId      2. categoryName      3. interactionType     

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_interaction_category(requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param InteractionCategory body: 
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_interaction_category_with_http_info(requester_id, client_token, **kwargs)
        else:
            (data) = self.create_interaction_category_with_http_info(requester_id, client_token, **kwargs)
            return data

    def create_interaction_category_with_http_info(self, requester_id, client_token, **kwargs):
        """
        Create interaction category
        This service allows a user to create a category. The following fields(key:value) are required to be present in the Category JSON object. Refer to the Model & Model Schema of the expected JSON Object for the body of this API.      **Required fields**      1. associationId      2. categoryName      3. interactionType     

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_interaction_category_with_http_info(requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param InteractionCategory body: 
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['requester_id', 'client_token', 'body', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_interaction_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `create_interaction_category`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `create_interaction_category`")

        resource_path = '/interactions/categories'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded', 'application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteractionCategory',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_interaction(self, interaction_id, requester_id, client_token, **kwargs):
        """
        Delete interaction
        Allows the user to delete a interaction. Returns the deleted response

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_interaction(interaction_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteraction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_interaction_with_http_info(interaction_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.delete_interaction_with_http_info(interaction_id, requester_id, client_token, **kwargs)
            return data

    def delete_interaction_with_http_info(self, interaction_id, requester_id, client_token, **kwargs):
        """
        Delete interaction
        Allows the user to delete a interaction. Returns the deleted response

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_interaction_with_http_info(interaction_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteraction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interaction_id', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_interaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interaction_id' is set
        if ('interaction_id' not in params) or (params['interaction_id'] is None):
            raise ValueError("Missing the required parameter `interaction_id` when calling `delete_interaction`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `delete_interaction`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `delete_interaction`")

        resource_path = '/interactions/{interactionId}'.replace('{format}', 'json')
        path_params = {}
        if 'interaction_id' in params:
            path_params['interactionId'] = params['interaction_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteraction',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_interaction_category(self, category_id, requester_id, client_token, **kwargs):
        """
        Delete interaction category
        Allows the user to delete the interaction category. Returns the deleted interaction category

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_interaction_category(category_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_interaction_category_with_http_info(category_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.delete_interaction_category_with_http_info(category_id, requester_id, client_token, **kwargs)
            return data

    def delete_interaction_category_with_http_info(self, category_id, requester_id, client_token, **kwargs):
        """
        Delete interaction category
        Allows the user to delete the interaction category. Returns the deleted interaction category

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_interaction_category_with_http_info(category_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_interaction_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `delete_interaction_category`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `delete_interaction_category`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `delete_interaction_category`")

        resource_path = '/interactions/categories/{categoryId}'.replace('{format}', 'json')
        path_params = {}
        if 'category_id' in params:
            path_params['categoryId'] = params['category_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteractionCategory',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_response(self, response_id, requester_id, client_token, **kwargs):
        """
        Delete response
        Allows the user to delete an response. Returns the deleted response

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_response(response_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int response_id: responseId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_response_with_http_info(response_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.delete_response_with_http_info(response_id, requester_id, client_token, **kwargs)
            return data

    def delete_response_with_http_info(self, response_id, requester_id, client_token, **kwargs):
        """
        Delete response
        Allows the user to delete an response. Returns the deleted response

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_response_with_http_info(response_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int response_id: responseId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['response_id', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_response" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'response_id' is set
        if ('response_id' not in params) or (params['response_id'] is None):
            raise ValueError("Missing the required parameter `response_id` when calling `delete_response`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `delete_response`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `delete_response`")

        resource_path = '/interactions/responses/{responseId}'.replace('{format}', 'json')
        path_params = {}
        if 'response_id' in params:
            path_params['responseId'] = params['response_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteractionResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def dislike_response(self, interaction_id, response_id, requester_id, client_token, **kwargs):
        """
        Dislike response
        Allows the user to dislike the response.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.dislike_response(interaction_id, response_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param int response_id: responseId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.dislike_response_with_http_info(interaction_id, response_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.dislike_response_with_http_info(interaction_id, response_id, requester_id, client_token, **kwargs)
            return data

    def dislike_response_with_http_info(self, interaction_id, response_id, requester_id, client_token, **kwargs):
        """
        Dislike response
        Allows the user to dislike the response.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.dislike_response_with_http_info(interaction_id, response_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param int response_id: responseId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interaction_id', 'response_id', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dislike_response" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interaction_id' is set
        if ('interaction_id' not in params) or (params['interaction_id'] is None):
            raise ValueError("Missing the required parameter `interaction_id` when calling `dislike_response`")
        # verify the required parameter 'response_id' is set
        if ('response_id' not in params) or (params['response_id'] is None):
            raise ValueError("Missing the required parameter `response_id` when calling `dislike_response`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `dislike_response`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `dislike_response`")

        resource_path = '/interactions/{interactionId}/responses/{responseId}/dislike'.replace('{format}', 'json')
        path_params = {}
        if 'interaction_id' in params:
            path_params['interactionId'] = params['interaction_id']
        if 'response_id' in params:
            path_params['responseId'] = params['response_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteractionResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_friends_interactions(self, interaction_status, start, end, requester_id, client_token, **kwargs):
        """
        Get list of interactions shared by friends
        Returns the list of interactions shared by friends

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_friends_interactions(interaction_status, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str interaction_status:   /*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED   */ (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str interaction_type: Interaction Type
        :param int category_id: categoryId
        :param str association: association
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_friends_interactions_with_http_info(interaction_status, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_friends_interactions_with_http_info(interaction_status, start, end, requester_id, client_token, **kwargs)
            return data

    def get_friends_interactions_with_http_info(self, interaction_status, start, end, requester_id, client_token, **kwargs):
        """
        Get list of interactions shared by friends
        Returns the list of interactions shared by friends

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_friends_interactions_with_http_info(interaction_status, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str interaction_status:   /*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED   */ (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str interaction_type: Interaction Type
        :param int category_id: categoryId
        :param str association: association
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interaction_status', 'start', 'end', 'requester_id', 'client_token', 'interaction_type', 'category_id', 'association', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_friends_interactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interaction_status' is set
        if ('interaction_status' not in params) or (params['interaction_status'] is None):
            raise ValueError("Missing the required parameter `interaction_status` when calling `get_friends_interactions`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_friends_interactions`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_friends_interactions`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_friends_interactions`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_friends_interactions`")

        resource_path = '/interactions/friends'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'interaction_status' in params:
            query_params['interactionStatus'] = params['interaction_status']
        if 'interaction_type' in params:
            query_params['interactionType'] = params['interaction_type']
        if 'category_id' in params:
            query_params['categoryId'] = params['category_id']
        if 'association' in params:
            query_params['association'] = params['association']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteractionList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_interaction(self, interaction_id, requester_id, client_token, **kwargs):
        """
        Get interaction by id
        Returns the interaction by id

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_interaction(interaction_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteraction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_interaction_with_http_info(interaction_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_interaction_with_http_info(interaction_id, requester_id, client_token, **kwargs)
            return data

    def get_interaction_with_http_info(self, interaction_id, requester_id, client_token, **kwargs):
        """
        Get interaction by id
        Returns the interaction by id

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_interaction_with_http_info(interaction_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteraction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interaction_id', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_interaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interaction_id' is set
        if ('interaction_id' not in params) or (params['interaction_id'] is None):
            raise ValueError("Missing the required parameter `interaction_id` when calling `get_interaction`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_interaction`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_interaction`")

        resource_path = '/interactions/{interactionId}'.replace('{format}', 'json')
        path_params = {}
        if 'interaction_id' in params:
            path_params['interactionId'] = params['interaction_id']

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteraction',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_interaction_categories(self, start, end, requester_id, client_token, **kwargs):
        """
        Get the list of interaction categories
        Returns the list of interaction categories

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_interaction_categories(start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str interaction_type: Interaction Type
        :param str association: association
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionCategoryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_interaction_categories_with_http_info(start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_interaction_categories_with_http_info(start, end, requester_id, client_token, **kwargs)
            return data

    def get_interaction_categories_with_http_info(self, start, end, requester_id, client_token, **kwargs):
        """
        Get the list of interaction categories
        Returns the list of interaction categories

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_interaction_categories_with_http_info(start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str interaction_type: Interaction Type
        :param str association: association
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionCategoryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'end', 'requester_id', 'client_token', 'interaction_type', 'association', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_interaction_categories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_interaction_categories`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_interaction_categories`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_interaction_categories`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_interaction_categories`")

        resource_path = '/interactions/categories'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'interaction_type' in params:
            query_params['interactionType'] = params['interaction_type']
        if 'association' in params:
            query_params['association'] = params['association']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteractionCategoryList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_interactions_for_user(self, interaction_status, start, end, requester_id, client_token, **kwargs):
        """
        Get list of all interactions visible to the user
        Returns the list of all interactions visible to the user

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_interactions_for_user(interaction_status, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str interaction_status:   /*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED   */ (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int category_id: categoryId
        :param str interaction_type: Interaction Type
        :param str association: association
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_interactions_for_user_with_http_info(interaction_status, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_interactions_for_user_with_http_info(interaction_status, start, end, requester_id, client_token, **kwargs)
            return data

    def get_interactions_for_user_with_http_info(self, interaction_status, start, end, requester_id, client_token, **kwargs):
        """
        Get list of all interactions visible to the user
        Returns the list of all interactions visible to the user

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_interactions_for_user_with_http_info(interaction_status, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str interaction_status:   /*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED   */ (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int category_id: categoryId
        :param str interaction_type: Interaction Type
        :param str association: association
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interaction_status', 'start', 'end', 'requester_id', 'client_token', 'category_id', 'interaction_type', 'association', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_interactions_for_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interaction_status' is set
        if ('interaction_status' not in params) or (params['interaction_status'] is None):
            raise ValueError("Missing the required parameter `interaction_status` when calling `get_interactions_for_user`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_interactions_for_user`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_interactions_for_user`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_interactions_for_user`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_interactions_for_user`")

        resource_path = '/interactions'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'interaction_status' in params:
            query_params['interactionStatus'] = params['interaction_status']
        if 'category_id' in params:
            query_params['categoryId'] = params['category_id']
        if 'interaction_type' in params:
            query_params['interactionType'] = params['interaction_type']
        if 'association' in params:
            query_params['association'] = params['association']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteractionList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_recommend_interactions(self, start, end, requester_id, client_token, **kwargs):
        """
        Get list of recommended interactions
        Returns the list of recommended interactions

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_recommend_interactions(start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str interaction_type: interactionType
        :param str association: association
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_recommend_interactions_with_http_info(start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_recommend_interactions_with_http_info(start, end, requester_id, client_token, **kwargs)
            return data

    def get_recommend_interactions_with_http_info(self, start, end, requester_id, client_token, **kwargs):
        """
        Get list of recommended interactions
        Returns the list of recommended interactions

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_recommend_interactions_with_http_info(start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str interaction_type: interactionType
        :param str association: association
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'end', 'requester_id', 'client_token', 'interaction_type', 'association', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recommend_interactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_recommend_interactions`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_recommend_interactions`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_recommend_interactions`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_recommend_interactions`")

        resource_path = '/interactions/recommend'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'interaction_type' in params:
            query_params['interactionType'] = params['interaction_type']
        if 'association' in params:
            query_params['association'] = params['association']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteractionList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_recommended_interactins_from_db(self, user_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of recommended interactions from DB
        Returns the list of recommended interactions from DB

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_recommended_interactins_from_db(user_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: User Id whose recommended interactions want to get (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str interaction_type: Interaction Type
        :param str association: association
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_recommended_interactins_from_db_with_http_info(user_id, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_recommended_interactins_from_db_with_http_info(user_id, start, end, requester_id, client_token, **kwargs)
            return data

    def get_recommended_interactins_from_db_with_http_info(self, user_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of recommended interactions from DB
        Returns the list of recommended interactions from DB

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_recommended_interactins_from_db_with_http_info(user_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: User Id whose recommended interactions want to get (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str interaction_type: Interaction Type
        :param str association: association
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'start', 'end', 'requester_id', 'client_token', 'interaction_type', 'association', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recommended_interactins_from_db" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_recommended_interactins_from_db`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_recommended_interactins_from_db`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_recommended_interactins_from_db`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_recommended_interactins_from_db`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_recommended_interactins_from_db`")

        resource_path = '/interactions/{userId}/recommendedInteractions'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'interaction_type' in params:
            query_params['interactionType'] = params['interaction_type']
        if 'association' in params:
            query_params['association'] = params['association']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteractionList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_recommended_users_from_db(self, interaction_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of recommended Users from DB
        Returns the list of recommended users from DB

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_recommended_users_from_db(interaction_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str association: association
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)userId       2)firstName       3)lastName       4)profileImage        **A) Available values-**       1)userId       2)firstName       3)lastName       4)emailId       5)profileImage       6)birthDate        */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseUserList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_recommended_users_from_db_with_http_info(interaction_id, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_recommended_users_from_db_with_http_info(interaction_id, start, end, requester_id, client_token, **kwargs)
            return data

    def get_recommended_users_from_db_with_http_info(self, interaction_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of recommended Users from DB
        Returns the list of recommended users from DB

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_recommended_users_from_db_with_http_info(interaction_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str association: association
        :param str fields: Filter fields in result list        /*   **A) Default values -**        1)userId       2)firstName       3)lastName       4)profileImage        **A) Available values-**       1)userId       2)firstName       3)lastName       4)emailId       5)profileImage       6)birthDate        */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseUserList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interaction_id', 'start', 'end', 'requester_id', 'client_token', 'association', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recommended_users_from_db" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interaction_id' is set
        if ('interaction_id' not in params) or (params['interaction_id'] is None):
            raise ValueError("Missing the required parameter `interaction_id` when calling `get_recommended_users_from_db`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_recommended_users_from_db`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_recommended_users_from_db`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_recommended_users_from_db`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_recommended_users_from_db`")

        resource_path = '/interactions/{interactionId}/recommendedUsers'.replace('{format}', 'json')
        path_params = {}
        if 'interaction_id' in params:
            path_params['interactionId'] = params['interaction_id']

        query_params = {}
        if 'association' in params:
            query_params['association'] = params['association']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseUserList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_responses(self, interaction_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of responses by interactionId
        Returns the list of responses by interactionId

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_responses(interaction_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionResponseList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_responses_with_http_info(interaction_id, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_responses_with_http_info(interaction_id, start, end, requester_id, client_token, **kwargs)
            return data

    def get_responses_with_http_info(self, interaction_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of responses by interactionId
        Returns the list of responses by interactionId

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_responses_with_http_info(interaction_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionResponseList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interaction_id', 'start', 'end', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_responses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interaction_id' is set
        if ('interaction_id' not in params) or (params['interaction_id'] is None):
            raise ValueError("Missing the required parameter `interaction_id` when calling `get_responses`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_responses`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_responses`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_responses`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_responses`")

        resource_path = '/interactions/{interactionId}/responses'.replace('{format}', 'json')
        path_params = {}
        if 'interaction_id' in params:
            path_params['interactionId'] = params['interaction_id']

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteractionResponseList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_user_interactions(self, user_id, interaction_status, start, end, requester_id, client_token, **kwargs):
        """
        Get list of interactions shared by user
        Returns the list of interactions shared by specific user

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_interactions(user_id, interaction_status, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId whose shared interactions want to get (required)
        :param str interaction_status:   /*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED   */ (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int category_id: categoryId
        :param str interaction_type: Interaction Type
        :param str association: association
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_interactions_with_http_info(user_id, interaction_status, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_user_interactions_with_http_info(user_id, interaction_status, start, end, requester_id, client_token, **kwargs)
            return data

    def get_user_interactions_with_http_info(self, user_id, interaction_status, start, end, requester_id, client_token, **kwargs):
        """
        Get list of interactions shared by user
        Returns the list of interactions shared by specific user

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_interactions_with_http_info(user_id, interaction_status, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: userId whose shared interactions want to get (required)
        :param str interaction_status:   /*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED   */ (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int category_id: categoryId
        :param str interaction_type: Interaction Type
        :param str association: association
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'interaction_status', 'start', 'end', 'requester_id', 'client_token', 'category_id', 'interaction_type', 'association', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_interactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_user_interactions`")
        # verify the required parameter 'interaction_status' is set
        if ('interaction_status' not in params) or (params['interaction_status'] is None):
            raise ValueError("Missing the required parameter `interaction_status` when calling `get_user_interactions`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_user_interactions`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_user_interactions`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_user_interactions`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_user_interactions`")

        resource_path = '/interactions/{userId}/shared'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'interaction_status' in params:
            query_params['interactionStatus'] = params['interaction_status']
        if 'category_id' in params:
            query_params['categoryId'] = params['category_id']
        if 'interaction_type' in params:
            query_params['interactionType'] = params['interaction_type']
        if 'association' in params:
            query_params['association'] = params['association']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteractionList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_user_subscribed_interaction_categories(self, user_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of interaction categories subscribed by the user
        Returns the list of interaction categories subscribed by the user

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_subscribed_interaction_categories(user_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: User Id whose subcripbed category want to get (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str interaction_type: interactionType
        :param str association: association
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionCategoryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_subscribed_interaction_categories_with_http_info(user_id, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_user_subscribed_interaction_categories_with_http_info(user_id, start, end, requester_id, client_token, **kwargs)
            return data

    def get_user_subscribed_interaction_categories_with_http_info(self, user_id, start, end, requester_id, client_token, **kwargs):
        """
        Get list of interaction categories subscribed by the user
        Returns the list of interaction categories subscribed by the user

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_subscribed_interaction_categories_with_http_info(user_id, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: User Id whose subcripbed category want to get (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str interaction_type: interactionType
        :param str association: association
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionCategoryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'start', 'end', 'requester_id', 'client_token', 'interaction_type', 'association', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_subscribed_interaction_categories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_user_subscribed_interaction_categories`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_user_subscribed_interaction_categories`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_user_subscribed_interaction_categories`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_user_subscribed_interaction_categories`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_user_subscribed_interaction_categories`")

        resource_path = '/interactions/categories/{userId}/subscribe'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'interaction_type' in params:
            query_params['interactionType'] = params['interaction_type']
        if 'association' in params:
            query_params['association'] = params['association']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteractionCategoryList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_user_subscribed_interactions(self, user_id, interaction_status, start, end, requester_id, client_token, **kwargs):
        """
        Get list of interactions subscribed by user
        Returns the list of interactions subscribed by specific user

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_subscribed_interactions(user_id, interaction_status, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: User Id whose subcribed interactions wants to get (required)
        :param str interaction_status:   /*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED   */ (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int category_id: categoryId
        :param str interaction_type: Interaction Type
        :param str association: association
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_subscribed_interactions_with_http_info(user_id, interaction_status, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.get_user_subscribed_interactions_with_http_info(user_id, interaction_status, start, end, requester_id, client_token, **kwargs)
            return data

    def get_user_subscribed_interactions_with_http_info(self, user_id, interaction_status, start, end, requester_id, client_token, **kwargs):
        """
        Get list of interactions subscribed by user
        Returns the list of interactions subscribed by specific user

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_subscribed_interactions_with_http_info(user_id, interaction_status, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: User Id whose subcribed interactions wants to get (required)
        :param str interaction_status:   /*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED   */ (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param int category_id: categoryId
        :param str interaction_type: Interaction Type
        :param str association: association
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'interaction_status', 'start', 'end', 'requester_id', 'client_token', 'category_id', 'interaction_type', 'association', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_subscribed_interactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_user_subscribed_interactions`")
        # verify the required parameter 'interaction_status' is set
        if ('interaction_status' not in params) or (params['interaction_status'] is None):
            raise ValueError("Missing the required parameter `interaction_status` when calling `get_user_subscribed_interactions`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_user_subscribed_interactions`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_user_subscribed_interactions`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `get_user_subscribed_interactions`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `get_user_subscribed_interactions`")

        resource_path = '/interactions/{userId}/subscribe'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']

        query_params = {}
        if 'interaction_status' in params:
            query_params['interactionStatus'] = params['interaction_status']
        if 'category_id' in params:
            query_params['categoryId'] = params['category_id']
        if 'interaction_type' in params:
            query_params['interactionType'] = params['interaction_type']
        if 'association' in params:
            query_params['association'] = params['association']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteractionList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def like_response(self, interaction_id, response_id, requester_id, client_token, **kwargs):
        """
        Like response
        Allows the user to like the response.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.like_response(interaction_id, response_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param int response_id: responseId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.like_response_with_http_info(interaction_id, response_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.like_response_with_http_info(interaction_id, response_id, requester_id, client_token, **kwargs)
            return data

    def like_response_with_http_info(self, interaction_id, response_id, requester_id, client_token, **kwargs):
        """
        Like response
        Allows the user to like the response.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.like_response_with_http_info(interaction_id, response_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param int response_id: responseId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interaction_id', 'response_id', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method like_response" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interaction_id' is set
        if ('interaction_id' not in params) or (params['interaction_id'] is None):
            raise ValueError("Missing the required parameter `interaction_id` when calling `like_response`")
        # verify the required parameter 'response_id' is set
        if ('response_id' not in params) or (params['response_id'] is None):
            raise ValueError("Missing the required parameter `response_id` when calling `like_response`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `like_response`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `like_response`")

        resource_path = '/interactions/{interactionId}/responses/{responseId}/like'.replace('{format}', 'json')
        path_params = {}
        if 'interaction_id' in params:
            path_params['interactionId'] = params['interaction_id']
        if 'response_id' in params:
            path_params['responseId'] = params['response_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteractionResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def mark_as_an_response(self, interaction_id, response_id, requester_id, client_token, **kwargs):
        """
        Mark response as a response
        Marks the response as accepted. This means the user is satisfied with the response & then the interaction will go into closed state

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.mark_as_an_response(interaction_id, response_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param int response_id: responseId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.mark_as_an_response_with_http_info(interaction_id, response_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.mark_as_an_response_with_http_info(interaction_id, response_id, requester_id, client_token, **kwargs)
            return data

    def mark_as_an_response_with_http_info(self, interaction_id, response_id, requester_id, client_token, **kwargs):
        """
        Mark response as a response
        Marks the response as accepted. This means the user is satisfied with the response & then the interaction will go into closed state

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.mark_as_an_response_with_http_info(interaction_id, response_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param int response_id: responseId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interaction_id', 'response_id', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_as_an_response" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interaction_id' is set
        if ('interaction_id' not in params) or (params['interaction_id'] is None):
            raise ValueError("Missing the required parameter `interaction_id` when calling `mark_as_an_response`")
        # verify the required parameter 'response_id' is set
        if ('response_id' not in params) or (params['response_id'] is None):
            raise ValueError("Missing the required parameter `response_id` when calling `mark_as_an_response`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `mark_as_an_response`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `mark_as_an_response`")

        resource_path = '/interactions/{interactionId}/responses/{responseId}/mark'.replace('{format}', 'json')
        path_params = {}
        if 'interaction_id' in params:
            path_params['interactionId'] = params['interaction_id']
        if 'response_id' in params:
            path_params['responseId'] = params['response_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteractionResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def search_interactions(self, search_text, interaction_status, start, end, requester_id, client_token, **kwargs):
        """
        Get list of matching interactions
        Returns the list of matching interactions

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_interactions(search_text, interaction_status, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search_text: Search Text, keywords to search (required)
        :param str interaction_status:   /*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED  */ (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str interaction_type: Interaction Type
        :param str association: association
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_interactions_with_http_info(search_text, interaction_status, start, end, requester_id, client_token, **kwargs)
        else:
            (data) = self.search_interactions_with_http_info(search_text, interaction_status, start, end, requester_id, client_token, **kwargs)
            return data

    def search_interactions_with_http_info(self, search_text, interaction_status, start, end, requester_id, client_token, **kwargs):
        """
        Get list of matching interactions
        Returns the list of matching interactions

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_interactions_with_http_info(search_text, interaction_status, start, end, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search_text: Search Text, keywords to search (required)
        :param str interaction_status:   /*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED  */ (required)
        :param int start: start, initial value start from 0 (required)
        :param int end: end (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str interaction_type: Interaction Type
        :param str association: association
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_text', 'interaction_status', 'start', 'end', 'requester_id', 'client_token', 'interaction_type', 'association', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_interactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_text' is set
        if ('search_text' not in params) or (params['search_text'] is None):
            raise ValueError("Missing the required parameter `search_text` when calling `search_interactions`")
        # verify the required parameter 'interaction_status' is set
        if ('interaction_status' not in params) or (params['interaction_status'] is None):
            raise ValueError("Missing the required parameter `interaction_status` when calling `search_interactions`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `search_interactions`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `search_interactions`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `search_interactions`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `search_interactions`")

        resource_path = '/interactions/search'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'search_text' in params:
            query_params['searchText'] = params['search_text']
        if 'interaction_type' in params:
            query_params['interactionType'] = params['interaction_type']
        if 'interaction_status' in params:
            query_params['interactionStatus'] = params['interaction_status']
        if 'association' in params:
            query_params['association'] = params['association']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteractionList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def subscribe_interactin_category(self, category_id, requester_id, client_token, **kwargs):
        """
        Subscribe interaction category
        Returns the subscribed interaction category

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.subscribe_interactin_category(category_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.subscribe_interactin_category_with_http_info(category_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.subscribe_interactin_category_with_http_info(category_id, requester_id, client_token, **kwargs)
            return data

    def subscribe_interactin_category_with_http_info(self, category_id, requester_id, client_token, **kwargs):
        """
        Subscribe interaction category
        Returns the subscribed interaction category

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.subscribe_interactin_category_with_http_info(category_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscribe_interactin_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `subscribe_interactin_category`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `subscribe_interactin_category`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `subscribe_interactin_category`")

        resource_path = '/interactions/categories/{categoryId}/subscribe'.replace('{format}', 'json')
        path_params = {}
        if 'category_id' in params:
            path_params['categoryId'] = params['category_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteractionCategory',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def subscribe_interaction(self, interaction_id, requester_id, client_token, **kwargs):
        """
        Subscribe interaction
        Allows the user to subscribe a interaction

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.subscribe_interaction(interaction_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteraction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.subscribe_interaction_with_http_info(interaction_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.subscribe_interaction_with_http_info(interaction_id, requester_id, client_token, **kwargs)
            return data

    def subscribe_interaction_with_http_info(self, interaction_id, requester_id, client_token, **kwargs):
        """
        Subscribe interaction
        Allows the user to subscribe a interaction

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.subscribe_interaction_with_http_info(interaction_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteraction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interaction_id', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscribe_interaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interaction_id' is set
        if ('interaction_id' not in params) or (params['interaction_id'] is None):
            raise ValueError("Missing the required parameter `interaction_id` when calling `subscribe_interaction`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `subscribe_interaction`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `subscribe_interaction`")

        resource_path = '/interactions/{interactionId}/subscribe'.replace('{format}', 'json')
        path_params = {}
        if 'interaction_id' in params:
            path_params['interactionId'] = params['interaction_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteraction',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def unmark_as_an_response(self, interaction_id, response_id, requester_id, client_token, **kwargs):
        """
        Unmark response as a response
        Unmarks the response. This will remove the marked response.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unmark_as_an_response(interaction_id, response_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param int response_id: responseId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.unmark_as_an_response_with_http_info(interaction_id, response_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.unmark_as_an_response_with_http_info(interaction_id, response_id, requester_id, client_token, **kwargs)
            return data

    def unmark_as_an_response_with_http_info(self, interaction_id, response_id, requester_id, client_token, **kwargs):
        """
        Unmark response as a response
        Unmarks the response. This will remove the marked response.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unmark_as_an_response_with_http_info(interaction_id, response_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param int response_id: responseId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interaction_id', 'response_id', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unmark_as_an_response" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interaction_id' is set
        if ('interaction_id' not in params) or (params['interaction_id'] is None):
            raise ValueError("Missing the required parameter `interaction_id` when calling `unmark_as_an_response`")
        # verify the required parameter 'response_id' is set
        if ('response_id' not in params) or (params['response_id'] is None):
            raise ValueError("Missing the required parameter `response_id` when calling `unmark_as_an_response`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `unmark_as_an_response`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `unmark_as_an_response`")

        resource_path = '/interactions/{interactionId}/responses/{responseId}/unmark'.replace('{format}', 'json')
        path_params = {}
        if 'interaction_id' in params:
            path_params['interactionId'] = params['interaction_id']
        if 'response_id' in params:
            path_params['responseId'] = params['response_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteractionResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def unsubscribe_interactin_category(self, category_id, requester_id, client_token, **kwargs):
        """
        Unsubscribe interaction category
        Returns the unsubscribed interaction category

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unsubscribe_interactin_category(category_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.unsubscribe_interactin_category_with_http_info(category_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.unsubscribe_interactin_category_with_http_info(category_id, requester_id, client_token, **kwargs)
            return data

    def unsubscribe_interactin_category_with_http_info(self, category_id, requester_id, client_token, **kwargs):
        """
        Unsubscribe interaction category
        Returns the unsubscribed interaction category

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unsubscribe_interactin_category_with_http_info(category_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unsubscribe_interactin_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `unsubscribe_interactin_category`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `unsubscribe_interactin_category`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `unsubscribe_interactin_category`")

        resource_path = '/interactions/categories/{categoryId}/unsubscribe'.replace('{format}', 'json')
        path_params = {}
        if 'category_id' in params:
            path_params['categoryId'] = params['category_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteractionCategory',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def unsubscribe_interaction(self, interaction_id, requester_id, client_token, **kwargs):
        """
        Unsubscribe interaction
        Allows the user to unsubscribe a interaction

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unsubscribe_interaction(interaction_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteraction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.unsubscribe_interaction_with_http_info(interaction_id, requester_id, client_token, **kwargs)
        else:
            (data) = self.unsubscribe_interaction_with_http_info(interaction_id, requester_id, client_token, **kwargs)
            return data

    def unsubscribe_interaction_with_http_info(self, interaction_id, requester_id, client_token, **kwargs):
        """
        Unsubscribe interaction
        Allows the user to unsubscribe a interaction

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unsubscribe_interaction_with_http_info(interaction_id, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteraction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interaction_id', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unsubscribe_interaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interaction_id' is set
        if ('interaction_id' not in params) or (params['interaction_id'] is None):
            raise ValueError("Missing the required parameter `interaction_id` when calling `unsubscribe_interaction`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `unsubscribe_interaction`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `unsubscribe_interaction`")

        resource_path = '/interactions/{interactionId}/unsubscribe'.replace('{format}', 'json')
        path_params = {}
        if 'interaction_id' in params:
            path_params['interactionId'] = params['interaction_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteraction',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_interaction(self, interaction_id, interaction_title, requester_id, client_token, **kwargs):
        """
        Update interaction
        Allows the user to update interaction. Returns the updated interaction

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_interaction(interaction_id, interaction_title, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param str interaction_title: Interaction Title (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str interaction_description: Describe Interaction
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteraction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_interaction_with_http_info(interaction_id, interaction_title, requester_id, client_token, **kwargs)
        else:
            (data) = self.update_interaction_with_http_info(interaction_id, interaction_title, requester_id, client_token, **kwargs)
            return data

    def update_interaction_with_http_info(self, interaction_id, interaction_title, requester_id, client_token, **kwargs):
        """
        Update interaction
        Allows the user to update interaction. Returns the updated interaction

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_interaction_with_http_info(interaction_id, interaction_title, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int interaction_id: interactionId (required)
        :param str interaction_title: Interaction Title (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str interaction_description: Describe Interaction
        :param str fields: Filter fields in result list      /*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteraction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interaction_id', 'interaction_title', 'requester_id', 'client_token', 'interaction_description', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_interaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interaction_id' is set
        if ('interaction_id' not in params) or (params['interaction_id'] is None):
            raise ValueError("Missing the required parameter `interaction_id` when calling `update_interaction`")
        # verify the required parameter 'interaction_title' is set
        if ('interaction_title' not in params) or (params['interaction_title'] is None):
            raise ValueError("Missing the required parameter `interaction_title` when calling `update_interaction`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `update_interaction`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `update_interaction`")

        resource_path = '/interactions/{interactionId}'.replace('{format}', 'json')
        path_params = {}
        if 'interaction_id' in params:
            path_params['interactionId'] = params['interaction_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'interaction_title' in params:
            form_params.append(('interactionTitle', params['interaction_title']))
        if 'interaction_description' in params:
            form_params.append(('interactionDescription', params['interaction_description']))
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteraction',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_interaction_category(self, category_id, category_name, requester_id, client_token, **kwargs):
        """
        Update interaction category
        Allows the user to update the interaction category. Returns the updated interaction category

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_interaction_category(category_id, category_name, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str category_name: Category Name (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str category_description: Describe category
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_interaction_category_with_http_info(category_id, category_name, requester_id, client_token, **kwargs)
        else:
            (data) = self.update_interaction_category_with_http_info(category_id, category_name, requester_id, client_token, **kwargs)
            return data

    def update_interaction_category_with_http_info(self, category_id, category_name, requester_id, client_token, **kwargs):
        """
        Update interaction category
        Allows the user to update the interaction category. Returns the updated interaction category

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_interaction_category_with_http_info(category_id, category_name, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: categoryId (required)
        :param str category_name: Category Name (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str category_description: Describe category
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id', 'category_name', 'requester_id', 'client_token', 'category_description', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_interaction_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `update_interaction_category`")
        # verify the required parameter 'category_name' is set
        if ('category_name' not in params) or (params['category_name'] is None):
            raise ValueError("Missing the required parameter `category_name` when calling `update_interaction_category`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `update_interaction_category`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `update_interaction_category`")

        resource_path = '/interactions/categories/{categoryId}'.replace('{format}', 'json')
        path_params = {}
        if 'category_id' in params:
            path_params['categoryId'] = params['category_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'category_name' in params:
            form_params.append(('categoryName', params['category_name']))
        if 'category_description' in params:
            form_params.append(('categoryDescription', params['category_description']))
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteractionCategory',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_response(self, response_id, response, requester_id, client_token, **kwargs):
        """
        Update response
        Allows the user to update an response. Returns the updated response

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_response(response_id, response, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int response_id: responseId (required)
        :param str response: response (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_response_with_http_info(response_id, response, requester_id, client_token, **kwargs)
        else:
            (data) = self.update_response_with_http_info(response_id, response, requester_id, client_token, **kwargs)
            return data

    def update_response_with_http_info(self, response_id, response, requester_id, client_token, **kwargs):
        """
        Update response
        Allows the user to update an response. Returns the updated response

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_response_with_http_info(response_id, response, requester_id, client_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int response_id: responseId (required)
        :param str response: response (required)
        :param str requester_id: requesterId can be user id OR email address. (required)
        :param str client_token: Use the Client Token. Please generate it from the Applications section under the Production & Sandbox tabs (required)
        :param str fields: Filter fields in result list       /*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   */
        :param str access_token: Unique session token for user. To get access token user will have to authenticate
        :return: VerveResponseInteractionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['response_id', 'response', 'requester_id', 'client_token', 'fields', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_response" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'response_id' is set
        if ('response_id' not in params) or (params['response_id'] is None):
            raise ValueError("Missing the required parameter `response_id` when calling `update_response`")
        # verify the required parameter 'response' is set
        if ('response' not in params) or (params['response'] is None):
            raise ValueError("Missing the required parameter `response` when calling `update_response`")
        # verify the required parameter 'requester_id' is set
        if ('requester_id' not in params) or (params['requester_id'] is None):
            raise ValueError("Missing the required parameter `requester_id` when calling `update_response`")
        # verify the required parameter 'client_token' is set
        if ('client_token' not in params) or (params['client_token'] is None):
            raise ValueError("Missing the required parameter `client_token` when calling `update_response`")

        resource_path = '/interactions/responses/{responseId}'.replace('{format}', 'json')
        path_params = {}
        if 'response_id' in params:
            path_params['responseId'] = params['response_id']

        query_params = {}

        header_params = {}
        if 'requester_id' in params:
            header_params['requesterId'] = params['requester_id']
        if 'access_token' in params:
            header_params['accessToken'] = params['access_token']
        if 'client_token' in params:
            header_params['clientToken'] = params['client_token']

        form_params = []
        local_var_files = {}
        if 'response' in params:
            form_params.append(('response', params['response']))
        if 'fields' in params:
            form_params.append(('fields', params['fields']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['default']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VerveResponseInteractionResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
