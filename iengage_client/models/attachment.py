# coding: utf-8

"""
    Stakeholder engagement API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Attachment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, headers=None, object=None, content_id=None, data_handler=None, content_disposition=None, content_type=None):
        """
        Attachment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'headers': 'dict(str, list[str])',
            'object': 'object',
            'content_id': 'str',
            'data_handler': 'DataHandler',
            'content_disposition': 'ContentDisposition',
            'content_type': 'MediaType'
        }

        self.attribute_map = {
            'headers': 'headers',
            'object': 'object',
            'content_id': 'contentId',
            'data_handler': 'dataHandler',
            'content_disposition': 'contentDisposition',
            'content_type': 'contentType'
        }

        self._headers = headers
        self._object = object
        self._content_id = content_id
        self._data_handler = data_handler
        self._content_disposition = content_disposition
        self._content_type = content_type

    @property
    def headers(self):
        """
        Gets the headers of this Attachment.

        :return: The headers of this Attachment.
        :rtype: dict(str, list[str])
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """
        Sets the headers of this Attachment.

        :param headers: The headers of this Attachment.
        :type: dict(str, list[str])
        """

        self._headers = headers

    @property
    def object(self):
        """
        Gets the object of this Attachment.

        :return: The object of this Attachment.
        :rtype: object
        """
        return self._object

    @object.setter
    def object(self, object):
        """
        Sets the object of this Attachment.

        :param object: The object of this Attachment.
        :type: object
        """

        self._object = object

    @property
    def content_id(self):
        """
        Gets the content_id of this Attachment.

        :return: The content_id of this Attachment.
        :rtype: str
        """
        return self._content_id

    @content_id.setter
    def content_id(self, content_id):
        """
        Sets the content_id of this Attachment.

        :param content_id: The content_id of this Attachment.
        :type: str
        """

        self._content_id = content_id

    @property
    def data_handler(self):
        """
        Gets the data_handler of this Attachment.

        :return: The data_handler of this Attachment.
        :rtype: DataHandler
        """
        return self._data_handler

    @data_handler.setter
    def data_handler(self, data_handler):
        """
        Sets the data_handler of this Attachment.

        :param data_handler: The data_handler of this Attachment.
        :type: DataHandler
        """

        self._data_handler = data_handler

    @property
    def content_disposition(self):
        """
        Gets the content_disposition of this Attachment.

        :return: The content_disposition of this Attachment.
        :rtype: ContentDisposition
        """
        return self._content_disposition

    @content_disposition.setter
    def content_disposition(self, content_disposition):
        """
        Sets the content_disposition of this Attachment.

        :param content_disposition: The content_disposition of this Attachment.
        :type: ContentDisposition
        """

        self._content_disposition = content_disposition

    @property
    def content_type(self):
        """
        Gets the content_type of this Attachment.

        :return: The content_type of this Attachment.
        :rtype: MediaType
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """
        Sets the content_type of this Attachment.

        :param content_type: The content_type of this Attachment.
        :type: MediaType
        """

        self._content_type = content_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
