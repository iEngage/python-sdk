# coding: utf-8

"""
    iEngage 2.0 API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InteractionInputModel(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, interaction_title=None, interaction_description=None, interaction_type=None, association=None, category_id=None):
        """
        InteractionInputModel - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'interaction_title': 'str',
            'interaction_description': 'str',
            'interaction_type': 'str',
            'association': 'str',
            'category_id': 'int'
        }

        self.attribute_map = {
            'interaction_title': 'interactionTitle',
            'interaction_description': 'interactionDescription',
            'interaction_type': 'interactionType',
            'association': 'association',
            'category_id': 'categoryId'
        }

        self._interaction_title = interaction_title
        self._interaction_description = interaction_description
        self._interaction_type = interaction_type
        self._association = association
        self._category_id = category_id

    @property
    def interaction_title(self):
        """
        Gets the interaction_title of this InteractionInputModel.

        :return: The interaction_title of this InteractionInputModel.
        :rtype: str
        """
        return self._interaction_title

    @interaction_title.setter
    def interaction_title(self, interaction_title):
        """
        Sets the interaction_title of this InteractionInputModel.

        :param interaction_title: The interaction_title of this InteractionInputModel.
        :type: str
        """

        self._interaction_title = interaction_title

    @property
    def interaction_description(self):
        """
        Gets the interaction_description of this InteractionInputModel.

        :return: The interaction_description of this InteractionInputModel.
        :rtype: str
        """
        return self._interaction_description

    @interaction_description.setter
    def interaction_description(self, interaction_description):
        """
        Sets the interaction_description of this InteractionInputModel.

        :param interaction_description: The interaction_description of this InteractionInputModel.
        :type: str
        """

        self._interaction_description = interaction_description

    @property
    def interaction_type(self):
        """
        Gets the interaction_type of this InteractionInputModel.

        :return: The interaction_type of this InteractionInputModel.
        :rtype: str
        """
        return self._interaction_type

    @interaction_type.setter
    def interaction_type(self, interaction_type):
        """
        Sets the interaction_type of this InteractionInputModel.

        :param interaction_type: The interaction_type of this InteractionInputModel.
        :type: str
        """

        self._interaction_type = interaction_type

    @property
    def association(self):
        """
        Gets the association of this InteractionInputModel.

        :return: The association of this InteractionInputModel.
        :rtype: str
        """
        return self._association

    @association.setter
    def association(self, association):
        """
        Sets the association of this InteractionInputModel.

        :param association: The association of this InteractionInputModel.
        :type: str
        """

        self._association = association

    @property
    def category_id(self):
        """
        Gets the category_id of this InteractionInputModel.

        :return: The category_id of this InteractionInputModel.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """
        Sets the category_id of this InteractionInputModel.

        :param category_id: The category_id of this InteractionInputModel.
        :type: int
        """

        self._category_id = category_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
