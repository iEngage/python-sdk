# coding: utf-8

"""
    Stakeholder engagement API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Solution(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, solution_id=None, solution_description=None, complaint_id=None, solving_user=None, created_date=None, is_marked_solution=False, no_of_likes=None, no_of_dislikes=None, reply_count=None, is_liked=False, is_disliked=False):
        """
        Solution - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'solution_id': 'int',
            'solution_description': 'str',
            'complaint_id': 'int',
            'solving_user': 'User',
            'created_date': 'datetime',
            'is_marked_solution': 'bool',
            'no_of_likes': 'int',
            'no_of_dislikes': 'int',
            'reply_count': 'int',
            'is_liked': 'bool',
            'is_disliked': 'bool'
        }

        self.attribute_map = {
            'solution_id': 'solutionId',
            'solution_description': 'solutionDescription',
            'complaint_id': 'complaintId',
            'solving_user': 'solvingUser',
            'created_date': 'createdDate',
            'is_marked_solution': 'isMarkedSolution',
            'no_of_likes': 'noOfLikes',
            'no_of_dislikes': 'noOfDislikes',
            'reply_count': 'replyCount',
            'is_liked': 'isLiked',
            'is_disliked': 'isDisliked'
        }

        self._solution_id = solution_id
        self._solution_description = solution_description
        self._complaint_id = complaint_id
        self._solving_user = solving_user
        self._created_date = created_date
        self._is_marked_solution = is_marked_solution
        self._no_of_likes = no_of_likes
        self._no_of_dislikes = no_of_dislikes
        self._reply_count = reply_count
        self._is_liked = is_liked
        self._is_disliked = is_disliked

    @property
    def solution_id(self):
        """
        Gets the solution_id of this Solution.

        :return: The solution_id of this Solution.
        :rtype: int
        """
        return self._solution_id

    @solution_id.setter
    def solution_id(self, solution_id):
        """
        Sets the solution_id of this Solution.

        :param solution_id: The solution_id of this Solution.
        :type: int
        """

        self._solution_id = solution_id

    @property
    def solution_description(self):
        """
        Gets the solution_description of this Solution.

        :return: The solution_description of this Solution.
        :rtype: str
        """
        return self._solution_description

    @solution_description.setter
    def solution_description(self, solution_description):
        """
        Sets the solution_description of this Solution.

        :param solution_description: The solution_description of this Solution.
        :type: str
        """

        self._solution_description = solution_description

    @property
    def complaint_id(self):
        """
        Gets the complaint_id of this Solution.

        :return: The complaint_id of this Solution.
        :rtype: int
        """
        return self._complaint_id

    @complaint_id.setter
    def complaint_id(self, complaint_id):
        """
        Sets the complaint_id of this Solution.

        :param complaint_id: The complaint_id of this Solution.
        :type: int
        """

        self._complaint_id = complaint_id

    @property
    def solving_user(self):
        """
        Gets the solving_user of this Solution.

        :return: The solving_user of this Solution.
        :rtype: User
        """
        return self._solving_user

    @solving_user.setter
    def solving_user(self, solving_user):
        """
        Sets the solving_user of this Solution.

        :param solving_user: The solving_user of this Solution.
        :type: User
        """

        self._solving_user = solving_user

    @property
    def created_date(self):
        """
        Gets the created_date of this Solution.

        :return: The created_date of this Solution.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this Solution.

        :param created_date: The created_date of this Solution.
        :type: datetime
        """

        self._created_date = created_date

    @property
    def is_marked_solution(self):
        """
        Gets the is_marked_solution of this Solution.

        :return: The is_marked_solution of this Solution.
        :rtype: bool
        """
        return self._is_marked_solution

    @is_marked_solution.setter
    def is_marked_solution(self, is_marked_solution):
        """
        Sets the is_marked_solution of this Solution.

        :param is_marked_solution: The is_marked_solution of this Solution.
        :type: bool
        """

        self._is_marked_solution = is_marked_solution

    @property
    def no_of_likes(self):
        """
        Gets the no_of_likes of this Solution.

        :return: The no_of_likes of this Solution.
        :rtype: int
        """
        return self._no_of_likes

    @no_of_likes.setter
    def no_of_likes(self, no_of_likes):
        """
        Sets the no_of_likes of this Solution.

        :param no_of_likes: The no_of_likes of this Solution.
        :type: int
        """

        self._no_of_likes = no_of_likes

    @property
    def no_of_dislikes(self):
        """
        Gets the no_of_dislikes of this Solution.

        :return: The no_of_dislikes of this Solution.
        :rtype: int
        """
        return self._no_of_dislikes

    @no_of_dislikes.setter
    def no_of_dislikes(self, no_of_dislikes):
        """
        Sets the no_of_dislikes of this Solution.

        :param no_of_dislikes: The no_of_dislikes of this Solution.
        :type: int
        """

        self._no_of_dislikes = no_of_dislikes

    @property
    def reply_count(self):
        """
        Gets the reply_count of this Solution.

        :return: The reply_count of this Solution.
        :rtype: int
        """
        return self._reply_count

    @reply_count.setter
    def reply_count(self, reply_count):
        """
        Sets the reply_count of this Solution.

        :param reply_count: The reply_count of this Solution.
        :type: int
        """

        self._reply_count = reply_count

    @property
    def is_liked(self):
        """
        Gets the is_liked of this Solution.

        :return: The is_liked of this Solution.
        :rtype: bool
        """
        return self._is_liked

    @is_liked.setter
    def is_liked(self, is_liked):
        """
        Sets the is_liked of this Solution.

        :param is_liked: The is_liked of this Solution.
        :type: bool
        """

        self._is_liked = is_liked

    @property
    def is_disliked(self):
        """
        Gets the is_disliked of this Solution.

        :return: The is_disliked of this Solution.
        :rtype: bool
        """
        return self._is_disliked

    @is_disliked.setter
    def is_disliked(self, is_disliked):
        """
        Sets the is_disliked of this Solution.

        :param is_disliked: The is_disliked of this Solution.
        :type: bool
        """

        self._is_disliked = is_disliked

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
