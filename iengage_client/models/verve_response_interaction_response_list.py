# coding: utf-8

"""
    iEngage 2.0 API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class VerveResponseInteractionResponseList(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, status_code=None, message=None, list=None, data=None, records=None):
        """
        VerveResponseInteractionResponseList - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'status_code': 'str',
            'message': 'str',
            'list': 'list[InteractionResponse]',
            'data': 'InteractionResponse',
            'records': 'int'
        }

        self.attribute_map = {
            'status_code': 'statusCode',
            'message': 'message',
            'list': 'list',
            'data': 'data',
            'records': 'records'
        }

        self._status_code = status_code
        self._message = message
        self._list = list
        self._data = data
        self._records = records

    @property
    def status_code(self):
        """
        Gets the status_code of this VerveResponseInteractionResponseList.


        :return: The status_code of this VerveResponseInteractionResponseList.
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """
        Sets the status_code of this VerveResponseInteractionResponseList.


        :param status_code: The status_code of this VerveResponseInteractionResponseList.
        :type: str
        """

        self._status_code = status_code

    @property
    def message(self):
        """
        Gets the message of this VerveResponseInteractionResponseList.


        :return: The message of this VerveResponseInteractionResponseList.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this VerveResponseInteractionResponseList.


        :param message: The message of this VerveResponseInteractionResponseList.
        :type: str
        """

        self._message = message

    @property
    def list(self):
        """
        Gets the list of this VerveResponseInteractionResponseList.


        :return: The list of this VerveResponseInteractionResponseList.
        :rtype: list[InteractionResponse]
        """
        return self._list

    @list.setter
    def list(self, list):
        """
        Sets the list of this VerveResponseInteractionResponseList.


        :param list: The list of this VerveResponseInteractionResponseList.
        :type: list[InteractionResponse]
        """

        self._list = list

    @property
    def data(self):
        """
        Gets the data of this VerveResponseInteractionResponseList.


        :return: The data of this VerveResponseInteractionResponseList.
        :rtype: InteractionResponse
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this VerveResponseInteractionResponseList.


        :param data: The data of this VerveResponseInteractionResponseList.
        :type: InteractionResponse
        """

        self._data = data

    @property
    def records(self):
        """
        Gets the records of this VerveResponseInteractionResponseList.


        :return: The records of this VerveResponseInteractionResponseList.
        :rtype: int
        """
        return self._records

    @records.setter
    def records(self, records):
        """
        Sets the records of this VerveResponseInteractionResponseList.


        :param records: The records of this VerveResponseInteractionResponseList.
        :type: int
        """

        self._records = records

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
