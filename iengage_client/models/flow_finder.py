# coding: utf-8

"""
    iEngage 2.0 API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FlowFinder(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, question=None, complaint=None, suggestion=None, appreciation=None, comment=None):
        """
        FlowFinder - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'question': 'float',
            'complaint': 'float',
            'suggestion': 'float',
            'appreciation': 'float',
            'comment': 'float'
        }

        self.attribute_map = {
            'question': 'question',
            'complaint': 'complaint',
            'suggestion': 'suggestion',
            'appreciation': 'appreciation',
            'comment': 'comment'
        }

        self._question = question
        self._complaint = complaint
        self._suggestion = suggestion
        self._appreciation = appreciation
        self._comment = comment

    @property
    def question(self):
        """
        Gets the question of this FlowFinder.

        :return: The question of this FlowFinder.
        :rtype: float
        """
        return self._question

    @question.setter
    def question(self, question):
        """
        Sets the question of this FlowFinder.

        :param question: The question of this FlowFinder.
        :type: float
        """

        self._question = question

    @property
    def complaint(self):
        """
        Gets the complaint of this FlowFinder.

        :return: The complaint of this FlowFinder.
        :rtype: float
        """
        return self._complaint

    @complaint.setter
    def complaint(self, complaint):
        """
        Sets the complaint of this FlowFinder.

        :param complaint: The complaint of this FlowFinder.
        :type: float
        """

        self._complaint = complaint

    @property
    def suggestion(self):
        """
        Gets the suggestion of this FlowFinder.

        :return: The suggestion of this FlowFinder.
        :rtype: float
        """
        return self._suggestion

    @suggestion.setter
    def suggestion(self, suggestion):
        """
        Sets the suggestion of this FlowFinder.

        :param suggestion: The suggestion of this FlowFinder.
        :type: float
        """

        self._suggestion = suggestion

    @property
    def appreciation(self):
        """
        Gets the appreciation of this FlowFinder.

        :return: The appreciation of this FlowFinder.
        :rtype: float
        """
        return self._appreciation

    @appreciation.setter
    def appreciation(self, appreciation):
        """
        Sets the appreciation of this FlowFinder.

        :param appreciation: The appreciation of this FlowFinder.
        :type: float
        """

        self._appreciation = appreciation

    @property
    def comment(self):
        """
        Gets the comment of this FlowFinder.

        :return: The comment of this FlowFinder.
        :rtype: float
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """
        Sets the comment of this FlowFinder.

        :param comment: The comment of this FlowFinder.
        :type: float
        """

        self._comment = comment

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
