# coding: utf-8

"""
    iEngage 2.0 API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Comment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, comment_id=None, commentor=None, comment_text=None, comment_time=None):
        """
        Comment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'comment_id': 'int',
            'commentor': 'User',
            'comment_text': 'str',
            'comment_time': 'datetime'
        }

        self.attribute_map = {
            'comment_id': 'commentId',
            'commentor': 'commentor',
            'comment_text': 'commentText',
            'comment_time': 'commentTime'
        }

        self._comment_id = comment_id
        self._commentor = commentor
        self._comment_text = comment_text
        self._comment_time = comment_time

    @property
    def comment_id(self):
        """
        Gets the comment_id of this Comment.


        :return: The comment_id of this Comment.
        :rtype: int
        """
        return self._comment_id

    @comment_id.setter
    def comment_id(self, comment_id):
        """
        Sets the comment_id of this Comment.


        :param comment_id: The comment_id of this Comment.
        :type: int
        """

        self._comment_id = comment_id

    @property
    def commentor(self):
        """
        Gets the commentor of this Comment.


        :return: The commentor of this Comment.
        :rtype: User
        """
        return self._commentor

    @commentor.setter
    def commentor(self, commentor):
        """
        Sets the commentor of this Comment.


        :param commentor: The commentor of this Comment.
        :type: User
        """

        self._commentor = commentor

    @property
    def comment_text(self):
        """
        Gets the comment_text of this Comment.


        :return: The comment_text of this Comment.
        :rtype: str
        """
        return self._comment_text

    @comment_text.setter
    def comment_text(self, comment_text):
        """
        Sets the comment_text of this Comment.


        :param comment_text: The comment_text of this Comment.
        :type: str
        """

        self._comment_text = comment_text

    @property
    def comment_time(self):
        """
        Gets the comment_time of this Comment.


        :return: The comment_time of this Comment.
        :rtype: datetime
        """
        return self._comment_time

    @comment_time.setter
    def comment_time(self, comment_time):
        """
        Sets the comment_time of this Comment.


        :param comment_time: The comment_time of this Comment.
        :type: datetime
        """

        self._comment_time = comment_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
