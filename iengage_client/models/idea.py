# coding: utf-8

"""
    iEngage 2.0 API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Idea(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, idea_id=None, idea_title=None, group=None, idea_description=None, ideator=None, idea_creation_date=None, last_modified_date=None, idea_stage=None, domain=None, technology=None, access_type=None, video_id=None, active_status=None, team_status=None, project_status=None, total_followers=None, total_comments=None, total_blogs=None, average_rating_score=None, number_of_ratings=None, current_user_following=False, current_user_rating=None, idea_file_url=None, attachment_list=None, sentiment=None, sentiment_details=None, sentiment_weightage=None, entity=None):
        """
        Idea - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'idea_id': 'int',
            'idea_title': 'str',
            'group': 'Group',
            'idea_description': 'str',
            'ideator': 'User',
            'idea_creation_date': 'datetime',
            'last_modified_date': 'datetime',
            'idea_stage': 'str',
            'domain': 'str',
            'technology': 'str',
            'access_type': 'str',
            'video_id': 'str',
            'active_status': 'str',
            'team_status': 'str',
            'project_status': 'str',
            'total_followers': 'int',
            'total_comments': 'int',
            'total_blogs': 'int',
            'average_rating_score': 'float',
            'number_of_ratings': 'int',
            'current_user_following': 'bool',
            'current_user_rating': 'float',
            'idea_file_url': 'str',
            'attachment_list': 'list[Multimedia]',
            'sentiment': 'str',
            'sentiment_details': 'Sentiment',
            'sentiment_weightage': 'float',
            'entity': 'list[NER]'
        }

        self.attribute_map = {
            'idea_id': 'ideaId',
            'idea_title': 'ideaTitle',
            'group': 'group',
            'idea_description': 'ideaDescription',
            'ideator': 'ideator',
            'idea_creation_date': 'ideaCreationDate',
            'last_modified_date': 'lastModifiedDate',
            'idea_stage': 'ideaStage',
            'domain': 'domain',
            'technology': 'technology',
            'access_type': 'accessType',
            'video_id': 'videoId',
            'active_status': 'activeStatus',
            'team_status': 'teamStatus',
            'project_status': 'projectStatus',
            'total_followers': 'totalFollowers',
            'total_comments': 'totalComments',
            'total_blogs': 'totalBlogs',
            'average_rating_score': 'averageRatingScore',
            'number_of_ratings': 'numberOfRatings',
            'current_user_following': 'currentUserFollowing',
            'current_user_rating': 'currentUserRating',
            'idea_file_url': 'ideaFileURL',
            'attachment_list': 'attachmentList',
            'sentiment': 'sentiment',
            'sentiment_details': 'sentimentDetails',
            'sentiment_weightage': 'sentimentWeightage',
            'entity': 'entity'
        }

        self._idea_id = idea_id
        self._idea_title = idea_title
        self._group = group
        self._idea_description = idea_description
        self._ideator = ideator
        self._idea_creation_date = idea_creation_date
        self._last_modified_date = last_modified_date
        self._idea_stage = idea_stage
        self._domain = domain
        self._technology = technology
        self._access_type = access_type
        self._video_id = video_id
        self._active_status = active_status
        self._team_status = team_status
        self._project_status = project_status
        self._total_followers = total_followers
        self._total_comments = total_comments
        self._total_blogs = total_blogs
        self._average_rating_score = average_rating_score
        self._number_of_ratings = number_of_ratings
        self._current_user_following = current_user_following
        self._current_user_rating = current_user_rating
        self._idea_file_url = idea_file_url
        self._attachment_list = attachment_list
        self._sentiment = sentiment
        self._sentiment_details = sentiment_details
        self._sentiment_weightage = sentiment_weightage
        self._entity = entity

    @property
    def idea_id(self):
        """
        Gets the idea_id of this Idea.

        :return: The idea_id of this Idea.
        :rtype: int
        """
        return self._idea_id

    @idea_id.setter
    def idea_id(self, idea_id):
        """
        Sets the idea_id of this Idea.

        :param idea_id: The idea_id of this Idea.
        :type: int
        """

        self._idea_id = idea_id

    @property
    def idea_title(self):
        """
        Gets the idea_title of this Idea.

        :return: The idea_title of this Idea.
        :rtype: str
        """
        return self._idea_title

    @idea_title.setter
    def idea_title(self, idea_title):
        """
        Sets the idea_title of this Idea.

        :param idea_title: The idea_title of this Idea.
        :type: str
        """

        self._idea_title = idea_title

    @property
    def group(self):
        """
        Gets the group of this Idea.

        :return: The group of this Idea.
        :rtype: Group
        """
        return self._group

    @group.setter
    def group(self, group):
        """
        Sets the group of this Idea.

        :param group: The group of this Idea.
        :type: Group
        """

        self._group = group

    @property
    def idea_description(self):
        """
        Gets the idea_description of this Idea.

        :return: The idea_description of this Idea.
        :rtype: str
        """
        return self._idea_description

    @idea_description.setter
    def idea_description(self, idea_description):
        """
        Sets the idea_description of this Idea.

        :param idea_description: The idea_description of this Idea.
        :type: str
        """

        self._idea_description = idea_description

    @property
    def ideator(self):
        """
        Gets the ideator of this Idea.

        :return: The ideator of this Idea.
        :rtype: User
        """
        return self._ideator

    @ideator.setter
    def ideator(self, ideator):
        """
        Sets the ideator of this Idea.

        :param ideator: The ideator of this Idea.
        :type: User
        """

        self._ideator = ideator

    @property
    def idea_creation_date(self):
        """
        Gets the idea_creation_date of this Idea.

        :return: The idea_creation_date of this Idea.
        :rtype: datetime
        """
        return self._idea_creation_date

    @idea_creation_date.setter
    def idea_creation_date(self, idea_creation_date):
        """
        Sets the idea_creation_date of this Idea.

        :param idea_creation_date: The idea_creation_date of this Idea.
        :type: datetime
        """

        self._idea_creation_date = idea_creation_date

    @property
    def last_modified_date(self):
        """
        Gets the last_modified_date of this Idea.

        :return: The last_modified_date of this Idea.
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """
        Sets the last_modified_date of this Idea.

        :param last_modified_date: The last_modified_date of this Idea.
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def idea_stage(self):
        """
        Gets the idea_stage of this Idea.

        :return: The idea_stage of this Idea.
        :rtype: str
        """
        return self._idea_stage

    @idea_stage.setter
    def idea_stage(self, idea_stage):
        """
        Sets the idea_stage of this Idea.

        :param idea_stage: The idea_stage of this Idea.
        :type: str
        """

        self._idea_stage = idea_stage

    @property
    def domain(self):
        """
        Gets the domain of this Idea.

        :return: The domain of this Idea.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """
        Sets the domain of this Idea.

        :param domain: The domain of this Idea.
        :type: str
        """

        self._domain = domain

    @property
    def technology(self):
        """
        Gets the technology of this Idea.

        :return: The technology of this Idea.
        :rtype: str
        """
        return self._technology

    @technology.setter
    def technology(self, technology):
        """
        Sets the technology of this Idea.

        :param technology: The technology of this Idea.
        :type: str
        """

        self._technology = technology

    @property
    def access_type(self):
        """
        Gets the access_type of this Idea.

        :return: The access_type of this Idea.
        :rtype: str
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """
        Sets the access_type of this Idea.

        :param access_type: The access_type of this Idea.
        :type: str
        """

        self._access_type = access_type

    @property
    def video_id(self):
        """
        Gets the video_id of this Idea.

        :return: The video_id of this Idea.
        :rtype: str
        """
        return self._video_id

    @video_id.setter
    def video_id(self, video_id):
        """
        Sets the video_id of this Idea.

        :param video_id: The video_id of this Idea.
        :type: str
        """

        self._video_id = video_id

    @property
    def active_status(self):
        """
        Gets the active_status of this Idea.

        :return: The active_status of this Idea.
        :rtype: str
        """
        return self._active_status

    @active_status.setter
    def active_status(self, active_status):
        """
        Sets the active_status of this Idea.

        :param active_status: The active_status of this Idea.
        :type: str
        """

        self._active_status = active_status

    @property
    def team_status(self):
        """
        Gets the team_status of this Idea.

        :return: The team_status of this Idea.
        :rtype: str
        """
        return self._team_status

    @team_status.setter
    def team_status(self, team_status):
        """
        Sets the team_status of this Idea.

        :param team_status: The team_status of this Idea.
        :type: str
        """

        self._team_status = team_status

    @property
    def project_status(self):
        """
        Gets the project_status of this Idea.

        :return: The project_status of this Idea.
        :rtype: str
        """
        return self._project_status

    @project_status.setter
    def project_status(self, project_status):
        """
        Sets the project_status of this Idea.

        :param project_status: The project_status of this Idea.
        :type: str
        """

        self._project_status = project_status

    @property
    def total_followers(self):
        """
        Gets the total_followers of this Idea.

        :return: The total_followers of this Idea.
        :rtype: int
        """
        return self._total_followers

    @total_followers.setter
    def total_followers(self, total_followers):
        """
        Sets the total_followers of this Idea.

        :param total_followers: The total_followers of this Idea.
        :type: int
        """

        self._total_followers = total_followers

    @property
    def total_comments(self):
        """
        Gets the total_comments of this Idea.

        :return: The total_comments of this Idea.
        :rtype: int
        """
        return self._total_comments

    @total_comments.setter
    def total_comments(self, total_comments):
        """
        Sets the total_comments of this Idea.

        :param total_comments: The total_comments of this Idea.
        :type: int
        """

        self._total_comments = total_comments

    @property
    def total_blogs(self):
        """
        Gets the total_blogs of this Idea.

        :return: The total_blogs of this Idea.
        :rtype: int
        """
        return self._total_blogs

    @total_blogs.setter
    def total_blogs(self, total_blogs):
        """
        Sets the total_blogs of this Idea.

        :param total_blogs: The total_blogs of this Idea.
        :type: int
        """

        self._total_blogs = total_blogs

    @property
    def average_rating_score(self):
        """
        Gets the average_rating_score of this Idea.

        :return: The average_rating_score of this Idea.
        :rtype: float
        """
        return self._average_rating_score

    @average_rating_score.setter
    def average_rating_score(self, average_rating_score):
        """
        Sets the average_rating_score of this Idea.

        :param average_rating_score: The average_rating_score of this Idea.
        :type: float
        """

        self._average_rating_score = average_rating_score

    @property
    def number_of_ratings(self):
        """
        Gets the number_of_ratings of this Idea.

        :return: The number_of_ratings of this Idea.
        :rtype: int
        """
        return self._number_of_ratings

    @number_of_ratings.setter
    def number_of_ratings(self, number_of_ratings):
        """
        Sets the number_of_ratings of this Idea.

        :param number_of_ratings: The number_of_ratings of this Idea.
        :type: int
        """

        self._number_of_ratings = number_of_ratings

    @property
    def current_user_following(self):
        """
        Gets the current_user_following of this Idea.

        :return: The current_user_following of this Idea.
        :rtype: bool
        """
        return self._current_user_following

    @current_user_following.setter
    def current_user_following(self, current_user_following):
        """
        Sets the current_user_following of this Idea.

        :param current_user_following: The current_user_following of this Idea.
        :type: bool
        """

        self._current_user_following = current_user_following

    @property
    def current_user_rating(self):
        """
        Gets the current_user_rating of this Idea.

        :return: The current_user_rating of this Idea.
        :rtype: float
        """
        return self._current_user_rating

    @current_user_rating.setter
    def current_user_rating(self, current_user_rating):
        """
        Sets the current_user_rating of this Idea.

        :param current_user_rating: The current_user_rating of this Idea.
        :type: float
        """

        self._current_user_rating = current_user_rating

    @property
    def idea_file_url(self):
        """
        Gets the idea_file_url of this Idea.

        :return: The idea_file_url of this Idea.
        :rtype: str
        """
        return self._idea_file_url

    @idea_file_url.setter
    def idea_file_url(self, idea_file_url):
        """
        Sets the idea_file_url of this Idea.

        :param idea_file_url: The idea_file_url of this Idea.
        :type: str
        """

        self._idea_file_url = idea_file_url

    @property
    def attachment_list(self):
        """
        Gets the attachment_list of this Idea.

        :return: The attachment_list of this Idea.
        :rtype: list[Multimedia]
        """
        return self._attachment_list

    @attachment_list.setter
    def attachment_list(self, attachment_list):
        """
        Sets the attachment_list of this Idea.

        :param attachment_list: The attachment_list of this Idea.
        :type: list[Multimedia]
        """

        self._attachment_list = attachment_list

    @property
    def sentiment(self):
        """
        Gets the sentiment of this Idea.

        :return: The sentiment of this Idea.
        :rtype: str
        """
        return self._sentiment

    @sentiment.setter
    def sentiment(self, sentiment):
        """
        Sets the sentiment of this Idea.

        :param sentiment: The sentiment of this Idea.
        :type: str
        """

        self._sentiment = sentiment

    @property
    def sentiment_details(self):
        """
        Gets the sentiment_details of this Idea.

        :return: The sentiment_details of this Idea.
        :rtype: Sentiment
        """
        return self._sentiment_details

    @sentiment_details.setter
    def sentiment_details(self, sentiment_details):
        """
        Sets the sentiment_details of this Idea.

        :param sentiment_details: The sentiment_details of this Idea.
        :type: Sentiment
        """

        self._sentiment_details = sentiment_details

    @property
    def sentiment_weightage(self):
        """
        Gets the sentiment_weightage of this Idea.

        :return: The sentiment_weightage of this Idea.
        :rtype: float
        """
        return self._sentiment_weightage

    @sentiment_weightage.setter
    def sentiment_weightage(self, sentiment_weightage):
        """
        Sets the sentiment_weightage of this Idea.

        :param sentiment_weightage: The sentiment_weightage of this Idea.
        :type: float
        """

        self._sentiment_weightage = sentiment_weightage

    @property
    def entity(self):
        """
        Gets the entity of this Idea.

        :return: The entity of this Idea.
        :rtype: list[NER]
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """
        Sets the entity of this Idea.

        :param entity: The entity of this Idea.
        :type: list[NER]
        """

        self._entity = entity

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
