# coding: utf-8

"""
    iEngage 2.0 API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class EntitySentiment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, entity_id=None, entity_title=None, sentiment=None, type=None):
        """
        EntitySentiment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'entity_id': 'int',
            'entity_title': 'str',
            'sentiment': 'str',
            'type': 'str'
        }

        self.attribute_map = {
            'entity_id': 'entityId',
            'entity_title': 'entityTitle',
            'sentiment': 'sentiment',
            'type': 'type'
        }

        self._entity_id = entity_id
        self._entity_title = entity_title
        self._sentiment = sentiment
        self._type = type

    @property
    def entity_id(self):
        """
        Gets the entity_id of this EntitySentiment.


        :return: The entity_id of this EntitySentiment.
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this EntitySentiment.


        :param entity_id: The entity_id of this EntitySentiment.
        :type: int
        """

        self._entity_id = entity_id

    @property
    def entity_title(self):
        """
        Gets the entity_title of this EntitySentiment.


        :return: The entity_title of this EntitySentiment.
        :rtype: str
        """
        return self._entity_title

    @entity_title.setter
    def entity_title(self, entity_title):
        """
        Sets the entity_title of this EntitySentiment.


        :param entity_title: The entity_title of this EntitySentiment.
        :type: str
        """

        self._entity_title = entity_title

    @property
    def sentiment(self):
        """
        Gets the sentiment of this EntitySentiment.


        :return: The sentiment of this EntitySentiment.
        :rtype: str
        """
        return self._sentiment

    @sentiment.setter
    def sentiment(self, sentiment):
        """
        Sets the sentiment of this EntitySentiment.


        :param sentiment: The sentiment of this EntitySentiment.
        :type: str
        """

        self._sentiment = sentiment

    @property
    def type(self):
        """
        Gets the type of this EntitySentiment.


        :return: The type of this EntitySentiment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this EntitySentiment.


        :param type: The type of this EntitySentiment.
        :type: str
        """

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
