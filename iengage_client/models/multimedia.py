# coding: utf-8

"""
    iEngage 2.0 API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Multimedia(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, multimedia_id=None, used_for=None, multimedia_type=None, text=None, url=None):
        """
        Multimedia - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'multimedia_id': 'int',
            'used_for': 'str',
            'multimedia_type': 'str',
            'text': 'str',
            'url': 'str'
        }

        self.attribute_map = {
            'multimedia_id': 'multimediaId',
            'used_for': 'usedFor',
            'multimedia_type': 'multimediaType',
            'text': 'text',
            'url': 'url'
        }

        self._multimedia_id = multimedia_id
        self._used_for = used_for
        self._multimedia_type = multimedia_type
        self._text = text
        self._url = url

    @property
    def multimedia_id(self):
        """
        Gets the multimedia_id of this Multimedia.

        :return: The multimedia_id of this Multimedia.
        :rtype: int
        """
        return self._multimedia_id

    @multimedia_id.setter
    def multimedia_id(self, multimedia_id):
        """
        Sets the multimedia_id of this Multimedia.

        :param multimedia_id: The multimedia_id of this Multimedia.
        :type: int
        """

        self._multimedia_id = multimedia_id

    @property
    def used_for(self):
        """
        Gets the used_for of this Multimedia.

        :return: The used_for of this Multimedia.
        :rtype: str
        """
        return self._used_for

    @used_for.setter
    def used_for(self, used_for):
        """
        Sets the used_for of this Multimedia.

        :param used_for: The used_for of this Multimedia.
        :type: str
        """

        self._used_for = used_for

    @property
    def multimedia_type(self):
        """
        Gets the multimedia_type of this Multimedia.

        :return: The multimedia_type of this Multimedia.
        :rtype: str
        """
        return self._multimedia_type

    @multimedia_type.setter
    def multimedia_type(self, multimedia_type):
        """
        Sets the multimedia_type of this Multimedia.

        :param multimedia_type: The multimedia_type of this Multimedia.
        :type: str
        """

        self._multimedia_type = multimedia_type

    @property
    def text(self):
        """
        Gets the text of this Multimedia.

        :return: The text of this Multimedia.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """
        Sets the text of this Multimedia.

        :param text: The text of this Multimedia.
        :type: str
        """

        self._text = text

    @property
    def url(self):
        """
        Gets the url of this Multimedia.

        :return: The url of this Multimedia.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this Multimedia.

        :param url: The url of this Multimedia.
        :type: str
        """

        self._url = url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
