# coding: utf-8

"""
    iEngage 2.0 API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserPoints(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, user=None, contribution_points=None, participation_points=None, total_points=None):
        """
        UserPoints - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'user': 'User',
            'contribution_points': 'int',
            'participation_points': 'int',
            'total_points': 'int'
        }

        self.attribute_map = {
            'user': 'user',
            'contribution_points': 'contributionPoints',
            'participation_points': 'participationPoints',
            'total_points': 'totalPoints'
        }

        self._user = user
        self._contribution_points = contribution_points
        self._participation_points = participation_points
        self._total_points = total_points

    @property
    def user(self):
        """
        Gets the user of this UserPoints.

        :return: The user of this UserPoints.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this UserPoints.

        :param user: The user of this UserPoints.
        :type: User
        """

        self._user = user

    @property
    def contribution_points(self):
        """
        Gets the contribution_points of this UserPoints.

        :return: The contribution_points of this UserPoints.
        :rtype: int
        """
        return self._contribution_points

    @contribution_points.setter
    def contribution_points(self, contribution_points):
        """
        Sets the contribution_points of this UserPoints.

        :param contribution_points: The contribution_points of this UserPoints.
        :type: int
        """

        self._contribution_points = contribution_points

    @property
    def participation_points(self):
        """
        Gets the participation_points of this UserPoints.

        :return: The participation_points of this UserPoints.
        :rtype: int
        """
        return self._participation_points

    @participation_points.setter
    def participation_points(self, participation_points):
        """
        Sets the participation_points of this UserPoints.

        :param participation_points: The participation_points of this UserPoints.
        :type: int
        """

        self._participation_points = participation_points

    @property
    def total_points(self):
        """
        Gets the total_points of this UserPoints.

        :return: The total_points of this UserPoints.
        :rtype: int
        """
        return self._total_points

    @total_points.setter
    def total_points(self, total_points):
        """
        Sets the total_points of this UserPoints.

        :param total_points: The total_points of this UserPoints.
        :type: int
        """

        self._total_points = total_points

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
