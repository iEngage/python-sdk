# coding: utf-8

"""
    iEngage 2.0 API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Discussion(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, discussion_id=None, user=None, subject=None, description=None, creation_time=None, sentiment=None, sentiment_details=None, sentiment_weightage=None, entity=None, association=None):
        """
        Discussion - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'discussion_id': 'int',
            'user': 'User',
            'subject': 'str',
            'description': 'str',
            'creation_time': 'datetime',
            'sentiment': 'str',
            'sentiment_details': 'Sentiment',
            'sentiment_weightage': 'float',
            'entity': 'list[NER]',
            'association': 'int'
        }

        self.attribute_map = {
            'discussion_id': 'discussionId',
            'user': 'user',
            'subject': 'subject',
            'description': 'description',
            'creation_time': 'creationTime',
            'sentiment': 'sentiment',
            'sentiment_details': 'sentimentDetails',
            'sentiment_weightage': 'sentimentWeightage',
            'entity': 'entity',
            'association': 'association'
        }

        self._discussion_id = discussion_id
        self._user = user
        self._subject = subject
        self._description = description
        self._creation_time = creation_time
        self._sentiment = sentiment
        self._sentiment_details = sentiment_details
        self._sentiment_weightage = sentiment_weightage
        self._entity = entity
        self._association = association

    @property
    def discussion_id(self):
        """
        Gets the discussion_id of this Discussion.


        :return: The discussion_id of this Discussion.
        :rtype: int
        """
        return self._discussion_id

    @discussion_id.setter
    def discussion_id(self, discussion_id):
        """
        Sets the discussion_id of this Discussion.


        :param discussion_id: The discussion_id of this Discussion.
        :type: int
        """

        self._discussion_id = discussion_id

    @property
    def user(self):
        """
        Gets the user of this Discussion.


        :return: The user of this Discussion.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this Discussion.


        :param user: The user of this Discussion.
        :type: User
        """

        self._user = user

    @property
    def subject(self):
        """
        Gets the subject of this Discussion.


        :return: The subject of this Discussion.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this Discussion.


        :param subject: The subject of this Discussion.
        :type: str
        """

        self._subject = subject

    @property
    def description(self):
        """
        Gets the description of this Discussion.


        :return: The description of this Discussion.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Discussion.


        :param description: The description of this Discussion.
        :type: str
        """

        self._description = description

    @property
    def creation_time(self):
        """
        Gets the creation_time of this Discussion.


        :return: The creation_time of this Discussion.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """
        Sets the creation_time of this Discussion.


        :param creation_time: The creation_time of this Discussion.
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def sentiment(self):
        """
        Gets the sentiment of this Discussion.


        :return: The sentiment of this Discussion.
        :rtype: str
        """
        return self._sentiment

    @sentiment.setter
    def sentiment(self, sentiment):
        """
        Sets the sentiment of this Discussion.


        :param sentiment: The sentiment of this Discussion.
        :type: str
        """

        self._sentiment = sentiment

    @property
    def sentiment_details(self):
        """
        Gets the sentiment_details of this Discussion.


        :return: The sentiment_details of this Discussion.
        :rtype: Sentiment
        """
        return self._sentiment_details

    @sentiment_details.setter
    def sentiment_details(self, sentiment_details):
        """
        Sets the sentiment_details of this Discussion.


        :param sentiment_details: The sentiment_details of this Discussion.
        :type: Sentiment
        """

        self._sentiment_details = sentiment_details

    @property
    def sentiment_weightage(self):
        """
        Gets the sentiment_weightage of this Discussion.


        :return: The sentiment_weightage of this Discussion.
        :rtype: float
        """
        return self._sentiment_weightage

    @sentiment_weightage.setter
    def sentiment_weightage(self, sentiment_weightage):
        """
        Sets the sentiment_weightage of this Discussion.


        :param sentiment_weightage: The sentiment_weightage of this Discussion.
        :type: float
        """

        self._sentiment_weightage = sentiment_weightage

    @property
    def entity(self):
        """
        Gets the entity of this Discussion.


        :return: The entity of this Discussion.
        :rtype: list[NER]
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """
        Sets the entity of this Discussion.


        :param entity: The entity of this Discussion.
        :type: list[NER]
        """

        self._entity = entity

    @property
    def association(self):
        """
        Gets the association of this Discussion.


        :return: The association of this Discussion.
        :rtype: int
        """
        return self._association

    @association.setter
    def association(self, association):
        """
        Sets the association of this Discussion.


        :param association: The association of this Discussion.
        :type: int
        """

        self._association = association

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
