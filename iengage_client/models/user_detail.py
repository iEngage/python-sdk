# coding: utf-8

"""
    iEngage 2.0 API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserDetail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, user=None, current_user_following=False, current_user_friend=False, equity_score=None, following_count=None, submission_count=None, friend_request_status=None):
        """
        UserDetail - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'user': 'User',
            'current_user_following': 'bool',
            'current_user_friend': 'bool',
            'equity_score': 'int',
            'following_count': 'int',
            'submission_count': 'int',
            'friend_request_status': 'int'
        }

        self.attribute_map = {
            'user': 'user',
            'current_user_following': 'currentUserFollowing',
            'current_user_friend': 'currentUserFriend',
            'equity_score': 'equityScore',
            'following_count': 'followingCount',
            'submission_count': 'submissionCount',
            'friend_request_status': 'friendRequestStatus'
        }

        self._user = user
        self._current_user_following = current_user_following
        self._current_user_friend = current_user_friend
        self._equity_score = equity_score
        self._following_count = following_count
        self._submission_count = submission_count
        self._friend_request_status = friend_request_status

    @property
    def user(self):
        """
        Gets the user of this UserDetail.

        :return: The user of this UserDetail.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this UserDetail.

        :param user: The user of this UserDetail.
        :type: User
        """

        self._user = user

    @property
    def current_user_following(self):
        """
        Gets the current_user_following of this UserDetail.

        :return: The current_user_following of this UserDetail.
        :rtype: bool
        """
        return self._current_user_following

    @current_user_following.setter
    def current_user_following(self, current_user_following):
        """
        Sets the current_user_following of this UserDetail.

        :param current_user_following: The current_user_following of this UserDetail.
        :type: bool
        """

        self._current_user_following = current_user_following

    @property
    def current_user_friend(self):
        """
        Gets the current_user_friend of this UserDetail.

        :return: The current_user_friend of this UserDetail.
        :rtype: bool
        """
        return self._current_user_friend

    @current_user_friend.setter
    def current_user_friend(self, current_user_friend):
        """
        Sets the current_user_friend of this UserDetail.

        :param current_user_friend: The current_user_friend of this UserDetail.
        :type: bool
        """

        self._current_user_friend = current_user_friend

    @property
    def equity_score(self):
        """
        Gets the equity_score of this UserDetail.

        :return: The equity_score of this UserDetail.
        :rtype: int
        """
        return self._equity_score

    @equity_score.setter
    def equity_score(self, equity_score):
        """
        Sets the equity_score of this UserDetail.

        :param equity_score: The equity_score of this UserDetail.
        :type: int
        """

        self._equity_score = equity_score

    @property
    def following_count(self):
        """
        Gets the following_count of this UserDetail.

        :return: The following_count of this UserDetail.
        :rtype: int
        """
        return self._following_count

    @following_count.setter
    def following_count(self, following_count):
        """
        Sets the following_count of this UserDetail.

        :param following_count: The following_count of this UserDetail.
        :type: int
        """

        self._following_count = following_count

    @property
    def submission_count(self):
        """
        Gets the submission_count of this UserDetail.

        :return: The submission_count of this UserDetail.
        :rtype: int
        """
        return self._submission_count

    @submission_count.setter
    def submission_count(self, submission_count):
        """
        Sets the submission_count of this UserDetail.

        :param submission_count: The submission_count of this UserDetail.
        :type: int
        """

        self._submission_count = submission_count

    @property
    def friend_request_status(self):
        """
        Gets the friend_request_status of this UserDetail.

        :return: The friend_request_status of this UserDetail.
        :rtype: int
        """
        return self._friend_request_status

    @friend_request_status.setter
    def friend_request_status(self, friend_request_status):
        """
        Sets the friend_request_status of this UserDetail.

        :param friend_request_status: The friend_request_status of this UserDetail.
        :type: int
        """

        self._friend_request_status = friend_request_status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
