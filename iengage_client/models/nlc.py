# coding: utf-8

"""
    Stakeholder engagement API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NLC(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, nlc_id=None, nlc_classifier_name=None, created_date=None, modified_date=None, classification=None):
        """
        NLC - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'nlc_id': 'int',
            'nlc_classifier_name': 'str',
            'created_date': 'datetime',
            'modified_date': 'datetime',
            'classification': 'list[Bucket]'
        }

        self.attribute_map = {
            'nlc_id': 'nlcId',
            'nlc_classifier_name': 'nlcClassifierName',
            'created_date': 'createdDate',
            'modified_date': 'modifiedDate',
            'classification': 'classification'
        }

        self._nlc_id = nlc_id
        self._nlc_classifier_name = nlc_classifier_name
        self._created_date = created_date
        self._modified_date = modified_date
        self._classification = classification

    @property
    def nlc_id(self):
        """
        Gets the nlc_id of this NLC.

        :return: The nlc_id of this NLC.
        :rtype: int
        """
        return self._nlc_id

    @nlc_id.setter
    def nlc_id(self, nlc_id):
        """
        Sets the nlc_id of this NLC.

        :param nlc_id: The nlc_id of this NLC.
        :type: int
        """

        self._nlc_id = nlc_id

    @property
    def nlc_classifier_name(self):
        """
        Gets the nlc_classifier_name of this NLC.

        :return: The nlc_classifier_name of this NLC.
        :rtype: str
        """
        return self._nlc_classifier_name

    @nlc_classifier_name.setter
    def nlc_classifier_name(self, nlc_classifier_name):
        """
        Sets the nlc_classifier_name of this NLC.

        :param nlc_classifier_name: The nlc_classifier_name of this NLC.
        :type: str
        """

        self._nlc_classifier_name = nlc_classifier_name

    @property
    def created_date(self):
        """
        Gets the created_date of this NLC.

        :return: The created_date of this NLC.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this NLC.

        :param created_date: The created_date of this NLC.
        :type: datetime
        """

        self._created_date = created_date

    @property
    def modified_date(self):
        """
        Gets the modified_date of this NLC.

        :return: The modified_date of this NLC.
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """
        Sets the modified_date of this NLC.

        :param modified_date: The modified_date of this NLC.
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def classification(self):
        """
        Gets the classification of this NLC.

        :return: The classification of this NLC.
        :rtype: list[Bucket]
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """
        Sets the classification of this NLC.

        :param classification: The classification of this NLC.
        :type: list[Bucket]
        """

        self._classification = classification

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
