# coding: utf-8

"""
    Stakeholder engagement API

    This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class User(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, user_id=None, first_name=None, last_name=None, email_id=None, profile_image=None, has_interest_updated=False, birth_date=None, access_token=None, current_user_following=False, current_user_friend=False, equity_score=None, extra_data=None):
        """
        User - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'user_id': 'int',
            'first_name': 'str',
            'last_name': 'str',
            'email_id': 'str',
            'profile_image': 'str',
            'has_interest_updated': 'bool',
            'birth_date': 'datetime',
            'access_token': 'str',
            'current_user_following': 'bool',
            'current_user_friend': 'bool',
            'equity_score': 'int',
            'extra_data': 'str'
        }

        self.attribute_map = {
            'user_id': 'userId',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'email_id': 'emailId',
            'profile_image': 'profileImage',
            'has_interest_updated': 'hasInterestUpdated',
            'birth_date': 'birthDate',
            'access_token': 'accessToken',
            'current_user_following': 'currentUserFollowing',
            'current_user_friend': 'currentUserFriend',
            'equity_score': 'equityScore',
            'extra_data': 'extraData'
        }

        self._user_id = user_id
        self._first_name = first_name
        self._last_name = last_name
        self._email_id = email_id
        self._profile_image = profile_image
        self._has_interest_updated = has_interest_updated
        self._birth_date = birth_date
        self._access_token = access_token
        self._current_user_following = current_user_following
        self._current_user_friend = current_user_friend
        self._equity_score = equity_score
        self._extra_data = extra_data

    @property
    def user_id(self):
        """
        Gets the user_id of this User.

        :return: The user_id of this User.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this User.

        :param user_id: The user_id of this User.
        :type: int
        """

        self._user_id = user_id

    @property
    def first_name(self):
        """
        Gets the first_name of this User.

        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this User.

        :param first_name: The first_name of this User.
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this User.

        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this User.

        :param last_name: The last_name of this User.
        :type: str
        """

        self._last_name = last_name

    @property
    def email_id(self):
        """
        Gets the email_id of this User.

        :return: The email_id of this User.
        :rtype: str
        """
        return self._email_id

    @email_id.setter
    def email_id(self, email_id):
        """
        Sets the email_id of this User.

        :param email_id: The email_id of this User.
        :type: str
        """

        self._email_id = email_id

    @property
    def profile_image(self):
        """
        Gets the profile_image of this User.

        :return: The profile_image of this User.
        :rtype: str
        """
        return self._profile_image

    @profile_image.setter
    def profile_image(self, profile_image):
        """
        Sets the profile_image of this User.

        :param profile_image: The profile_image of this User.
        :type: str
        """

        self._profile_image = profile_image

    @property
    def has_interest_updated(self):
        """
        Gets the has_interest_updated of this User.

        :return: The has_interest_updated of this User.
        :rtype: bool
        """
        return self._has_interest_updated

    @has_interest_updated.setter
    def has_interest_updated(self, has_interest_updated):
        """
        Sets the has_interest_updated of this User.

        :param has_interest_updated: The has_interest_updated of this User.
        :type: bool
        """

        self._has_interest_updated = has_interest_updated

    @property
    def birth_date(self):
        """
        Gets the birth_date of this User.

        :return: The birth_date of this User.
        :rtype: datetime
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """
        Sets the birth_date of this User.

        :param birth_date: The birth_date of this User.
        :type: datetime
        """

        self._birth_date = birth_date

    @property
    def access_token(self):
        """
        Gets the access_token of this User.

        :return: The access_token of this User.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """
        Sets the access_token of this User.

        :param access_token: The access_token of this User.
        :type: str
        """

        self._access_token = access_token

    @property
    def current_user_following(self):
        """
        Gets the current_user_following of this User.

        :return: The current_user_following of this User.
        :rtype: bool
        """
        return self._current_user_following

    @current_user_following.setter
    def current_user_following(self, current_user_following):
        """
        Sets the current_user_following of this User.

        :param current_user_following: The current_user_following of this User.
        :type: bool
        """

        self._current_user_following = current_user_following

    @property
    def current_user_friend(self):
        """
        Gets the current_user_friend of this User.

        :return: The current_user_friend of this User.
        :rtype: bool
        """
        return self._current_user_friend

    @current_user_friend.setter
    def current_user_friend(self, current_user_friend):
        """
        Sets the current_user_friend of this User.

        :param current_user_friend: The current_user_friend of this User.
        :type: bool
        """

        self._current_user_friend = current_user_friend

    @property
    def equity_score(self):
        """
        Gets the equity_score of this User.

        :return: The equity_score of this User.
        :rtype: int
        """
        return self._equity_score

    @equity_score.setter
    def equity_score(self, equity_score):
        """
        Sets the equity_score of this User.

        :param equity_score: The equity_score of this User.
        :type: int
        """

        self._equity_score = equity_score

    @property
    def extra_data(self):
        """
        Gets the extra_data of this User.

        :return: The extra_data of this User.
        :rtype: str
        """
        return self._extra_data

    @extra_data.setter
    def extra_data(self, extra_data):
        """
        Sets the extra_data of this User.

        :param extra_data: The extra_data of this User.
        :type: str
        """

        self._extra_data = extra_data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
